// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcaplusgatesvr.proto

/*
Package tcaplusgatesvr is a generated protocol buffer package.

It is generated from these files:
	tcaplusgatesvr.proto

It has these top-level messages:
	DBUserSevenSignUp
	DBUserBestRecord
	DBRoleActivity
	DBUserAccount2IdInfo
	DBUserAccount2IdNew
	DBUserId2AccountInfo
	DBNQGUserScore
	DBNQGUserInfo
	DBNQGUserCoin
	DBNQGNewerGift
	DBNQGTrunkMission
	DBNQGBranchMission
	DBPlayerDailyRoom
	DBPlayerGameRoom
	DBPlayerBrokeAward
	DBPlayerExt
	DBPlayerGameStatis
	DBDailyGameTableStatis
	DBNQGHiddenMission
	DBNQGRushMission
	DBNQGUserItem
	DuoBaoUserHistory
	DuoBaoDuihuanUserHistory
	DuoBaoUserHistoryCodes
	DuoBaoUserContact
	DBRoleMail
	DBRoleGame
	DBRoleData
	DBGameReportDaily
	DBWorldRank
	DBNQGHealthGame
	DBNQGRedPackage
	DBRoleDiamond
	DBOnlineCnt
	DBHealthGameInfo
	DataPlainColumn
	DataPlainRow
	DataTcaplusRequestOption
	DataTcaplusResponseOption
	DataOperation
	SSMsgReqTcaplusPlainTable
	SSMsgRspTcaplusPlainTable
	SSMsgReqTcaplusPlainTableBatch
	SSMsgRspTcaplusPlainTableBatch
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TcaplusAPICmd int32

const (
	TcaplusAPICmd_ENTCAPLUS_API_MIN                  TcaplusAPICmd = 0
	TcaplusAPICmd_ENTCAPLUS_API_REQ_GET              TcaplusAPICmd = 1
	TcaplusAPICmd_ENTCAPLUS_API_RSP_GET              TcaplusAPICmd = 2
	TcaplusAPICmd_ENTCAPLUS_API_REQ_DELETE           TcaplusAPICmd = 3
	TcaplusAPICmd_ENTCAPLUS_API_RSP_DELETE           TcaplusAPICmd = 4
	TcaplusAPICmd_ENTCAPLUS_API_REQ_INSERT           TcaplusAPICmd = 5
	TcaplusAPICmd_ENTCAPLUS_API_RSP_INSERT           TcaplusAPICmd = 6
	TcaplusAPICmd_ENTCAPLUS_API_REQ_UPDATE           TcaplusAPICmd = 7
	TcaplusAPICmd_ENTCAPLUS_API_RSP_UPDATE           TcaplusAPICmd = 8
	TcaplusAPICmd_ENTCAPLUS_API_REQ_REPLACE          TcaplusAPICmd = 9
	TcaplusAPICmd_ENTCAPLUS_API_RSP_REPLACE          TcaplusAPICmd = 10
	TcaplusAPICmd_ENTCAPLUS_API_REQ_INCREASE         TcaplusAPICmd = 11
	TcaplusAPICmd_ENTCAPLUS_API_RSP_INCREASE         TcaplusAPICmd = 12
	TcaplusAPICmd_ENTCAPLUS_API_REQ_BATCH_GET        TcaplusAPICmd = 13
	TcaplusAPICmd_ENTCAPLUS_API_RSP_BATCH_GET        TcaplusAPICmd = 14
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_GETALL      TcaplusAPICmd = 15
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_GETALL      TcaplusAPICmd = 16
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_DELETEALL   TcaplusAPICmd = 17
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_DELETEALL   TcaplusAPICmd = 18
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_DELETEBATCH TcaplusAPICmd = 19
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_DELETEBATCH TcaplusAPICmd = 20
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_GET         TcaplusAPICmd = 21
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_GET         TcaplusAPICmd = 22
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_ADDAFTER    TcaplusAPICmd = 23
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_ADDAFTER    TcaplusAPICmd = 24
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_DELETE      TcaplusAPICmd = 25
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_DELETE      TcaplusAPICmd = 26
	TcaplusAPICmd_ENTCAPLUS_API_REQ_LIST_REPLACE     TcaplusAPICmd = 27
	TcaplusAPICmd_ENTCAPLUS_API_RSP_LIST_REPLACE     TcaplusAPICmd = 28
	TcaplusAPICmd_ENTCAPLUS_API_REQ_GET_BY_PARTKEY   TcaplusAPICmd = 29
	TcaplusAPICmd_ENTCAPLUS_API_RSP_GET_BY_PARTKEY   TcaplusAPICmd = 30
	TcaplusAPICmd_ENTCAPLUS_API_MAX                  TcaplusAPICmd = 100
)

var TcaplusAPICmd_name = map[int32]string{
	0:   "ENTCAPLUS_API_MIN",
	1:   "ENTCAPLUS_API_REQ_GET",
	2:   "ENTCAPLUS_API_RSP_GET",
	3:   "ENTCAPLUS_API_REQ_DELETE",
	4:   "ENTCAPLUS_API_RSP_DELETE",
	5:   "ENTCAPLUS_API_REQ_INSERT",
	6:   "ENTCAPLUS_API_RSP_INSERT",
	7:   "ENTCAPLUS_API_REQ_UPDATE",
	8:   "ENTCAPLUS_API_RSP_UPDATE",
	9:   "ENTCAPLUS_API_REQ_REPLACE",
	10:  "ENTCAPLUS_API_RSP_REPLACE",
	11:  "ENTCAPLUS_API_REQ_INCREASE",
	12:  "ENTCAPLUS_API_RSP_INCREASE",
	13:  "ENTCAPLUS_API_REQ_BATCH_GET",
	14:  "ENTCAPLUS_API_RSP_BATCH_GET",
	15:  "ENTCAPLUS_API_REQ_LIST_GETALL",
	16:  "ENTCAPLUS_API_RSP_LIST_GETALL",
	17:  "ENTCAPLUS_API_REQ_LIST_DELETEALL",
	18:  "ENTCAPLUS_API_RSP_LIST_DELETEALL",
	19:  "ENTCAPLUS_API_REQ_LIST_DELETEBATCH",
	20:  "ENTCAPLUS_API_RSP_LIST_DELETEBATCH",
	21:  "ENTCAPLUS_API_REQ_LIST_GET",
	22:  "ENTCAPLUS_API_RSP_LIST_GET",
	23:  "ENTCAPLUS_API_REQ_LIST_ADDAFTER",
	24:  "ENTCAPLUS_API_RSP_LIST_ADDAFTER",
	25:  "ENTCAPLUS_API_REQ_LIST_DELETE",
	26:  "ENTCAPLUS_API_RSP_LIST_DELETE",
	27:  "ENTCAPLUS_API_REQ_LIST_REPLACE",
	28:  "ENTCAPLUS_API_RSP_LIST_REPLACE",
	29:  "ENTCAPLUS_API_REQ_GET_BY_PARTKEY",
	30:  "ENTCAPLUS_API_RSP_GET_BY_PARTKEY",
	100: "ENTCAPLUS_API_MAX",
}
var TcaplusAPICmd_value = map[string]int32{
	"ENTCAPLUS_API_MIN":                  0,
	"ENTCAPLUS_API_REQ_GET":              1,
	"ENTCAPLUS_API_RSP_GET":              2,
	"ENTCAPLUS_API_REQ_DELETE":           3,
	"ENTCAPLUS_API_RSP_DELETE":           4,
	"ENTCAPLUS_API_REQ_INSERT":           5,
	"ENTCAPLUS_API_RSP_INSERT":           6,
	"ENTCAPLUS_API_REQ_UPDATE":           7,
	"ENTCAPLUS_API_RSP_UPDATE":           8,
	"ENTCAPLUS_API_REQ_REPLACE":          9,
	"ENTCAPLUS_API_RSP_REPLACE":          10,
	"ENTCAPLUS_API_REQ_INCREASE":         11,
	"ENTCAPLUS_API_RSP_INCREASE":         12,
	"ENTCAPLUS_API_REQ_BATCH_GET":        13,
	"ENTCAPLUS_API_RSP_BATCH_GET":        14,
	"ENTCAPLUS_API_REQ_LIST_GETALL":      15,
	"ENTCAPLUS_API_RSP_LIST_GETALL":      16,
	"ENTCAPLUS_API_REQ_LIST_DELETEALL":   17,
	"ENTCAPLUS_API_RSP_LIST_DELETEALL":   18,
	"ENTCAPLUS_API_REQ_LIST_DELETEBATCH": 19,
	"ENTCAPLUS_API_RSP_LIST_DELETEBATCH": 20,
	"ENTCAPLUS_API_REQ_LIST_GET":         21,
	"ENTCAPLUS_API_RSP_LIST_GET":         22,
	"ENTCAPLUS_API_REQ_LIST_ADDAFTER":    23,
	"ENTCAPLUS_API_RSP_LIST_ADDAFTER":    24,
	"ENTCAPLUS_API_REQ_LIST_DELETE":      25,
	"ENTCAPLUS_API_RSP_LIST_DELETE":      26,
	"ENTCAPLUS_API_REQ_LIST_REPLACE":     27,
	"ENTCAPLUS_API_RSP_LIST_REPLACE":     28,
	"ENTCAPLUS_API_REQ_GET_BY_PARTKEY":   29,
	"ENTCAPLUS_API_RSP_GET_BY_PARTKEY":   30,
	"ENTCAPLUS_API_MAX":                  100,
}

func (x TcaplusAPICmd) Enum() *TcaplusAPICmd {
	p := new(TcaplusAPICmd)
	*p = x
	return p
}
func (x TcaplusAPICmd) String() string {
	return proto.EnumName(TcaplusAPICmd_name, int32(x))
}
func (x *TcaplusAPICmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TcaplusAPICmd_value, data, "TcaplusAPICmd")
	if err != nil {
		return err
	}
	*x = TcaplusAPICmd(value)
	return nil
}
func (TcaplusAPICmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SSDBTcaplusErr int32

const (
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_CMD                             SSDBTcaplusErr = 256100
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUSID                       SSDBTcaplusErr = 256101
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_SEND                    SSDBTcaplusErr = 256102
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_GETREQUEST              SSDBTcaplusErr = 256103
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_ADDFIELDNAME            SSDBTcaplusErr = 256105
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_ADDRECORD               SSDBTcaplusErr = 256106
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_DATATYPE                SSDBTcaplusErr = 256107
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_SETKEY                  SSDBTcaplusErr = 256108
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_GETRECORD_VAL           SSDBTcaplusErr = 256109
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_GETRECORD_KEY           SSDBTcaplusErr = 256110
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_CMD                     SSDBTcaplusErr = 256111
	SSDBTcaplusErr_SSDBTCAPLUS_ERR_TCAPLUS_INCREASE_MISS_OPERATION SSDBTcaplusErr = 256112
)

var SSDBTcaplusErr_name = map[int32]string{
	256100: "SSDBTCAPLUS_ERR_CMD",
	256101: "SSDBTCAPLUS_ERR_TCAPLUSID",
	256102: "SSDBTCAPLUS_ERR_TCAPLUS_SEND",
	256103: "SSDBTCAPLUS_ERR_TCAPLUS_GETREQUEST",
	256105: "SSDBTCAPLUS_ERR_TCAPLUS_ADDFIELDNAME",
	256106: "SSDBTCAPLUS_ERR_TCAPLUS_ADDRECORD",
	256107: "SSDBTCAPLUS_ERR_TCAPLUS_DATATYPE",
	256108: "SSDBTCAPLUS_ERR_TCAPLUS_SETKEY",
	256109: "SSDBTCAPLUS_ERR_TCAPLUS_GETRECORD_VAL",
	256110: "SSDBTCAPLUS_ERR_TCAPLUS_GETRECORD_KEY",
	256111: "SSDBTCAPLUS_ERR_TCAPLUS_CMD",
	256112: "SSDBTCAPLUS_ERR_TCAPLUS_INCREASE_MISS_OPERATION",
}
var SSDBTcaplusErr_value = map[string]int32{
	"SSDBTCAPLUS_ERR_CMD":                             256100,
	"SSDBTCAPLUS_ERR_TCAPLUSID":                       256101,
	"SSDBTCAPLUS_ERR_TCAPLUS_SEND":                    256102,
	"SSDBTCAPLUS_ERR_TCAPLUS_GETREQUEST":              256103,
	"SSDBTCAPLUS_ERR_TCAPLUS_ADDFIELDNAME":            256105,
	"SSDBTCAPLUS_ERR_TCAPLUS_ADDRECORD":               256106,
	"SSDBTCAPLUS_ERR_TCAPLUS_DATATYPE":                256107,
	"SSDBTCAPLUS_ERR_TCAPLUS_SETKEY":                  256108,
	"SSDBTCAPLUS_ERR_TCAPLUS_GETRECORD_VAL":           256109,
	"SSDBTCAPLUS_ERR_TCAPLUS_GETRECORD_KEY":           256110,
	"SSDBTCAPLUS_ERR_TCAPLUS_CMD":                     256111,
	"SSDBTCAPLUS_ERR_TCAPLUS_INCREASE_MISS_OPERATION": 256112,
}

func (x SSDBTcaplusErr) Enum() *SSDBTcaplusErr {
	p := new(SSDBTcaplusErr)
	*p = x
	return p
}
func (x SSDBTcaplusErr) String() string {
	return proto.EnumName(SSDBTcaplusErr_name, int32(x))
}
func (x *SSDBTcaplusErr) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSDBTcaplusErr_value, data, "SSDBTcaplusErr")
	if err != nil {
		return err
	}
	*x = SSDBTcaplusErr(value)
	return nil
}
func (SSDBTcaplusErr) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TcaplusDataType int32

const (
	TcaplusDataType_EN_TCAPLUS_DATATYPE_MIN    TcaplusDataType = 0
	TcaplusDataType_EN_TCAPLUS_DATATYPE_INT8   TcaplusDataType = 1
	TcaplusDataType_EN_TCAPLUS_DATATYPE_UINT8  TcaplusDataType = 2
	TcaplusDataType_EN_TCAPLUS_DATATYPE_INT16  TcaplusDataType = 3
	TcaplusDataType_EN_TCAPLUS_DATATYPE_UINT16 TcaplusDataType = 4
	TcaplusDataType_EN_TCAPLUS_DATATYPE_INT32  TcaplusDataType = 5
	TcaplusDataType_EN_TCAPLUS_DATATYPE_UINT32 TcaplusDataType = 6
	TcaplusDataType_EN_TCAPLUS_DATATYPE_INT64  TcaplusDataType = 7
	TcaplusDataType_EN_TCAPLUS_DATATYPE_UINT64 TcaplusDataType = 8
	TcaplusDataType_EN_TCAPLUS_DATATYPE_STRING TcaplusDataType = 9
	TcaplusDataType_EN_TCAPLUS_DATATYPE_BLOB   TcaplusDataType = 10
	TcaplusDataType_EN_TCAPLUS_DATATYPE_MAX    TcaplusDataType = 12
)

var TcaplusDataType_name = map[int32]string{
	0:  "EN_TCAPLUS_DATATYPE_MIN",
	1:  "EN_TCAPLUS_DATATYPE_INT8",
	2:  "EN_TCAPLUS_DATATYPE_UINT8",
	3:  "EN_TCAPLUS_DATATYPE_INT16",
	4:  "EN_TCAPLUS_DATATYPE_UINT16",
	5:  "EN_TCAPLUS_DATATYPE_INT32",
	6:  "EN_TCAPLUS_DATATYPE_UINT32",
	7:  "EN_TCAPLUS_DATATYPE_INT64",
	8:  "EN_TCAPLUS_DATATYPE_UINT64",
	9:  "EN_TCAPLUS_DATATYPE_STRING",
	10: "EN_TCAPLUS_DATATYPE_BLOB",
	12: "EN_TCAPLUS_DATATYPE_MAX",
}
var TcaplusDataType_value = map[string]int32{
	"EN_TCAPLUS_DATATYPE_MIN":    0,
	"EN_TCAPLUS_DATATYPE_INT8":   1,
	"EN_TCAPLUS_DATATYPE_UINT8":  2,
	"EN_TCAPLUS_DATATYPE_INT16":  3,
	"EN_TCAPLUS_DATATYPE_UINT16": 4,
	"EN_TCAPLUS_DATATYPE_INT32":  5,
	"EN_TCAPLUS_DATATYPE_UINT32": 6,
	"EN_TCAPLUS_DATATYPE_INT64":  7,
	"EN_TCAPLUS_DATATYPE_UINT64": 8,
	"EN_TCAPLUS_DATATYPE_STRING": 9,
	"EN_TCAPLUS_DATATYPE_BLOB":   10,
	"EN_TCAPLUS_DATATYPE_MAX":    12,
}

func (x TcaplusDataType) Enum() *TcaplusDataType {
	p := new(TcaplusDataType)
	*p = x
	return p
}
func (x TcaplusDataType) String() string {
	return proto.EnumName(TcaplusDataType_name, int32(x))
}
func (x *TcaplusDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TcaplusDataType_value, data, "TcaplusDataType")
	if err != nil {
		return err
	}
	*x = TcaplusDataType(value)
	return nil
}
func (TcaplusDataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DataColumnFlag int32

const (
	DataColumnFlag_EN_DATA_COLUMN_FLAG_NORMAL      DataColumnFlag = 0
	DataColumnFlag_EN_DATA_COLUMN_FLAG_FOR_RSP_SET DataColumnFlag = 1
)

var DataColumnFlag_name = map[int32]string{
	0: "EN_DATA_COLUMN_FLAG_NORMAL",
	1: "EN_DATA_COLUMN_FLAG_FOR_RSP_SET",
}
var DataColumnFlag_value = map[string]int32{
	"EN_DATA_COLUMN_FLAG_NORMAL":      0,
	"EN_DATA_COLUMN_FLAG_FOR_RSP_SET": 1,
}

func (x DataColumnFlag) Enum() *DataColumnFlag {
	p := new(DataColumnFlag)
	*p = x
	return p
}
func (x DataColumnFlag) String() string {
	return proto.EnumName(DataColumnFlag_name, int32(x))
}
func (x *DataColumnFlag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataColumnFlag_value, data, "DataColumnFlag")
	if err != nil {
		return err
	}
	*x = DataColumnFlag(value)
	return nil
}
func (DataColumnFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type OperationType int32

const (
	OperationType_EN_OPERATION_TYPE_PLUS  OperationType = 1
	OperationType_EN_OPERATION_TYPE_MINUS OperationType = 2
)

var OperationType_name = map[int32]string{
	1: "EN_OPERATION_TYPE_PLUS",
	2: "EN_OPERATION_TYPE_MINUS",
}
var OperationType_value = map[string]int32{
	"EN_OPERATION_TYPE_PLUS":  1,
	"EN_OPERATION_TYPE_MINUS": 2,
}

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}
func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}
func (x *OperationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OperationType_value, data, "OperationType")
	if err != nil {
		return err
	}
	*x = OperationType(value)
	return nil
}
func (OperationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TcaplusAPIErr int32

const (
	TcaplusAPIErr_API_ERR_OVER_MAX_KEY_FIELD_NUM                                                 TcaplusAPIErr = -275
	TcaplusAPIErr_API_ERR_OVER_MAX_VALUE_FIELD_NUM                                               TcaplusAPIErr = -531
	TcaplusAPIErr_API_ERR_OVER_MAX_FIELD_NAME_LEN                                                TcaplusAPIErr = -787
	TcaplusAPIErr_API_ERR_OVER_MAX_FIELD_VALUE_LEN                                               TcaplusAPIErr = -1043
	TcaplusAPIErr_API_ERR_FIELD_NOT_EXSIST                                                       TcaplusAPIErr = -1299
	TcaplusAPIErr_API_ERR_FIELD_TYPE_NOT_MATCH                                                   TcaplusAPIErr = -1555
	TcaplusAPIErr_API_ERR_PARAMETER_INVALID                                                      TcaplusAPIErr = -1811
	TcaplusAPIErr_API_ERR_OPERATION_TYPE_NOT_MATCH                                               TcaplusAPIErr = -2067
	TcaplusAPIErr_API_ERR_PACK_MESSAGE                                                           TcaplusAPIErr = -2323
	TcaplusAPIErr_API_ERR_UNPACK_MESSAGE                                                         TcaplusAPIErr = -2579
	TcaplusAPIErr_API_ERR_PACKAGE_NOT_UNPACKED                                                   TcaplusAPIErr = -2835
	TcaplusAPIErr_API_ERR_OVER_MAX_RECORD_NUM                                                    TcaplusAPIErr = -3091
	TcaplusAPIErr_API_ERR_INVALID_COMMAND                                                        TcaplusAPIErr = -3347
	TcaplusAPIErr_API_ERR_NO_MORE_RECORD                                                         TcaplusAPIErr = -3603
	TcaplusAPIErr_API_ERR_OVER_KEY_FIELD_NUM                                                     TcaplusAPIErr = -3859
	TcaplusAPIErr_API_ERR_OVER_VALUE_FIELD_NUM                                                   TcaplusAPIErr = -4115
	TcaplusAPIErr_API_ERR_OBJ_NEED_INIT                                                          TcaplusAPIErr = -4371
	TcaplusAPIErr_API_ERR_INVALID_DATA_SIZE                                                      TcaplusAPIErr = -4627
	TcaplusAPIErr_API_ERR_INVALID_ARRAY_COUNT                                                    TcaplusAPIErr = -4883
	TcaplusAPIErr_API_ERR_INVALID_UNION_SELECT                                                   TcaplusAPIErr = -5139
	TcaplusAPIErr_API_ERR_MISS_PRIMARY_KEY                                                       TcaplusAPIErr = -5395
	TcaplusAPIErr_API_ERR_UNSUPPORT_FIELD_TYPE                                                   TcaplusAPIErr = -5651
	TcaplusAPIErr_API_ERR_ARRAY_BUFFER_IS_SMALL                                                  TcaplusAPIErr = -5907
	TcaplusAPIErr_API_ERR_IS_NOT_WHOLE_PACKAGE                                                   TcaplusAPIErr = -6163
	TcaplusAPIErr_API_ERR_MISS_PAIR_FIELD                                                        TcaplusAPIErr = -6419
	TcaplusAPIErr_API_ERR_GET_META_ENTRY                                                         TcaplusAPIErr = -6675
	TcaplusAPIErr_API_ERR_GET_ARRAY_META                                                         TcaplusAPIErr = -6931
	TcaplusAPIErr_API_ERR_GET_ENTRY_META                                                         TcaplusAPIErr = -7187
	TcaplusAPIErr_API_ERR_INCOMPATIBLE_META                                                      TcaplusAPIErr = -7443
	TcaplusAPIErr_API_ERR_PACK_ARRAY_DATA                                                        TcaplusAPIErr = -7699
	TcaplusAPIErr_API_ERR_PACK_UNION_DATA                                                        TcaplusAPIErr = -7955
	TcaplusAPIErr_API_ERR_PACK_STRUCT_DATA                                                       TcaplusAPIErr = -8211
	TcaplusAPIErr_API_ERR_UNPACK_ARRAY_DATA                                                      TcaplusAPIErr = -8467
	TcaplusAPIErr_API_ERR_UNPACK_UNION_DATA                                                      TcaplusAPIErr = -8723
	TcaplusAPIErr_API_ERR_UNPACK_STRUCT_DATA                                                     TcaplusAPIErr = -8979
	TcaplusAPIErr_API_ERR_INVALID_INDEX_NAME                                                     TcaplusAPIErr = -9235
	TcaplusAPIErr_API_ERR_MISS_PARTKEY_FIELD                                                     TcaplusAPIErr = -9491
	TcaplusAPIErr_API_ERR_ALLOCATE_MEMORY                                                        TcaplusAPIErr = -9747
	TcaplusAPIErr_API_ERR_GET_META_SIZE                                                          TcaplusAPIErr = -10003
	TcaplusAPIErr_API_ERR_MISS_BINARY_VERSION                                                    TcaplusAPIErr = -10259
	TcaplusAPIErr_API_ERR_INVALID_INCREASE_FIELD                                                 TcaplusAPIErr = -10515
	TcaplusAPIErr_API_ERR_INVALID_RESULT_FLAG                                                    TcaplusAPIErr = -10771
	TcaplusAPIErr_API_ERR_OVER_MAX_LIST_INDEX_NUM                                                TcaplusAPIErr = -11027
	TcaplusAPIErr_API_ERR_INVALID_OBJ_STATUE                                                     TcaplusAPIErr = -11283
	TcaplusAPIErr_API_ERR_INVALID_REQUEST                                                        TcaplusAPIErr = -11539
	TcaplusAPIErr_API_ERR_INVALID_SHARD_LIST                                                     TcaplusAPIErr = -11795
	TcaplusAPIErr_API_ERR_TABLE_NAME_MISSING                                                     TcaplusAPIErr = -12051
	TcaplusAPIErr_API_ERR_SOCKET_SEND_BUFF_IS_FULL                                               TcaplusAPIErr = -12307
	TcaplusAPIErr_API_ERR_INVALID_MAGIC                                                          TcaplusAPIErr = -12563
	TcaplusAPIErr_API_ERR_TABLE_IS_NOT_EXIST                                                     TcaplusAPIErr = -12819
	TcaplusAPIErr_API_ERR_SHORT_BUFF                                                             TcaplusAPIErr = -13075
	TcaplusAPIErr_API_ERR_FLOW_CONTROL                                                           TcaplusAPIErr = -13331
	TcaplusAPIErr_API_ERR_COMPRESS_SWITCH_NOT_SUPPORTED_REGARDING_THIS_CMD                       TcaplusAPIErr = -13587
	TcaplusAPIErr_API_ERR_FAILED_TO_FIND_ROUTE                                                   TcaplusAPIErr = -13843
	TcaplusAPIErr_API_ERR_OVER_MAX_PKG_SIZE                                                      TcaplusAPIErr = -14099
	TcaplusAPIErr_API_ERR_INVALID_VERSION_FOR_TLV                                                TcaplusAPIErr = -14355
	TcaplusAPIErr_API_ERR_BSON_SERIALIZE                                                         TcaplusAPIErr = -14611
	TcaplusAPIErr_API_ERR_BSON_DESERIALIZE                                                       TcaplusAPIErr = -14867
	TcaplusAPIErr_API_ERR_ADD_RECORD                                                             TcaplusAPIErr = -15123
	TcaplusAPIErr_API_ERR_ZONE_IS_NOT_EXIST                                                      TcaplusAPIErr = -15379
	TcaplusAPIErr_API_ERR_TRAVERSER_IS_NOT_EXIST                                                 TcaplusAPIErr = -15635
	TcaplusAPIErr_TXHDB_ERR_RECORD_NOT_EXIST                                                     TcaplusAPIErr = 261
	TcaplusAPIErr_TXHDB_ERR_ITERATION_NO_MORE_RECORDS                                            TcaplusAPIErr = 517
	TcaplusAPIErr_TXHDB_ERR_MUTEX_TRYLOCK_BUSY                                                   TcaplusAPIErr = 773
	TcaplusAPIErr_TXHDB_ERR_MUTEX_TIMEDLOCK_TIMEOUT                                              TcaplusAPIErr = 1029
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_TRYWRLOCK_BUSY                                                TcaplusAPIErr = 1285
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_TRYRDLOCK_BUSY                                                TcaplusAPIErr = 1541
	TcaplusAPIErr_TXHDB_ERR_SPIN_TRYLOCK_BUSY                                                    TcaplusAPIErr = 1797
	TcaplusAPIErr_TXHDB_ERR_ITERATION_EXCEED_MAX_ALLOWED_TIME_OF_ONE_ITER                        TcaplusAPIErr = 2053
	TcaplusAPIErr_TXHDB_ERR_INVALID_ARGUMENTS                                                    TcaplusAPIErr = -261
	TcaplusAPIErr_TXHDB_ERR_INVALID_MEMBER_VARIABLE_VALUE                                        TcaplusAPIErr = -517
	TcaplusAPIErr_TXHDB_ERR_ALREADY_OPEN                                                         TcaplusAPIErr = -773
	TcaplusAPIErr_TXHDB_ERR_MUTEX_LOCK_FAIL                                                      TcaplusAPIErr = -1029
	TcaplusAPIErr_TXHDB_ERR_MUTEX_TRYLOCK_FAIL                                                   TcaplusAPIErr = -1285
	TcaplusAPIErr_TXHDB_ERR_MUTEX_TIMEDLOCK_FAIL                                                 TcaplusAPIErr = -1541
	TcaplusAPIErr_TXHDB_ERR_MUTEX_UNLOCK_FAIL                                                    TcaplusAPIErr = -1797
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_WRLOCK_FAIL                                                   TcaplusAPIErr = -2053
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_TRYWRLOCK_FAIL                                                TcaplusAPIErr = -2309
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_RDLOCK_FAIL                                                   TcaplusAPIErr = -2565
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_TRYRDLOCK_FAIL                                                TcaplusAPIErr = -2821
	TcaplusAPIErr_TXHDB_ERR_RWLOCK_UNLOCK_FAIL                                                   TcaplusAPIErr = -3077
	TcaplusAPIErr_TXHDB_ERR_SPIN_LOCK_FAIL                                                       TcaplusAPIErr = -3333
	TcaplusAPIErr_TXHDB_ERR_SPIN_UNLOCK_FAIL                                                     TcaplusAPIErr = -3589
	TcaplusAPIErr_TXHDB_ERR_FILE_EXISTS_BUT_STATUS_ERROR                                         TcaplusAPIErr = -3845
	TcaplusAPIErr_TXHDB_ERR_FILE_OPEN_FAIL                                                       TcaplusAPIErr = -4101
	TcaplusAPIErr_TXHDB_ERR_FILE_READ_SIZE_INVALID                                               TcaplusAPIErr = -4357
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_FILE_PATH                                               TcaplusAPIErr = -4613
	TcaplusAPIErr_TXHDB_ERR_FILE_LOCK_FILE_FAIL                                                  TcaplusAPIErr = -4869
	TcaplusAPIErr_TXHDB_ERR_FILE_NOT_A_REGULAR_FILE                                              TcaplusAPIErr = -5125
	TcaplusAPIErr_TXHDB_ERR_FILE_MMAP_FAIL                                                       TcaplusAPIErr = -5381
	TcaplusAPIErr_TXHDB_ERR_FILE_MUNMAP_FAIL                                                     TcaplusAPIErr = -5637
	TcaplusAPIErr_TXHDB_ERR_FILE_CLOSE_FAIL                                                      TcaplusAPIErr = -5893
	TcaplusAPIErr_TXHDB_ERR_FILE_SPACE_NOT_ENOUGH_IN_HEAD                                        TcaplusAPIErr = -6149
	TcaplusAPIErr_TXHDB_ERR_FILE_FTRUNCATE_FAIL                                                  TcaplusAPIErr = -6405
	TcaplusAPIErr_TXHDB_ERR_FILE_INCONSISTANT_FILE_SIZE                                          TcaplusAPIErr = -6661
	TcaplusAPIErr_TXHDB_ERR_FILE_MSIZ_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET                         TcaplusAPIErr = -6917
	TcaplusAPIErr_TXHDB_ERR_FILE_MSIZ_CHANGE_NOT_PERMIT                                          TcaplusAPIErr = -7173
	TcaplusAPIErr_TXHDB_ERR_FILE_FSTAT_FAIL                                                      TcaplusAPIErr = -7429
	TcaplusAPIErr_TXHDB_ERR_FILE_MSYNC_FAIL                                                      TcaplusAPIErr = -7685
	TcaplusAPIErr_TXHDB_ERR_FILE_FSYNC_FAIL                                                      TcaplusAPIErr = -7941
	TcaplusAPIErr_TXHDB_ERR_FILE_FCNTL_LOCK_FILE_FAIL                                            TcaplusAPIErr = -8197
	TcaplusAPIErr_TXHDB_ERR_FILE_FCNTL_UNLOCK_FILE_FAIL                                          TcaplusAPIErr = -8453
	TcaplusAPIErr_TXHDB_ERR_FILE_PREAD_FAIL_WITH_SPECIFIED_ERRNO                                 TcaplusAPIErr = -8709
	TcaplusAPIErr_TXHDB_ERR_FILE_PREAD_FAIL_WITH_UNSPECIFIED_ERRNO                               TcaplusAPIErr = -8965
	TcaplusAPIErr_TXHDB_ERR_FILE_PWRITE_FAIL_WITH_SPECIFIED_ERRNO                                TcaplusAPIErr = -9221
	TcaplusAPIErr_TXHDB_ERR_FILE_PWRITE_FAIL_WITH_UNSPECIFIED_ERRNO                              TcaplusAPIErr = -9477
	TcaplusAPIErr_TXHDB_ERR_FILE_READ_EXCEED_FILE_BOUNDARY                                       TcaplusAPIErr = -9733
	TcaplusAPIErr_TXHDB_ERR_FILE_READ_FAIL_DURING_COPY                                           TcaplusAPIErr = -9989
	TcaplusAPIErr_TXHDB_ERR_FILE_WRITE_FAIL_DURING_COPY                                          TcaplusAPIErr = -10245
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_FREE_BLOCK_POOL_METADATA                                TcaplusAPIErr = -10501
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_MAGIC                                                   TcaplusAPIErr = -10757
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_LIBRARY_VERSION                                         TcaplusAPIErr = -11013
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_LIBRARY_REVISION                                        TcaplusAPIErr = -11269
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_FORMAT_VERSION                                          TcaplusAPIErr = -11525
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_EXTDATA_FORMAT_VERSION                                  TcaplusAPIErr = -11781
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_DBTYPE                                                  TcaplusAPIErr = -12037
	TcaplusAPIErr_TXHDB_ERR_FILE_HEAD_CRC_UNMATCH                                                TcaplusAPIErr = -12293
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_METADATA                                                TcaplusAPIErr = -12549
	TcaplusAPIErr_TXHDB_ERR_FILE_INVALID_HEADLEN                                                 TcaplusAPIErr = -12805
	TcaplusAPIErr_TXHDB_ERR_FILE_DESERIAL_HEAD_SPACE_NOT_ENOUGH                                  TcaplusAPIErr = -13061
	TcaplusAPIErr_TXHDB_ERR_FILE_SERIAL_HEAD_SPACE_NOT_ENOUGH                                    TcaplusAPIErr = -13317
	TcaplusAPIErr_TXHDB_ERR_FILE_DESERIAL_STAT_SPACE_NOT_ENOUGH                                  TcaplusAPIErr = -13573
	TcaplusAPIErr_TXHDB_ERR_FILE_SERIAL_STAT_SPACE_NOT_ENOUGH                                    TcaplusAPIErr = -13829
	TcaplusAPIErr_TXHDB_ERR_FILE_SERIAL_FREE_BLOCK_LIST_INFO_WRONG_BUFFLEN                       TcaplusAPIErr = -14085
	TcaplusAPIErr_TXHDB_ERR_FILE_IN_EXCEPTIONAL_STATUS                                           TcaplusAPIErr = -14341
	TcaplusAPIErr_TXHDB_ERR_DB_NOT_OPENED                                                        TcaplusAPIErr = -14597
	TcaplusAPIErr_TXHDB_ERR_DB_WRITE_NOT_PERMIT                                                  TcaplusAPIErr = -14853
	TcaplusAPIErr_TXHDB_ERR_INVALID_OFFSET_FROM_BUCKET                                           TcaplusAPIErr = -15109
	TcaplusAPIErr_TXHDB_ERR_READ_EXTDATA_EXCEED_BUFF_LENGTH                                      TcaplusAPIErr = -15365
	TcaplusAPIErr_TXHDB_ERR_WRITE_EXTDATA_EXCEED_BUFF_LENGTH                                     TcaplusAPIErr = -15621
	TcaplusAPIErr_TXHDB_ERR_FREE_BLOCK_IS_READ_WHEN_GETTING_RECORD                               TcaplusAPIErr = -15877
	TcaplusAPIErr_TXHDB_ERR_INVALID_KEY_DATABLOCK_NUM                                            TcaplusAPIErr = -16133
	TcaplusAPIErr_TXHDB_ERR_INVALID_VALUE_DATABLOCK_NUM                                          TcaplusAPIErr = -16389
	TcaplusAPIErr_TXHDB_ERR_GET_RECORD_EXCEED_BUFF_LENGTH                                        TcaplusAPIErr = -16645
	TcaplusAPIErr_TXHDB_ERR_COMPRESSION_FAIL                                                     TcaplusAPIErr = -16901
	TcaplusAPIErr_TXHDB_ERR_DECOMPRESSION_FAIL                                                   TcaplusAPIErr = -17157
	TcaplusAPIErr_TXHDB_ERR_INVALID_OFFSETINEXTDATA_AND_SIZE_WHEN_UPDATING_EXTDATA               TcaplusAPIErr = -17413
	TcaplusAPIErr_TXHDB_ERR_UNEXPECTED_FREEBLOCK                                                 TcaplusAPIErr = -17669
	TcaplusAPIErr_TXHDB_ERR_VALUE_APOW_LESSER_THAN_KEY_APOW                                      TcaplusAPIErr = -17925
	TcaplusAPIErr_TXHDB_ERR_DUPLICATED_FILE_PATH                                                 TcaplusAPIErr = -18181
	TcaplusAPIErr_TXHDB_ERR_INVALID_KEY_HEAD_SIZE_IN_TXHDB_META                                  TcaplusAPIErr = -18437
	TcaplusAPIErr_TXHDB_ERR_INVALID_FILE_SIZE                                                    TcaplusAPIErr = -18693
	TcaplusAPIErr_TXHDB_ERR_INVALID_FREE_BLOCK_SIZE                                              TcaplusAPIErr = -18949
	TcaplusAPIErr_TXHDB_ERR_MMAP_MEMSIZE_CHANGE_NOT_PERMITTED                                    TcaplusAPIErr = -19205
	TcaplusAPIErr_TXHDB_ERR_NEW_FILE_OBJ_FAIL                                                    TcaplusAPIErr = -19461
	TcaplusAPIErr_TXHDB_ERR_RECORD_KEY_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET                 TcaplusAPIErr = -19717
	TcaplusAPIErr_TXHDB_ERR_RECORD_VALUE_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET               TcaplusAPIErr = -19973
	TcaplusAPIErr_TXHDB_ERR_RECORD_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET                     TcaplusAPIErr = -20229
	TcaplusAPIErr_TXHDB_ERR_KEY_BUFFSIZE_LESSER_THAN_KEY_HEADSIZE                                TcaplusAPIErr = -20485
	TcaplusAPIErr_TXHDB_ERR_VALUE_BUFFSIZE_LESSER_THAN_VALUE_HEADSIZE                            TcaplusAPIErr = -20741
	TcaplusAPIErr_TXHDB_ERR_RECORD_SIZE_LESSER_THAN_KEY_HEADSIZE                                 TcaplusAPIErr = -20997
	TcaplusAPIErr_TXHDB_ERR_INVALID_BLOCK_MAGIC                                                  TcaplusAPIErr = -21253
	TcaplusAPIErr_TXHDB_ERR_INVALID_FREE_BLOCK_MAGIC                                             TcaplusAPIErr = -21509
	TcaplusAPIErr_TXHDB_ERR_INVALID_KEYMAGIC                                                     TcaplusAPIErr = -21765
	TcaplusAPIErr_TXHDB_ERR_INVALID_KEYSPLMAGIC                                                  TcaplusAPIErr = -22021
	TcaplusAPIErr_TXHDB_ERR_INVALID_VALMAGIC                                                     TcaplusAPIErr = -22277
	TcaplusAPIErr_TXHDB_ERR_INVALID_VALSPLMAGIC                                                  TcaplusAPIErr = -22533
	TcaplusAPIErr_TXHDB_ERR_UNSUPPORTED_KEY_FORMAT_VERSION                                       TcaplusAPIErr = -22789
	TcaplusAPIErr_TXHDB_ERR_UNSUPPORTED_KEY_SPLBLOCK_FORMAT_VERSION                              TcaplusAPIErr = -23045
	TcaplusAPIErr_TXHDB_ERR_UNSUPPORTED_VALUE_FORMAT_VERSION                                     TcaplusAPIErr = -23301
	TcaplusAPIErr_TXHDB_ERR_UNSUPPORTED_VALUE_SPLBLOCK_FORMAT_VERSION                            TcaplusAPIErr = -23557
	TcaplusAPIErr_TXHDB_ERR_UNSUPPORTED_FREE_BLOCK_FORMAT_VERSION                                TcaplusAPIErr = -23813
	TcaplusAPIErr_TXHDB_ERR_KEY_HEAD_CRC_UNMATCH                                                 TcaplusAPIErr = -24069
	TcaplusAPIErr_TXHDB_ERR_KEY_SPLBLOCK_HEAD_CRC_UNMATCH                                        TcaplusAPIErr = -24325
	TcaplusAPIErr_TXHDB_ERR_VALUE_HEAD_CRC_UNMATCH                                               TcaplusAPIErr = -24581
	TcaplusAPIErr_TXHDB_ERR_VALUE_SPLBLOCK_HEAD_CRC_UNMATCH                                      TcaplusAPIErr = -24837
	TcaplusAPIErr_TXHDB_ERR_FREE_BLOCK_HEAD_CRC_UNMATCH                                          TcaplusAPIErr = -25093
	TcaplusAPIErr_TXHDB_ERR_FREE_BLOCK_LIST_INFO_CRC_UNMATCH                                     TcaplusAPIErr = -25349
	TcaplusAPIErr_TXHDB_ERR_GET_KEY_READ_BUFFER_FAIL                                             TcaplusAPIErr = -25605
	TcaplusAPIErr_TXHDB_ERR_GET_VALUE_READ_BUFFER_FAIL                                           TcaplusAPIErr = -25861
	TcaplusAPIErr_TXHDB_ERR_GET_LRU_VALUE_BUFFER_FAIL                                            TcaplusAPIErr = -26117
	TcaplusAPIErr_TXHDB_ERR_GET_EXTDATA_READ_BUFFER_FAIL                                         TcaplusAPIErr = -26373
	TcaplusAPIErr_TXHDB_ERR_KEY_BLOCK_BODYSIZE_GREATER_THAN_KEY_BODYSIZE                         TcaplusAPIErr = -26629
	TcaplusAPIErr_TXHDB_ERR_VALUE_BLOCK_BODYSIZE_GREATER_THAN_VALUE_BODYSIZE                     TcaplusAPIErr = -26885
	TcaplusAPIErr_TXHDB_ERR_NULL_RECORD_POINTER                                                  TcaplusAPIErr = -27141
	TcaplusAPIErr_TXHDB_ERR_NULL_RECORD_WRITE_BUFF                                               TcaplusAPIErr = -27397
	TcaplusAPIErr_TXHDB_ERR_SERIALIZE_RECORD_KEY_HEAD                                            TcaplusAPIErr = -27653
	TcaplusAPIErr_TXHDB_ERR_INVALID_IDX_IN_STAT_NUMS_ARRAY                                       TcaplusAPIErr = -27909
	TcaplusAPIErr_TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_KEYNUMS                                      TcaplusAPIErr = -28165
	TcaplusAPIErr_TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_VALNUMS                                      TcaplusAPIErr = -28421
	TcaplusAPIErr_TXHDB_ERR_PRINT_SPACE_NOT_ENOUGH                                               TcaplusAPIErr = -28677
	TcaplusAPIErr_TXHDB_ERR_LRU_SHIFTIN_NOT_ENOUGH_MEMORY                                        TcaplusAPIErr = -28933
	TcaplusAPIErr_TXHDB_ERR_LRU_SHIFTIN_NO_MORE_LRU_NODE                                         TcaplusAPIErr = -29189
	TcaplusAPIErr_TXHDB_ERR_LRU_ADJUST_NO_MORE_LRU_NODE                                          TcaplusAPIErr = -29445
	TcaplusAPIErr_TXHDB_ERR_LRU_SHIFTOUT_RECORD_ALREADY_OUTSIDE_OF_MEMORY                        TcaplusAPIErr = -29701
	TcaplusAPIErr_TXHDB_ERR_FILE_EXTDATA_LENGTH_CRC_UNMATCH                                      TcaplusAPIErr = -29957
	TcaplusAPIErr_TXHDB_ERR_FILE_EXTDATA_INVALID_LENGTH                                          TcaplusAPIErr = -30213
	TcaplusAPIErr_TXHDB_ERR_INVALID_VALUE_HEAD_SIZE_IN_TXHDB_META                                TcaplusAPIErr = -30469
	TcaplusAPIErr_TXHDB_ERR_INVALID_SPLITDATABLOCK_HEAD_SIZE_IN_TXHDB_META                       TcaplusAPIErr = -30725
	TcaplusAPIErr_TXHDB_ERR_KEY_BUCKETIDX_UNMATCH                                                TcaplusAPIErr = -30981
	TcaplusAPIErr_TXHDB_ERR_FILE_WRITE_SIZE_INVALID                                              TcaplusAPIErr = -31237
	TcaplusAPIErr_TXHDB_ERR_MODIFY_STAT_UNSUPPORTED_OPERATION_TYPE                               TcaplusAPIErr = -31493
	TcaplusAPIErr_TXHDB_ERR_INVALID_EXTDATAMAGIC                                                 TcaplusAPIErr = -31749
	TcaplusAPIErr_TXHDB_ERR_INVALID_INTERNAL_LIST_TAIL_DURING_POP_LRU_NODELIST                   TcaplusAPIErr = -32005
	TcaplusAPIErr_TXHDB_ERR_GET_LRUNODE_FAIL                                                     TcaplusAPIErr = -32261
	TcaplusAPIErr_TXHDB_ERR_LRUNODE_INVALID_FLAG                                                 TcaplusAPIErr = -32517
	TcaplusAPIErr_TXHDB_ERR_INVALID_FREE_BLOCK_NUM_TOO_MANY_FREE_BLOCKS                          TcaplusAPIErr = -32773
	TcaplusAPIErr_TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_NOPADDING_SIZE_KEYNUMS                       TcaplusAPIErr = -33029
	TcaplusAPIErr_TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_NOPADDING_SIZE_VALNUMS                       TcaplusAPIErr = -33285
	TcaplusAPIErr_TXHDB_ERR_ADD_LSIZE_EXCEEDS_MAX_TSD_VALUE_BUFF_SIZE                            TcaplusAPIErr = -33541
	TcaplusAPIErr_TXHDB_ERR_INTERNAL_CONSTANTS_ILLEGAL                                           TcaplusAPIErr = -33797
	TcaplusAPIErr_TXHDB_ERR_TOO_BIG_KEY_BIZ_SIZE                                                 TcaplusAPIErr = -34053
	TcaplusAPIErr_TXHDB_ERR_TOO_BIG_VALUE_BIZ_SIZE                                               TcaplusAPIErr = -34309
	TcaplusAPIErr_TXHDB_ERR_INDEX_NO_EXIST                                                       TcaplusAPIErr = -34565
	TcaplusAPIErr_TXHDB_ERR_INVALID_FREE_BLOCK_BASESIZE                                          TcaplusAPIErr = -34821
	TcaplusAPIErr_TXHDB_ERR_CANNOT_CREATE_MMAPSHM_BECAUSE_SHM_ALREADY_EXISTED                    TcaplusAPIErr = -35077
	TcaplusAPIErr_TXHDB_ERR_INVALID_GENSHM_KEY                                                   TcaplusAPIErr = -35333
	TcaplusAPIErr_TXHDB_ERR_GENSHM_GET_FAIL                                                      TcaplusAPIErr = -35589
	TcaplusAPIErr_TXHDB_ERR_GENSHM_CREATE_FAIL                                                   TcaplusAPIErr = -35845
	TcaplusAPIErr_TXHDB_ERR_GENSHM_STAT_FAIL                                                     TcaplusAPIErr = -36101
	TcaplusAPIErr_TXHDB_ERR_GENSHM_DOES_NOT_EXIST                                                TcaplusAPIErr = -36357
	TcaplusAPIErr_TXHDB_ERR_GENSHM_ATTACH_FAIL_BECAUSE_IT_IS_ALREADY_ATTACHED_BY_OTHER_PROCESSES TcaplusAPIErr = -36613
	TcaplusAPIErr_TXHDB_ERR_GENSHM_ATTACH_FAIL                                                   TcaplusAPIErr = -36869
	TcaplusAPIErr_TXHDB_ERR_FILE_INCONSISTANT_MSIZE                                              TcaplusAPIErr = -37125
	TcaplusAPIErr_TXHDB_ERR_INVALID_TCAP_GENSHM_MAGIC                                            TcaplusAPIErr = -37381
	TcaplusAPIErr_TXHDB_ERR_GENSHM_FIXED_HEAD_BUFFLEN_UNMATCH                                    TcaplusAPIErr = -37637
	TcaplusAPIErr_TXHDB_ERR_GENSHM_INVALID_HEADLEN                                               TcaplusAPIErr = -37893
	TcaplusAPIErr_TXHDB_ERR_GENSHM_HEAD_CRC_UNMATCH                                              TcaplusAPIErr = -38149
	TcaplusAPIErr_TXHDB_ERR_GENSHM_HEAD_INVALID_VERSION                                          TcaplusAPIErr = -38405
	TcaplusAPIErr_TXHDB_ERR_GENSHM_INVALID_FILETYPE                                              TcaplusAPIErr = -38661
	TcaplusAPIErr_TXHDB_ERR_GET_IPV4ADDR_FAIL                                                    TcaplusAPIErr = -38917
	TcaplusAPIErr_TXHDB_ERR_NO_VALID_IPV4ADDR_EXISTS                                             TcaplusAPIErr = -39173
	TcaplusAPIErr_TXHDB_ERR_TRANSFER_IPV4ADDR_FAIL                                               TcaplusAPIErr = -39429
	TcaplusAPIErr_TXHDB_ERR_FILE_EXCEEDS_LSIZE_LIMIT                                             TcaplusAPIErr = -39685
	TcaplusAPIErr_TXHDB_ERR_GENSHM_DETACH_FAIL                                                   TcaplusAPIErr = -39941
	TcaplusAPIErr_TXHDB_ERR_TXHDB_HEAD_PARAMETERS_ERROR                                          TcaplusAPIErr = -40197
	TcaplusAPIErr_TXHDB_ERR_TXHDB_HEAD_OLD_VERSION                                               TcaplusAPIErr = -40453
	TcaplusAPIErr_TXHDB_ERR_TXHDB_SHM_COREINFO_UNMATCH                                           TcaplusAPIErr = -40709
	TcaplusAPIErr_TXHDB_ERR_TXHDB_SHM_EXTDATA_UNMATCH                                            TcaplusAPIErr = -40965
	TcaplusAPIErr_TXHDB_ERR_TXHDB_EXTDATA_CHECK_ERROR                                            TcaplusAPIErr = -41221
	TcaplusAPIErr_TXHDB_ERR_CHUNK_BUFFS_CANNOT_BE_ALLOCED_IF_THEY_ARE_NOT_RELEASED               TcaplusAPIErr = -41477
	TcaplusAPIErr_TXHDB_ERR_ALLOCATE_MEMORY_FAIL                                                 TcaplusAPIErr = -41733
	TcaplusAPIErr_TXHDB_ERR_INVALID_CHUNK_RW_MANNER                                              TcaplusAPIErr = -41989
	TcaplusAPIErr_TXHDB_ERR_FILE_PREAD_NOT_COMPLETE                                              TcaplusAPIErr = -42245
	TcaplusAPIErr_TXHDB_ERR_FILE_PWRITE_NOT_COMPLETE                                             TcaplusAPIErr = -42501
	TcaplusAPIErr_TXHDB_ERR_KEY_ONEBLOCK_BUT_NEXT_NOTNULL                                        TcaplusAPIErr = -42757
	TcaplusAPIErr_TXHDB_ERR_VALUE_ONEBLOCK_BUT_NEXT_NOTNULL                                      TcaplusAPIErr = -43013
	TcaplusAPIErr_TXHDB_ERR_VARINT_FORMAT_ERROR                                                  TcaplusAPIErr = -43269
	TcaplusAPIErr_TXHDB_ERR_TXSTAT_ERROR                                                         TcaplusAPIErr = -43525
	TcaplusAPIErr_SVR_ERR_FAIL_ROUTE                                                             TcaplusAPIErr = -269
	TcaplusAPIErr_SVR_ERR_FAIL_TIMEOUT                                                           TcaplusAPIErr = -525
	TcaplusAPIErr_SVR_ERR_FAIL_SHORT_BUFF                                                        TcaplusAPIErr = -781
	TcaplusAPIErr_SVR_ERR_FAIL_SYSTEM_BUSY                                                       TcaplusAPIErr = -1037
	TcaplusAPIErr_SVR_ERR_FAIL_RECORD_EXIST                                                      TcaplusAPIErr = -1293
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_FIELD_NAME                                                TcaplusAPIErr = -1549
	TcaplusAPIErr_SVR_ERR_FAIL_VALUE_OVER_MAX_LEN                                                TcaplusAPIErr = -1805
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_FIELD_TYPE                                                TcaplusAPIErr = -2061
	TcaplusAPIErr_SVR_ERR_FAIL_SYNC_WRITE                                                        TcaplusAPIErr = -2317
	TcaplusAPIErr_SVR_ERR_FAIL_WRITE_RECORD                                                      TcaplusAPIErr = -2573
	TcaplusAPIErr_SVR_ERR_FAIL_DELETE_RECORD                                                     TcaplusAPIErr = -2829
	TcaplusAPIErr_SVR_ERR_FAIL_DATA_ENGINE                                                       TcaplusAPIErr = -3085
	TcaplusAPIErr_SVR_ERR_FAIL_RESULT_OVERFLOW                                                   TcaplusAPIErr = -3341
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_OPERATION                                                 TcaplusAPIErr = -3597
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_SUBSCRIPT                                                 TcaplusAPIErr = -3853
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_INDEX                                                     TcaplusAPIErr = -4109
	TcaplusAPIErr_SVR_ERR_FAIL_OVER_MAXE_FIELD_NUM                                               TcaplusAPIErr = -4365
	TcaplusAPIErr_SVR_ERR_FAIL_MISS_KEY_FIELD                                                    TcaplusAPIErr = -4621
	TcaplusAPIErr_SVR_ERR_FAIL_NEED_SIGNUP                                                       TcaplusAPIErr = -4877
	TcaplusAPIErr_SVR_ERR_FAIL_CROSS_AUTH                                                        TcaplusAPIErr = -5133
	TcaplusAPIErr_SVR_ERR_FAIL_SIGNUP_FAIL                                                       TcaplusAPIErr = -5389
	TcaplusAPIErr_SVR_ERR_FAIL_SIGNUP_INVALID                                                    TcaplusAPIErr = -5645
	TcaplusAPIErr_SVR_ERR_FAIL_SIGNUP_INIT                                                       TcaplusAPIErr = -5901
	TcaplusAPIErr_SVR_ERR_FAIL_LIST_FULL                                                         TcaplusAPIErr = -6157
	TcaplusAPIErr_SVR_ERR_FAIL_LOW_VERSION                                                       TcaplusAPIErr = -6413
	TcaplusAPIErr_SVR_ERR_FAIL_HIGH_VERSION                                                      TcaplusAPIErr = -6669
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_RESULT_FLAG                                               TcaplusAPIErr = -6925
	TcaplusAPIErr_SVR_ERR_FAIL_PROXY_STOPPING                                                    TcaplusAPIErr = -7181
	TcaplusAPIErr_SVR_ERR_FAIL_SVR_READONLY                                                      TcaplusAPIErr = -7437
	TcaplusAPIErr_SVR_ERR_FAIL_SVR_READONLY_BECAUSE_IN_SLAVE_MODE                                TcaplusAPIErr = -7693
	TcaplusAPIErr_SVR_ERR_FAIL_INVALID_VERSION                                                   TcaplusAPIErr = -7949
	TcaplusAPIErr_SVR_ERR_FAIL_SYSTEM_ERROR                                                      TcaplusAPIErr = -8205
	TcaplusAPIErr_SVR_ERR_FAIL_OVERLOAD                                                          TcaplusAPIErr = -8461
	TcaplusAPIErr_SVR_ERR_FAIL_NOT_ENOUGH_DADADISK_SPACE                                         TcaplusAPIErr = -8717
	TcaplusAPIErr_SVR_ERR_FAIL_NOT_ENOUGH_ULOGDISK_SPACE                                         TcaplusAPIErr = -8973
	TcaplusAPIErr_SVR_ERR_FAIL_UNSUPPORTED_PROTOCOL_MAGIC                                        TcaplusAPIErr = -9229
	TcaplusAPIErr_SVR_ERR_FAIL_UNSUPPORTED_PROTOCOL_CMD                                          TcaplusAPIErr = -9485
	TcaplusAPIErr_SVR_ERR_FAIL_HIGH_TABLE_META_VERSION                                           TcaplusAPIErr = -9741
	TcaplusAPIErr_SVR_ERR_FAIL_MERGE_VALUE_FIELD                                                 TcaplusAPIErr = -9997
	TcaplusAPIErr_SVR_ERR_FAIL_CUT_VALUE_FIELD                                                   TcaplusAPIErr = -10253
	TcaplusAPIErr_SVR_ERR_FAIL_PACK_FIELD                                                        TcaplusAPIErr = -10509
	TcaplusAPIErr_SVR_ERR_FAIL_UNPACK_FIELD                                                      TcaplusAPIErr = -10765
	TcaplusAPIErr_SVR_ERR_FAIL_LOW_API_VERSION                                                   TcaplusAPIErr = -11021
	TcaplusAPIErr_SVR_ERR_COMMAND_AND_TABLE_TYPE_IS_MISMATCH                                     TcaplusAPIErr = -11277
	TcaplusAPIErr_SVR_ERR_FAIL_TO_FIND_CACHE                                                     TcaplusAPIErr = -11533
	TcaplusAPIErr_SVR_ERR_FAIL_TO_FIND_META                                                      TcaplusAPIErr = -11789
	TcaplusAPIErr_SVR_ERR_FAIL_TO_GET_CURSOR                                                     TcaplusAPIErr = -12045
	TcaplusAPIErr_SVR_ERR_FAIL_OUT_OF_USER_DEF_RANGE                                             TcaplusAPIErr = -12301
	TcaplusAPIErr_SVR_ERR_INVALID_ARGUMENTS                                                      TcaplusAPIErr = -12557
	TcaplusAPIErr_SVR_ERR_SLAVE_READ_INVALID                                                     TcaplusAPIErr = -12813
	TcaplusAPIErr_SVR_ERR_NULL_CACHE                                                             TcaplusAPIErr = -13069
	TcaplusAPIErr_SVR_ERR_NULL_CURSOR                                                            TcaplusAPIErr = -13325
	TcaplusAPIErr_SVR_ERR_METALIB_VERSION_LESS_THAN_ENTRY_VERSION                                TcaplusAPIErr = -13581
	TcaplusAPIErr_SVR_ERR_INVALID_SELECT_ID_FOR_UNION                                            TcaplusAPIErr = -13837
	TcaplusAPIErr_SVR_ERR_CAN_NOT_FIND_SELECT_ENTRY_FOR_UNION                                    TcaplusAPIErr = -14093
	TcaplusAPIErr_SVR_ERR_FAIL_DOCUMENT_PACK_VERSION                                             TcaplusAPIErr = -14349
	TcaplusAPIErr_SVR_ERR_TCAPSVR_PROCESS_NOT_NORMAL                                             TcaplusAPIErr = -14605
	TcaplusAPIErr_SVR_ERR_TBUSD_PROCESS_NOT_NORMAL                                               TcaplusAPIErr = -14861
	TcaplusAPIErr_SVR_ERR_INVALID_ARRAY_COUNT                                                    TcaplusAPIErr = -15117
	TcaplusAPIErr_SVR_ERR_REJECT_REQUEST_BECAUSE_ROUTE_IN_REJECT_STATUS                          TcaplusAPIErr = -15373
	TcaplusAPIErr_SVR_ERR_FAIL_GET_ROUTE_HASH_CODE                                               TcaplusAPIErr = -15629
	TcaplusAPIErr_TCAPDB_ERR_INVALID_PARAMS                                                      TcaplusAPIErr = -271
	TcaplusAPIErr_PROXY_ERR_INVALID_PARAMS                                                       TcaplusAPIErr = -273
	TcaplusAPIErr_PROXY_ERR_NO_NEED_ROUTE_BATCHGET_ACTION_MSG_WHEN_NODE_IS_IN_SYNC_STATUS        TcaplusAPIErr = -529
	TcaplusAPIErr_PROXY_ERR_NO_NEED_ROUTE_WHEN_NODE_IS_IN_REJECT_STATUS                          TcaplusAPIErr = -785
	TcaplusAPIErr_PROXY_ERR_PROBE_TIMEOUT                                                        TcaplusAPIErr = -1041
	TcaplusAPIErr_PROXY_ERR_SYSTEM_ERROR                                                         TcaplusAPIErr = -1297
	TcaplusAPIErr_PROXY_ERR_CONFIG_ERROR                                                         TcaplusAPIErr = -1553
	TcaplusAPIErr_PROXY_ERR_OVER_MAX_NODE                                                        TcaplusAPIErr = -1809
	TcaplusAPIErr_PROXY_ERR_INVALID_SPLIT_SIZE                                                   TcaplusAPIErr = -2065
	TcaplusAPIErr_PROXY_ERR_INVALID_ROUTE_INDEX                                                  TcaplusAPIErr = -2321
	TcaplusAPIErr_PROXY_ERR_CONNECT_SERVER                                                       TcaplusAPIErr = -2577
	TcaplusAPIErr_PROXY_ERR_COMPOSE_MSG                                                          TcaplusAPIErr = -2833
	TcaplusAPIErr_PROXY_ERR_ROUTE_MSG                                                            TcaplusAPIErr = -3089
	TcaplusAPIErr_PROXY_ERR_SHORT_BUFFER                                                         TcaplusAPIErr = -3345
	TcaplusAPIErr_PROXY_ERR_OVER_MAX_RECORD                                                      TcaplusAPIErr = -3601
	TcaplusAPIErr_PROXY_ERR_INVALID_SERVICE_TABLE                                                TcaplusAPIErr = -3857
	TcaplusAPIErr_PROXY_ERR_REGISTER_FAILED                                                      TcaplusAPIErr = -4113
	TcaplusAPIErr_PROXY_ERR_CREATE_SESSION_HASH                                                  TcaplusAPIErr = -4369
	TcaplusAPIErr_PROXY_ERR_WRONG_STATUS                                                         TcaplusAPIErr = -4625
	TcaplusAPIErr_PROXY_ERR_UNPACK_MSG                                                           TcaplusAPIErr = -4881
	TcaplusAPIErr_PROXY_ERR_PACK_MSG                                                             TcaplusAPIErr = -5137
	TcaplusAPIErr_PROXY_ERR_SEND_MSG                                                             TcaplusAPIErr = -5393
	TcaplusAPIErr_PROXY_ERR_ALLOCATE_MEMORY                                                      TcaplusAPIErr = -5649
	TcaplusAPIErr_PROXY_ERR_PARSE_MSG                                                            TcaplusAPIErr = -5905
	TcaplusAPIErr_PROXY_ERR_INVALID_MSG                                                          TcaplusAPIErr = -6161
	TcaplusAPIErr_PROXY_ERR_FAILED_PROC_REQUEST_BECAUSE_NODE_IS_IN_SYNC_STASUS                   TcaplusAPIErr = -6417
	TcaplusAPIErr_PROXY_ERR_KEY_FIELD_NUM_IS_ZERO                                                TcaplusAPIErr = -6673
	TcaplusAPIErr_PROXY_ERR_LACK_OF_SOME_KEY_FIELDS                                              TcaplusAPIErr = -6929
	TcaplusAPIErr_PROXY_ERR_FAILED_TO_FIND_NODE                                                  TcaplusAPIErr = -7185
	TcaplusAPIErr_PROXY_ERR_INVALID_COMPRESS_TYPE                                                TcaplusAPIErr = -7441
	TcaplusAPIErr_PROXY_ERR_REQUEST_OVERSPEED                                                    TcaplusAPIErr = -7697
	TcaplusAPIErr_PROXY_ERR_SWIFT_TIMEOUT                                                        TcaplusAPIErr = -7953
	TcaplusAPIErr_PROXY_ERR_SWIFT_ERROR                                                          TcaplusAPIErr = -8209
	TcaplusAPIErr_PROXY_ERR_DIRECT_RESPONSE                                                      TcaplusAPIErr = -8465
	TcaplusAPIErr_PROXY_ERR_INIT_TLOG                                                            TcaplusAPIErr = -8721
	TcaplusAPIErr_PROXY_ERR_ASSISTANT_THREAD_NOT_RUN                                             TcaplusAPIErr = -8977
	TcaplusAPIErr_CENTER_ERR_INVALID_PARAMS                                                      TcaplusAPIErr = -277
	TcaplusAPIErr_CENTER_ERR_TABLE_ALREADY_EXIST                                                 TcaplusAPIErr = -533
	TcaplusAPIErr_CENTER_ERR_TABLE_NOT_EXIST                                                     TcaplusAPIErr = -789
	TcaplusAPIErr_DIR_ERR_SIGN_FAIL                                                              TcaplusAPIErr = -279
	TcaplusAPIErr_DIR_ERR_LOW_VERSION                                                            TcaplusAPIErr = -535
	TcaplusAPIErr_DIR_ERR_HIGH_VERSION                                                           TcaplusAPIErr = -791
	TcaplusAPIErr_DIR_ERR_GET_DIR_SERVER_LIST                                                    TcaplusAPIErr = -1047
	TcaplusAPIErr_DIR_ERR_APP_IS_NOT_FOUNT                                                       TcaplusAPIErr = -1303
	TcaplusAPIErr_DIR_ERR_NOT_CONNECT_TCAPCENTER                                                 TcaplusAPIErr = -1559
	TcaplusAPIErr_DIR_ERR_ZONE_IS_NOT_FOUNT                                                      TcaplusAPIErr = -1815
	TcaplusAPIErr_DIR_ERR_HASH_TABLE_FAILED                                                      TcaplusAPIErr = -2071
	TcaplusAPIErr_BSON_ERR_TYPE_IS_NOT_MATCH                                                     TcaplusAPIErr = -280
	TcaplusAPIErr_BSON_ERR_INVALID_DATA_TYPE                                                     TcaplusAPIErr = -536
	TcaplusAPIErr_BSON_ERR_INVALID_VALUE                                                         TcaplusAPIErr = -792
	TcaplusAPIErr_BSON_ERR_BSON_TYPE_UNMATCH_TDR_TYPE                                            TcaplusAPIErr = -1048
	TcaplusAPIErr_BSON_ERR_BSON_TYPE_IS_NOT_SUPPORT_BY_TCAPLUS                                   TcaplusAPIErr = -1304
	TcaplusAPIErr_BSON_ERR_BSON_ARRAY_COUNT_IS_INVALID                                           TcaplusAPIErr = -1560
	TcaplusAPIErr_BSON_ERR_FAILED_TO_PARSE                                                       TcaplusAPIErr = -1816
	TcaplusAPIErr_BSON_ERR_INVALID_FIELD_NAME_LENGTH                                             TcaplusAPIErr = -2072
	TcaplusAPIErr_BSON_ERR_INDEX_FIELD_NAME_NOT_EXIST_WITH_ARRAY_TYPE                            TcaplusAPIErr = -2328
	TcaplusAPIErr_BSON_ERR_INVALID_ARRAY_INDEX                                                   TcaplusAPIErr = -2584
	TcaplusAPIErr_BSON_ERR_TDR_META_LIB_IS_NULL                                                  TcaplusAPIErr = -2840
	TcaplusAPIErr_BSON_ERR_MATCHED_COUNT_GREATER_THAN_ONE                                        TcaplusAPIErr = -3096
	TcaplusAPIErr_BSON_ERR_NO_MATCHED                                                            TcaplusAPIErr = -3352
	TcaplusAPIErr_BSON_ERR_GREATER_THAN_ARRAY_MAX_COUNT                                          TcaplusAPIErr = -3864
	TcaplusAPIErr_BSON_ERR_BSON_EXCEPTION                                                        TcaplusAPIErr = -4120
	TcaplusAPIErr_BSON_ERR_STD_EXCEPTION                                                         TcaplusAPIErr = -4376
	TcaplusAPIErr_BSON_ERR_INVALID_KEY                                                           TcaplusAPIErr = -4632
	TcaplusAPIErr_BSON_ERR_TDR_META_LIB_IS_INVALID                                               TcaplusAPIErr = -4888
	TcaplusAPIErr_COMMON_ERR_INVALID_ARGUMENTS                                                   TcaplusAPIErr = -281
	TcaplusAPIErr_COMMON_ERR_INVALID_MEMBER_VARIABLE_VALUE                                       TcaplusAPIErr = -537
	TcaplusAPIErr_COMMON_ERR_SPINLOCK_INIT_FAIL                                                  TcaplusAPIErr = -793
	TcaplusAPIErr_COMMON_ERR_SPINLOCK_DESTROY_FAIL                                               TcaplusAPIErr = -1049
	TcaplusAPIErr_COMMON_ERR_COMPRESS_BUF_NOT_ENOUGH                                             TcaplusAPIErr = -1305
	TcaplusAPIErr_COMMON_ERR_DECOMPRESS_BUF_NOT_ENOUGH                                           TcaplusAPIErr = -1561
	TcaplusAPIErr_COMMON_ERR_DECOMPRESS_INVALID_INPUT                                            TcaplusAPIErr = -1817
	TcaplusAPIErr_COMMON_ERR_CANNOT_FIND_COMPRESS_ALGORITHM                                      TcaplusAPIErr = -2073
	TcaplusAPIErr_COMMON_ERR_CANNOT_FIND_DECOMPRESS_ALGORITHM                                    TcaplusAPIErr = -2329
	TcaplusAPIErr_COMMON_ERR_COMPRESS_FAIL                                                       TcaplusAPIErr = -2585
	TcaplusAPIErr_COMMON_ERR_DECOMPRESS_FAIL                                                     TcaplusAPIErr = -2841
	TcaplusAPIErr_COMMON_ERR_INVALID_SWITCH_VALUE                                                TcaplusAPIErr = -3097
	TcaplusAPIErr_COMMON_ERR_LINUX_SYSTEM_CALL_FAIL                                              TcaplusAPIErr = -3353
	TcaplusAPIErr_COMMON_ERR_NOT_FIND_STAT_CACHE_VALUE                                           TcaplusAPIErr = -3609
	TcaplusAPIErr_COMMON_ERR_LZO_CHECK_FAIL                                                      TcaplusAPIErr = -3865
	TcaplusAPIErr_COMMON_INFO_DATA_NOT_MODIFIED                                                  TcaplusAPIErr = 288
	TcaplusAPIErr_MAX_MODULE_NUM                                                                 TcaplusAPIErr = 26
	TcaplusAPIErr_MAX_POSITIVE_ERR_CODE_NUM_PER_MODULE                                           TcaplusAPIErr = 16
	TcaplusAPIErr_MAX_NEGATIVE_ERR_CODE_NUM_PER_MODULE                                           TcaplusAPIErr = 256
	TcaplusAPIErr_GEN_ERR_SUC                                                                    TcaplusAPIErr = 0
	TcaplusAPIErr_GEN_ERR_ERR                                                                    TcaplusAPIErr = -256
	TcaplusAPIErr_GEN_ERR_INVALID_ARGUMENTS                                                      TcaplusAPIErr = -257
	TcaplusAPIErr_GEN_ERR_UNSUPPORT_OPERATION                                                    TcaplusAPIErr = -258
	TcaplusAPIErr_GEN_ERR_NOT_ENOUGH_MEMORY                                                      TcaplusAPIErr = -259
	TcaplusAPIErr_GEN_ERR_ECMGR_INVALID_MODULE_ID                                                TcaplusAPIErr = -512
	TcaplusAPIErr_GEN_ERR_ECMGR_INVALID_ERROR_CODE                                               TcaplusAPIErr = -768
	TcaplusAPIErr_GEN_ERR_ECMGR_NULL_ERROR_STRING                                                TcaplusAPIErr = -1024
	TcaplusAPIErr_GEN_ERR_ECMGR_DUPLICATED_ERROR_CODE                                            TcaplusAPIErr = -1280
	TcaplusAPIErr_GEN_ERR_TXLOG_NULL_POINTER_FROM_TSD                                            TcaplusAPIErr = -1536
	TcaplusAPIErr_GEN_ERR_TABLE_READONLY                                                         TcaplusAPIErr = -1792
	TcaplusAPIErr_LOC_ERR__0x00000202                                                            TcaplusAPIErr = -514
	TcaplusAPIErr_LOC_ERR__0x00000302                                                            TcaplusAPIErr = -770
	TcaplusAPIErr_LOC_ERR__0x00000402                                                            TcaplusAPIErr = -1026
	TcaplusAPIErr_LOC_ERR__0x00000502                                                            TcaplusAPIErr = -1282
	TcaplusAPIErr_LOC_ERR__0x00000602                                                            TcaplusAPIErr = -1538
	TcaplusAPIErr_LOC_ERR__0x00000702                                                            TcaplusAPIErr = -1794
	TcaplusAPIErr_LOC_ERR__0x00000802                                                            TcaplusAPIErr = -2050
	TcaplusAPIErr_LOC_ERR__0x00000902                                                            TcaplusAPIErr = -2306
	TcaplusAPIErr_LOC_ERR__0x00000A02                                                            TcaplusAPIErr = -2562
	TcaplusAPIErr_LOC_ERR__0x00000B02                                                            TcaplusAPIErr = -2818
	TcaplusAPIErr_LOC_ERR__0x00000C02                                                            TcaplusAPIErr = -3074
	TcaplusAPIErr_LOC_ERR__0x00000D02                                                            TcaplusAPIErr = -3330
	TcaplusAPIErr_LOC_ERR__0x00000E02                                                            TcaplusAPIErr = -3586
	TcaplusAPIErr_LOC_ERR__0x00000F02                                                            TcaplusAPIErr = -3842
	TcaplusAPIErr_LOC_ERR__0x00001002                                                            TcaplusAPIErr = -4098
	TcaplusAPIErr_LOC_ERR__0x00001102                                                            TcaplusAPIErr = -4354
	TcaplusAPIErr_LOC_ERR__0x00001202                                                            TcaplusAPIErr = -4610
	TcaplusAPIErr_LOC_ERR__0x00001302                                                            TcaplusAPIErr = -4866
	TcaplusAPIErr_LOC_ERR__0x00001402                                                            TcaplusAPIErr = -5122
	TcaplusAPIErr_LOC_ERR__0x00001502                                                            TcaplusAPIErr = -5378
	TcaplusAPIErr_LOC_ERR__0x00001602                                                            TcaplusAPIErr = -5634
	TcaplusAPIErr_LOC_ERR__0x00001702                                                            TcaplusAPIErr = -5890
	TcaplusAPIErr_LOC_ERR__0x00001802                                                            TcaplusAPIErr = -6146
	TcaplusAPIErr_LOC_ERR__0x00001902                                                            TcaplusAPIErr = -6402
	TcaplusAPIErr_LOC_ERR__0x00001A02                                                            TcaplusAPIErr = -6658
	TcaplusAPIErr_LOC_ERR__0x00001B02                                                            TcaplusAPIErr = -6914
	TcaplusAPIErr_LOC_ERR__0x00001C02                                                            TcaplusAPIErr = -7170
	TcaplusAPIErr_LOC_ERR__0x00001D02                                                            TcaplusAPIErr = -7426
	TcaplusAPIErr_LOC_ERR__0x00001E02                                                            TcaplusAPIErr = -7682
	TcaplusAPIErr_LOC_ERR__0x00001F02                                                            TcaplusAPIErr = -7938
	TcaplusAPIErr_LOC_ERR__0x00002002                                                            TcaplusAPIErr = -8194
	TcaplusAPIErr_LOC_ERR__0x00002802                                                            TcaplusAPIErr = -10242
	TcaplusAPIErr_LOC_ERR__0x00003002                                                            TcaplusAPIErr = -12290
	TcaplusAPIErr_LOC_ERR__0x00003802                                                            TcaplusAPIErr = -14338
	TcaplusAPIErr_LOC_ERR__0x00004002                                                            TcaplusAPIErr = -16386
	TcaplusAPIErr_LOC_ERR__0x00004802                                                            TcaplusAPIErr = -18434
	TcaplusAPIErr_LOC_ERR__0x00005002                                                            TcaplusAPIErr = -20482
	TcaplusAPIErr_LOC_ERR__0x00005802                                                            TcaplusAPIErr = -22530
	TcaplusAPIErr_LOC_ERR__0x00006002                                                            TcaplusAPIErr = -24578
	TcaplusAPIErr_LOC_ERR__0x00006802                                                            TcaplusAPIErr = -26626
	TcaplusAPIErr_LOC_ERR__0x00007002                                                            TcaplusAPIErr = -28674
	TcaplusAPIErr_LOC_ERR__0x00007802                                                            TcaplusAPIErr = -30722
	TcaplusAPIErr_LOC_ERR__0x00008002                                                            TcaplusAPIErr = -32770
	TcaplusAPIErr_LOC_ERR__0x00008802                                                            TcaplusAPIErr = -34818
	TcaplusAPIErr_LOC_ERR__0x00009002                                                            TcaplusAPIErr = -36866
	TcaplusAPIErr_LOC_ERR__0x00009802                                                            TcaplusAPIErr = -38914
	TcaplusAPIErr_LOC_ERR__0x0000A002                                                            TcaplusAPIErr = -40962
	TcaplusAPIErr_LOC_ERR__0x0000A802                                                            TcaplusAPIErr = -43010
	TcaplusAPIErr_LOC_ERR__0x0000B002                                                            TcaplusAPIErr = -45058
	TcaplusAPIErr_LOC_ERR__0x0000B802                                                            TcaplusAPIErr = -47106
	TcaplusAPIErr_LOC_ERR__0x0000C002                                                            TcaplusAPIErr = -49154
	TcaplusAPIErr_LOC_ERR__0x0000C802                                                            TcaplusAPIErr = -51202
	TcaplusAPIErr_LOC_ERR__0x0000FF02                                                            TcaplusAPIErr = -65282
)

var TcaplusAPIErr_name = map[int32]string{
	-275:   "API_ERR_OVER_MAX_KEY_FIELD_NUM",
	-531:   "API_ERR_OVER_MAX_VALUE_FIELD_NUM",
	-787:   "API_ERR_OVER_MAX_FIELD_NAME_LEN",
	-1043:  "API_ERR_OVER_MAX_FIELD_VALUE_LEN",
	-1299:  "API_ERR_FIELD_NOT_EXSIST",
	-1555:  "API_ERR_FIELD_TYPE_NOT_MATCH",
	-1811:  "API_ERR_PARAMETER_INVALID",
	-2067:  "API_ERR_OPERATION_TYPE_NOT_MATCH",
	-2323:  "API_ERR_PACK_MESSAGE",
	-2579:  "API_ERR_UNPACK_MESSAGE",
	-2835:  "API_ERR_PACKAGE_NOT_UNPACKED",
	-3091:  "API_ERR_OVER_MAX_RECORD_NUM",
	-3347:  "API_ERR_INVALID_COMMAND",
	-3603:  "API_ERR_NO_MORE_RECORD",
	-3859:  "API_ERR_OVER_KEY_FIELD_NUM",
	-4115:  "API_ERR_OVER_VALUE_FIELD_NUM",
	-4371:  "API_ERR_OBJ_NEED_INIT",
	-4627:  "API_ERR_INVALID_DATA_SIZE",
	-4883:  "API_ERR_INVALID_ARRAY_COUNT",
	-5139:  "API_ERR_INVALID_UNION_SELECT",
	-5395:  "API_ERR_MISS_PRIMARY_KEY",
	-5651:  "API_ERR_UNSUPPORT_FIELD_TYPE",
	-5907:  "API_ERR_ARRAY_BUFFER_IS_SMALL",
	-6163:  "API_ERR_IS_NOT_WHOLE_PACKAGE",
	-6419:  "API_ERR_MISS_PAIR_FIELD",
	-6675:  "API_ERR_GET_META_ENTRY",
	-6931:  "API_ERR_GET_ARRAY_META",
	-7187:  "API_ERR_GET_ENTRY_META",
	-7443:  "API_ERR_INCOMPATIBLE_META",
	-7699:  "API_ERR_PACK_ARRAY_DATA",
	-7955:  "API_ERR_PACK_UNION_DATA",
	-8211:  "API_ERR_PACK_STRUCT_DATA",
	-8467:  "API_ERR_UNPACK_ARRAY_DATA",
	-8723:  "API_ERR_UNPACK_UNION_DATA",
	-8979:  "API_ERR_UNPACK_STRUCT_DATA",
	-9235:  "API_ERR_INVALID_INDEX_NAME",
	-9491:  "API_ERR_MISS_PARTKEY_FIELD",
	-9747:  "API_ERR_ALLOCATE_MEMORY",
	-10003: "API_ERR_GET_META_SIZE",
	-10259: "API_ERR_MISS_BINARY_VERSION",
	-10515: "API_ERR_INVALID_INCREASE_FIELD",
	-10771: "API_ERR_INVALID_RESULT_FLAG",
	-11027: "API_ERR_OVER_MAX_LIST_INDEX_NUM",
	-11283: "API_ERR_INVALID_OBJ_STATUE",
	-11539: "API_ERR_INVALID_REQUEST",
	-11795: "API_ERR_INVALID_SHARD_LIST",
	-12051: "API_ERR_TABLE_NAME_MISSING",
	-12307: "API_ERR_SOCKET_SEND_BUFF_IS_FULL",
	-12563: "API_ERR_INVALID_MAGIC",
	-12819: "API_ERR_TABLE_IS_NOT_EXIST",
	-13075: "API_ERR_SHORT_BUFF",
	-13331: "API_ERR_FLOW_CONTROL",
	-13587: "API_ERR_COMPRESS_SWITCH_NOT_SUPPORTED_REGARDING_THIS_CMD",
	-13843: "API_ERR_FAILED_TO_FIND_ROUTE",
	-14099: "API_ERR_OVER_MAX_PKG_SIZE",
	-14355: "API_ERR_INVALID_VERSION_FOR_TLV",
	-14611: "API_ERR_BSON_SERIALIZE",
	-14867: "API_ERR_BSON_DESERIALIZE",
	-15123: "API_ERR_ADD_RECORD",
	-15379: "API_ERR_ZONE_IS_NOT_EXIST",
	-15635: "API_ERR_TRAVERSER_IS_NOT_EXIST",
	261:    "TXHDB_ERR_RECORD_NOT_EXIST",
	517:    "TXHDB_ERR_ITERATION_NO_MORE_RECORDS",
	773:    "TXHDB_ERR_MUTEX_TRYLOCK_BUSY",
	1029:   "TXHDB_ERR_MUTEX_TIMEDLOCK_TIMEOUT",
	1285:   "TXHDB_ERR_RWLOCK_TRYWRLOCK_BUSY",
	1541:   "TXHDB_ERR_RWLOCK_TRYRDLOCK_BUSY",
	1797:   "TXHDB_ERR_SPIN_TRYLOCK_BUSY",
	2053:   "TXHDB_ERR_ITERATION_EXCEED_MAX_ALLOWED_TIME_OF_ONE_ITER",
	-261:   "TXHDB_ERR_INVALID_ARGUMENTS",
	-517:   "TXHDB_ERR_INVALID_MEMBER_VARIABLE_VALUE",
	-773:   "TXHDB_ERR_ALREADY_OPEN",
	-1029:  "TXHDB_ERR_MUTEX_LOCK_FAIL",
	-1285:  "TXHDB_ERR_MUTEX_TRYLOCK_FAIL",
	-1541:  "TXHDB_ERR_MUTEX_TIMEDLOCK_FAIL",
	-1797:  "TXHDB_ERR_MUTEX_UNLOCK_FAIL",
	-2053:  "TXHDB_ERR_RWLOCK_WRLOCK_FAIL",
	-2309:  "TXHDB_ERR_RWLOCK_TRYWRLOCK_FAIL",
	-2565:  "TXHDB_ERR_RWLOCK_RDLOCK_FAIL",
	-2821:  "TXHDB_ERR_RWLOCK_TRYRDLOCK_FAIL",
	-3077:  "TXHDB_ERR_RWLOCK_UNLOCK_FAIL",
	-3333:  "TXHDB_ERR_SPIN_LOCK_FAIL",
	-3589:  "TXHDB_ERR_SPIN_UNLOCK_FAIL",
	-3845:  "TXHDB_ERR_FILE_EXISTS_BUT_STATUS_ERROR",
	-4101:  "TXHDB_ERR_FILE_OPEN_FAIL",
	-4357:  "TXHDB_ERR_FILE_READ_SIZE_INVALID",
	-4613:  "TXHDB_ERR_FILE_INVALID_FILE_PATH",
	-4869:  "TXHDB_ERR_FILE_LOCK_FILE_FAIL",
	-5125:  "TXHDB_ERR_FILE_NOT_A_REGULAR_FILE",
	-5381:  "TXHDB_ERR_FILE_MMAP_FAIL",
	-5637:  "TXHDB_ERR_FILE_MUNMAP_FAIL",
	-5893:  "TXHDB_ERR_FILE_CLOSE_FAIL",
	-6149:  "TXHDB_ERR_FILE_SPACE_NOT_ENOUGH_IN_HEAD",
	-6405:  "TXHDB_ERR_FILE_FTRUNCATE_FAIL",
	-6661:  "TXHDB_ERR_FILE_INCONSISTANT_FILE_SIZE",
	-6917:  "TXHDB_ERR_FILE_MSIZ_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET",
	-7173:  "TXHDB_ERR_FILE_MSIZ_CHANGE_NOT_PERMIT",
	-7429:  "TXHDB_ERR_FILE_FSTAT_FAIL",
	-7685:  "TXHDB_ERR_FILE_MSYNC_FAIL",
	-7941:  "TXHDB_ERR_FILE_FSYNC_FAIL",
	-8197:  "TXHDB_ERR_FILE_FCNTL_LOCK_FILE_FAIL",
	-8453:  "TXHDB_ERR_FILE_FCNTL_UNLOCK_FILE_FAIL",
	-8709:  "TXHDB_ERR_FILE_PREAD_FAIL_WITH_SPECIFIED_ERRNO",
	-8965:  "TXHDB_ERR_FILE_PREAD_FAIL_WITH_UNSPECIFIED_ERRNO",
	-9221:  "TXHDB_ERR_FILE_PWRITE_FAIL_WITH_SPECIFIED_ERRNO",
	-9477:  "TXHDB_ERR_FILE_PWRITE_FAIL_WITH_UNSPECIFIED_ERRNO",
	-9733:  "TXHDB_ERR_FILE_READ_EXCEED_FILE_BOUNDARY",
	-9989:  "TXHDB_ERR_FILE_READ_FAIL_DURING_COPY",
	-10245: "TXHDB_ERR_FILE_WRITE_FAIL_DURING_COPY",
	-10501: "TXHDB_ERR_FILE_INVALID_FREE_BLOCK_POOL_METADATA",
	-10757: "TXHDB_ERR_FILE_INVALID_MAGIC",
	-11013: "TXHDB_ERR_FILE_INVALID_LIBRARY_VERSION",
	-11269: "TXHDB_ERR_FILE_INVALID_LIBRARY_REVISION",
	-11525: "TXHDB_ERR_FILE_INVALID_FORMAT_VERSION",
	-11781: "TXHDB_ERR_FILE_INVALID_EXTDATA_FORMAT_VERSION",
	-12037: "TXHDB_ERR_FILE_INVALID_DBTYPE",
	-12293: "TXHDB_ERR_FILE_HEAD_CRC_UNMATCH",
	-12549: "TXHDB_ERR_FILE_INVALID_METADATA",
	-12805: "TXHDB_ERR_FILE_INVALID_HEADLEN",
	-13061: "TXHDB_ERR_FILE_DESERIAL_HEAD_SPACE_NOT_ENOUGH",
	-13317: "TXHDB_ERR_FILE_SERIAL_HEAD_SPACE_NOT_ENOUGH",
	-13573: "TXHDB_ERR_FILE_DESERIAL_STAT_SPACE_NOT_ENOUGH",
	-13829: "TXHDB_ERR_FILE_SERIAL_STAT_SPACE_NOT_ENOUGH",
	-14085: "TXHDB_ERR_FILE_SERIAL_FREE_BLOCK_LIST_INFO_WRONG_BUFFLEN",
	-14341: "TXHDB_ERR_FILE_IN_EXCEPTIONAL_STATUS",
	-14597: "TXHDB_ERR_DB_NOT_OPENED",
	-14853: "TXHDB_ERR_DB_WRITE_NOT_PERMIT",
	-15109: "TXHDB_ERR_INVALID_OFFSET_FROM_BUCKET",
	-15365: "TXHDB_ERR_READ_EXTDATA_EXCEED_BUFF_LENGTH",
	-15621: "TXHDB_ERR_WRITE_EXTDATA_EXCEED_BUFF_LENGTH",
	-15877: "TXHDB_ERR_FREE_BLOCK_IS_READ_WHEN_GETTING_RECORD",
	-16133: "TXHDB_ERR_INVALID_KEY_DATABLOCK_NUM",
	-16389: "TXHDB_ERR_INVALID_VALUE_DATABLOCK_NUM",
	-16645: "TXHDB_ERR_GET_RECORD_EXCEED_BUFF_LENGTH",
	-16901: "TXHDB_ERR_COMPRESSION_FAIL",
	-17157: "TXHDB_ERR_DECOMPRESSION_FAIL",
	-17413: "TXHDB_ERR_INVALID_OFFSETINEXTDATA_AND_SIZE_WHEN_UPDATING_EXTDATA",
	-17669: "TXHDB_ERR_UNEXPECTED_FREEBLOCK",
	-17925: "TXHDB_ERR_VALUE_APOW_LESSER_THAN_KEY_APOW",
	-18181: "TXHDB_ERR_DUPLICATED_FILE_PATH",
	-18437: "TXHDB_ERR_INVALID_KEY_HEAD_SIZE_IN_TXHDB_META",
	-18693: "TXHDB_ERR_INVALID_FILE_SIZE",
	-18949: "TXHDB_ERR_INVALID_FREE_BLOCK_SIZE",
	-19205: "TXHDB_ERR_MMAP_MEMSIZE_CHANGE_NOT_PERMITTED",
	-19461: "TXHDB_ERR_NEW_FILE_OBJ_FAIL",
	-19717: "TXHDB_ERR_RECORD_KEY_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET",
	-19973: "TXHDB_ERR_RECORD_VALUE_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET",
	-20229: "TXHDB_ERR_RECORD_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET",
	-20485: "TXHDB_ERR_KEY_BUFFSIZE_LESSER_THAN_KEY_HEADSIZE",
	-20741: "TXHDB_ERR_VALUE_BUFFSIZE_LESSER_THAN_VALUE_HEADSIZE",
	-20997: "TXHDB_ERR_RECORD_SIZE_LESSER_THAN_KEY_HEADSIZE",
	-21253: "TXHDB_ERR_INVALID_BLOCK_MAGIC",
	-21509: "TXHDB_ERR_INVALID_FREE_BLOCK_MAGIC",
	-21765: "TXHDB_ERR_INVALID_KEYMAGIC",
	-22021: "TXHDB_ERR_INVALID_KEYSPLMAGIC",
	-22277: "TXHDB_ERR_INVALID_VALMAGIC",
	-22533: "TXHDB_ERR_INVALID_VALSPLMAGIC",
	-22789: "TXHDB_ERR_UNSUPPORTED_KEY_FORMAT_VERSION",
	-23045: "TXHDB_ERR_UNSUPPORTED_KEY_SPLBLOCK_FORMAT_VERSION",
	-23301: "TXHDB_ERR_UNSUPPORTED_VALUE_FORMAT_VERSION",
	-23557: "TXHDB_ERR_UNSUPPORTED_VALUE_SPLBLOCK_FORMAT_VERSION",
	-23813: "TXHDB_ERR_UNSUPPORTED_FREE_BLOCK_FORMAT_VERSION",
	-24069: "TXHDB_ERR_KEY_HEAD_CRC_UNMATCH",
	-24325: "TXHDB_ERR_KEY_SPLBLOCK_HEAD_CRC_UNMATCH",
	-24581: "TXHDB_ERR_VALUE_HEAD_CRC_UNMATCH",
	-24837: "TXHDB_ERR_VALUE_SPLBLOCK_HEAD_CRC_UNMATCH",
	-25093: "TXHDB_ERR_FREE_BLOCK_HEAD_CRC_UNMATCH",
	-25349: "TXHDB_ERR_FREE_BLOCK_LIST_INFO_CRC_UNMATCH",
	-25605: "TXHDB_ERR_GET_KEY_READ_BUFFER_FAIL",
	-25861: "TXHDB_ERR_GET_VALUE_READ_BUFFER_FAIL",
	-26117: "TXHDB_ERR_GET_LRU_VALUE_BUFFER_FAIL",
	-26373: "TXHDB_ERR_GET_EXTDATA_READ_BUFFER_FAIL",
	-26629: "TXHDB_ERR_KEY_BLOCK_BODYSIZE_GREATER_THAN_KEY_BODYSIZE",
	-26885: "TXHDB_ERR_VALUE_BLOCK_BODYSIZE_GREATER_THAN_VALUE_BODYSIZE",
	-27141: "TXHDB_ERR_NULL_RECORD_POINTER",
	-27397: "TXHDB_ERR_NULL_RECORD_WRITE_BUFF",
	-27653: "TXHDB_ERR_SERIALIZE_RECORD_KEY_HEAD",
	-27909: "TXHDB_ERR_INVALID_IDX_IN_STAT_NUMS_ARRAY",
	-28165: "TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_KEYNUMS",
	-28421: "TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_VALNUMS",
	-28677: "TXHDB_ERR_PRINT_SPACE_NOT_ENOUGH",
	-28933: "TXHDB_ERR_LRU_SHIFTIN_NOT_ENOUGH_MEMORY",
	-29189: "TXHDB_ERR_LRU_SHIFTIN_NO_MORE_LRU_NODE",
	-29445: "TXHDB_ERR_LRU_ADJUST_NO_MORE_LRU_NODE",
	-29701: "TXHDB_ERR_LRU_SHIFTOUT_RECORD_ALREADY_OUTSIDE_OF_MEMORY",
	-29957: "TXHDB_ERR_FILE_EXTDATA_LENGTH_CRC_UNMATCH",
	-30213: "TXHDB_ERR_FILE_EXTDATA_INVALID_LENGTH",
	-30469: "TXHDB_ERR_INVALID_VALUE_HEAD_SIZE_IN_TXHDB_META",
	-30725: "TXHDB_ERR_INVALID_SPLITDATABLOCK_HEAD_SIZE_IN_TXHDB_META",
	-30981: "TXHDB_ERR_KEY_BUCKETIDX_UNMATCH",
	-31237: "TXHDB_ERR_FILE_WRITE_SIZE_INVALID",
	-31493: "TXHDB_ERR_MODIFY_STAT_UNSUPPORTED_OPERATION_TYPE",
	-31749: "TXHDB_ERR_INVALID_EXTDATAMAGIC",
	-32005: "TXHDB_ERR_INVALID_INTERNAL_LIST_TAIL_DURING_POP_LRU_NODELIST",
	-32261: "TXHDB_ERR_GET_LRUNODE_FAIL",
	-32517: "TXHDB_ERR_LRUNODE_INVALID_FLAG",
	-32773: "TXHDB_ERR_INVALID_FREE_BLOCK_NUM_TOO_MANY_FREE_BLOCKS",
	-33029: "TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_NOPADDING_SIZE_KEYNUMS",
	-33285: "TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_NOPADDING_SIZE_VALNUMS",
	-33541: "TXHDB_ERR_ADD_LSIZE_EXCEEDS_MAX_TSD_VALUE_BUFF_SIZE",
	-33797: "TXHDB_ERR_INTERNAL_CONSTANTS_ILLEGAL",
	-34053: "TXHDB_ERR_TOO_BIG_KEY_BIZ_SIZE",
	-34309: "TXHDB_ERR_TOO_BIG_VALUE_BIZ_SIZE",
	-34565: "TXHDB_ERR_INDEX_NO_EXIST",
	-34821: "TXHDB_ERR_INVALID_FREE_BLOCK_BASESIZE",
	-35077: "TXHDB_ERR_CANNOT_CREATE_MMAPSHM_BECAUSE_SHM_ALREADY_EXISTED",
	-35333: "TXHDB_ERR_INVALID_GENSHM_KEY",
	-35589: "TXHDB_ERR_GENSHM_GET_FAIL",
	-35845: "TXHDB_ERR_GENSHM_CREATE_FAIL",
	-36101: "TXHDB_ERR_GENSHM_STAT_FAIL",
	-36357: "TXHDB_ERR_GENSHM_DOES_NOT_EXIST",
	-36613: "TXHDB_ERR_GENSHM_ATTACH_FAIL_BECAUSE_IT_IS_ALREADY_ATTACHED_BY_OTHER_PROCESSES",
	-36869: "TXHDB_ERR_GENSHM_ATTACH_FAIL",
	-37125: "TXHDB_ERR_FILE_INCONSISTANT_MSIZE",
	-37381: "TXHDB_ERR_INVALID_TCAP_GENSHM_MAGIC",
	-37637: "TXHDB_ERR_GENSHM_FIXED_HEAD_BUFFLEN_UNMATCH",
	-37893: "TXHDB_ERR_GENSHM_INVALID_HEADLEN",
	-38149: "TXHDB_ERR_GENSHM_HEAD_CRC_UNMATCH",
	-38405: "TXHDB_ERR_GENSHM_HEAD_INVALID_VERSION",
	-38661: "TXHDB_ERR_GENSHM_INVALID_FILETYPE",
	-38917: "TXHDB_ERR_GET_IPV4ADDR_FAIL",
	-39173: "TXHDB_ERR_NO_VALID_IPV4ADDR_EXISTS",
	-39429: "TXHDB_ERR_TRANSFER_IPV4ADDR_FAIL",
	-39685: "TXHDB_ERR_FILE_EXCEEDS_LSIZE_LIMIT",
	-39941: "TXHDB_ERR_GENSHM_DETACH_FAIL",
	-40197: "TXHDB_ERR_TXHDB_HEAD_PARAMETERS_ERROR",
	-40453: "TXHDB_ERR_TXHDB_HEAD_OLD_VERSION",
	-40709: "TXHDB_ERR_TXHDB_SHM_COREINFO_UNMATCH",
	-40965: "TXHDB_ERR_TXHDB_SHM_EXTDATA_UNMATCH",
	-41221: "TXHDB_ERR_TXHDB_EXTDATA_CHECK_ERROR",
	-41477: "TXHDB_ERR_CHUNK_BUFFS_CANNOT_BE_ALLOCED_IF_THEY_ARE_NOT_RELEASED",
	-41733: "TXHDB_ERR_ALLOCATE_MEMORY_FAIL",
	-41989: "TXHDB_ERR_INVALID_CHUNK_RW_MANNER",
	-42245: "TXHDB_ERR_FILE_PREAD_NOT_COMPLETE",
	-42501: "TXHDB_ERR_FILE_PWRITE_NOT_COMPLETE",
	-42757: "TXHDB_ERR_KEY_ONEBLOCK_BUT_NEXT_NOTNULL",
	-43013: "TXHDB_ERR_VALUE_ONEBLOCK_BUT_NEXT_NOTNULL",
	-43269: "TXHDB_ERR_VARINT_FORMAT_ERROR",
	-43525: "TXHDB_ERR_TXSTAT_ERROR",
	-269:   "SVR_ERR_FAIL_ROUTE",
	-525:   "SVR_ERR_FAIL_TIMEOUT",
	-781:   "SVR_ERR_FAIL_SHORT_BUFF",
	-1037:  "SVR_ERR_FAIL_SYSTEM_BUSY",
	-1293:  "SVR_ERR_FAIL_RECORD_EXIST",
	-1549:  "SVR_ERR_FAIL_INVALID_FIELD_NAME",
	-1805:  "SVR_ERR_FAIL_VALUE_OVER_MAX_LEN",
	-2061:  "SVR_ERR_FAIL_INVALID_FIELD_TYPE",
	-2317:  "SVR_ERR_FAIL_SYNC_WRITE",
	-2573:  "SVR_ERR_FAIL_WRITE_RECORD",
	-2829:  "SVR_ERR_FAIL_DELETE_RECORD",
	-3085:  "SVR_ERR_FAIL_DATA_ENGINE",
	-3341:  "SVR_ERR_FAIL_RESULT_OVERFLOW",
	-3597:  "SVR_ERR_FAIL_INVALID_OPERATION",
	-3853:  "SVR_ERR_FAIL_INVALID_SUBSCRIPT",
	-4109:  "SVR_ERR_FAIL_INVALID_INDEX",
	-4365:  "SVR_ERR_FAIL_OVER_MAXE_FIELD_NUM",
	-4621:  "SVR_ERR_FAIL_MISS_KEY_FIELD",
	-4877:  "SVR_ERR_FAIL_NEED_SIGNUP",
	-5133:  "SVR_ERR_FAIL_CROSS_AUTH",
	-5389:  "SVR_ERR_FAIL_SIGNUP_FAIL",
	-5645:  "SVR_ERR_FAIL_SIGNUP_INVALID",
	-5901:  "SVR_ERR_FAIL_SIGNUP_INIT",
	-6157:  "SVR_ERR_FAIL_LIST_FULL",
	-6413:  "SVR_ERR_FAIL_LOW_VERSION",
	-6669:  "SVR_ERR_FAIL_HIGH_VERSION",
	-6925:  "SVR_ERR_FAIL_INVALID_RESULT_FLAG",
	-7181:  "SVR_ERR_FAIL_PROXY_STOPPING",
	-7437:  "SVR_ERR_FAIL_SVR_READONLY",
	-7693:  "SVR_ERR_FAIL_SVR_READONLY_BECAUSE_IN_SLAVE_MODE",
	-7949:  "SVR_ERR_FAIL_INVALID_VERSION",
	-8205:  "SVR_ERR_FAIL_SYSTEM_ERROR",
	-8461:  "SVR_ERR_FAIL_OVERLOAD",
	-8717:  "SVR_ERR_FAIL_NOT_ENOUGH_DADADISK_SPACE",
	-8973:  "SVR_ERR_FAIL_NOT_ENOUGH_ULOGDISK_SPACE",
	-9229:  "SVR_ERR_FAIL_UNSUPPORTED_PROTOCOL_MAGIC",
	-9485:  "SVR_ERR_FAIL_UNSUPPORTED_PROTOCOL_CMD",
	-9741:  "SVR_ERR_FAIL_HIGH_TABLE_META_VERSION",
	-9997:  "SVR_ERR_FAIL_MERGE_VALUE_FIELD",
	-10253: "SVR_ERR_FAIL_CUT_VALUE_FIELD",
	-10509: "SVR_ERR_FAIL_PACK_FIELD",
	-10765: "SVR_ERR_FAIL_UNPACK_FIELD",
	-11021: "SVR_ERR_FAIL_LOW_API_VERSION",
	-11277: "SVR_ERR_COMMAND_AND_TABLE_TYPE_IS_MISMATCH",
	-11533: "SVR_ERR_FAIL_TO_FIND_CACHE",
	-11789: "SVR_ERR_FAIL_TO_FIND_META",
	-12045: "SVR_ERR_FAIL_TO_GET_CURSOR",
	-12301: "SVR_ERR_FAIL_OUT_OF_USER_DEF_RANGE",
	-12557: "SVR_ERR_INVALID_ARGUMENTS",
	-12813: "SVR_ERR_SLAVE_READ_INVALID",
	-13069: "SVR_ERR_NULL_CACHE",
	-13325: "SVR_ERR_NULL_CURSOR",
	-13581: "SVR_ERR_METALIB_VERSION_LESS_THAN_ENTRY_VERSION",
	-13837: "SVR_ERR_INVALID_SELECT_ID_FOR_UNION",
	-14093: "SVR_ERR_CAN_NOT_FIND_SELECT_ENTRY_FOR_UNION",
	-14349: "SVR_ERR_FAIL_DOCUMENT_PACK_VERSION",
	-14605: "SVR_ERR_TCAPSVR_PROCESS_NOT_NORMAL",
	-14861: "SVR_ERR_TBUSD_PROCESS_NOT_NORMAL",
	-15117: "SVR_ERR_INVALID_ARRAY_COUNT",
	-15373: "SVR_ERR_REJECT_REQUEST_BECAUSE_ROUTE_IN_REJECT_STATUS",
	-15629: "SVR_ERR_FAIL_GET_ROUTE_HASH_CODE",
	-271:   "TCAPDB_ERR_INVALID_PARAMS",
	-273:   "PROXY_ERR_INVALID_PARAMS",
	-529:   "PROXY_ERR_NO_NEED_ROUTE_BATCHGET_ACTION_MSG_WHEN_NODE_IS_IN_SYNC_STATUS",
	-785:   "PROXY_ERR_NO_NEED_ROUTE_WHEN_NODE_IS_IN_REJECT_STATUS",
	-1041:  "PROXY_ERR_PROBE_TIMEOUT",
	-1297:  "PROXY_ERR_SYSTEM_ERROR",
	-1553:  "PROXY_ERR_CONFIG_ERROR",
	-1809:  "PROXY_ERR_OVER_MAX_NODE",
	-2065:  "PROXY_ERR_INVALID_SPLIT_SIZE",
	-2321:  "PROXY_ERR_INVALID_ROUTE_INDEX",
	-2577:  "PROXY_ERR_CONNECT_SERVER",
	-2833:  "PROXY_ERR_COMPOSE_MSG",
	-3089:  "PROXY_ERR_ROUTE_MSG",
	-3345:  "PROXY_ERR_SHORT_BUFFER",
	-3601:  "PROXY_ERR_OVER_MAX_RECORD",
	-3857:  "PROXY_ERR_INVALID_SERVICE_TABLE",
	-4113:  "PROXY_ERR_REGISTER_FAILED",
	-4369:  "PROXY_ERR_CREATE_SESSION_HASH",
	-4625:  "PROXY_ERR_WRONG_STATUS",
	-4881:  "PROXY_ERR_UNPACK_MSG",
	-5137:  "PROXY_ERR_PACK_MSG",
	-5393:  "PROXY_ERR_SEND_MSG",
	-5649:  "PROXY_ERR_ALLOCATE_MEMORY",
	-5905:  "PROXY_ERR_PARSE_MSG",
	-6161:  "PROXY_ERR_INVALID_MSG",
	-6417:  "PROXY_ERR_FAILED_PROC_REQUEST_BECAUSE_NODE_IS_IN_SYNC_STASUS",
	-6673:  "PROXY_ERR_KEY_FIELD_NUM_IS_ZERO",
	-6929:  "PROXY_ERR_LACK_OF_SOME_KEY_FIELDS",
	-7185:  "PROXY_ERR_FAILED_TO_FIND_NODE",
	-7441:  "PROXY_ERR_INVALID_COMPRESS_TYPE",
	-7697:  "PROXY_ERR_REQUEST_OVERSPEED",
	-7953:  "PROXY_ERR_SWIFT_TIMEOUT",
	-8209:  "PROXY_ERR_SWIFT_ERROR",
	-8465:  "PROXY_ERR_DIRECT_RESPONSE",
	-8721:  "PROXY_ERR_INIT_TLOG",
	-8977:  "PROXY_ERR_ASSISTANT_THREAD_NOT_RUN",
	-277:   "CENTER_ERR_INVALID_PARAMS",
	-533:   "CENTER_ERR_TABLE_ALREADY_EXIST",
	-789:   "CENTER_ERR_TABLE_NOT_EXIST",
	-279:   "DIR_ERR_SIGN_FAIL",
	-535:   "DIR_ERR_LOW_VERSION",
	-791:   "DIR_ERR_HIGH_VERSION",
	-1047:  "DIR_ERR_GET_DIR_SERVER_LIST",
	-1303:  "DIR_ERR_APP_IS_NOT_FOUNT",
	-1559:  "DIR_ERR_NOT_CONNECT_TCAPCENTER",
	-1815:  "DIR_ERR_ZONE_IS_NOT_FOUNT",
	-2071:  "DIR_ERR_HASH_TABLE_FAILED",
	-280:   "BSON_ERR_TYPE_IS_NOT_MATCH",
	-536:   "BSON_ERR_INVALID_DATA_TYPE",
	-792:   "BSON_ERR_INVALID_VALUE",
	-1048:  "BSON_ERR_BSON_TYPE_UNMATCH_TDR_TYPE",
	-1304:  "BSON_ERR_BSON_TYPE_IS_NOT_SUPPORT_BY_TCAPLUS",
	-1560:  "BSON_ERR_BSON_ARRAY_COUNT_IS_INVALID",
	-1816:  "BSON_ERR_FAILED_TO_PARSE",
	-2072:  "BSON_ERR_INVALID_FIELD_NAME_LENGTH",
	-2328:  "BSON_ERR_INDEX_FIELD_NAME_NOT_EXIST_WITH_ARRAY_TYPE",
	-2584:  "BSON_ERR_INVALID_ARRAY_INDEX",
	-2840:  "BSON_ERR_TDR_META_LIB_IS_NULL",
	-3096:  "BSON_ERR_MATCHED_COUNT_GREATER_THAN_ONE",
	-3352:  "BSON_ERR_NO_MATCHED",
	-3864:  "BSON_ERR_GREATER_THAN_ARRAY_MAX_COUNT",
	-4120:  "BSON_ERR_BSON_EXCEPTION",
	-4376:  "BSON_ERR_STD_EXCEPTION",
	-4632:  "BSON_ERR_INVALID_KEY",
	-4888:  "BSON_ERR_TDR_META_LIB_IS_INVALID",
	-281:   "COMMON_ERR_INVALID_ARGUMENTS",
	-537:   "COMMON_ERR_INVALID_MEMBER_VARIABLE_VALUE",
	-793:   "COMMON_ERR_SPINLOCK_INIT_FAIL",
	-1049:  "COMMON_ERR_SPINLOCK_DESTROY_FAIL",
	-1305:  "COMMON_ERR_COMPRESS_BUF_NOT_ENOUGH",
	-1561:  "COMMON_ERR_DECOMPRESS_BUF_NOT_ENOUGH",
	-1817:  "COMMON_ERR_DECOMPRESS_INVALID_INPUT",
	-2073:  "COMMON_ERR_CANNOT_FIND_COMPRESS_ALGORITHM",
	-2329:  "COMMON_ERR_CANNOT_FIND_DECOMPRESS_ALGORITHM",
	-2585:  "COMMON_ERR_COMPRESS_FAIL",
	-2841:  "COMMON_ERR_DECOMPRESS_FAIL",
	-3097:  "COMMON_ERR_INVALID_SWITCH_VALUE",
	-3353:  "COMMON_ERR_LINUX_SYSTEM_CALL_FAIL",
	-3609:  "COMMON_ERR_NOT_FIND_STAT_CACHE_VALUE",
	-3865:  "COMMON_ERR_LZO_CHECK_FAIL",
	288:    "COMMON_INFO_DATA_NOT_MODIFIED",
	26:     "MAX_MODULE_NUM",
	16:     "MAX_POSITIVE_ERR_CODE_NUM_PER_MODULE",
	256:    "MAX_NEGATIVE_ERR_CODE_NUM_PER_MODULE",
	0:      "GEN_ERR_SUC",
	-256:   "GEN_ERR_ERR",
	-257:   "GEN_ERR_INVALID_ARGUMENTS",
	-258:   "GEN_ERR_UNSUPPORT_OPERATION",
	-259:   "GEN_ERR_NOT_ENOUGH_MEMORY",
	-512:   "GEN_ERR_ECMGR_INVALID_MODULE_ID",
	-768:   "GEN_ERR_ECMGR_INVALID_ERROR_CODE",
	-1024:  "GEN_ERR_ECMGR_NULL_ERROR_STRING",
	-1280:  "GEN_ERR_ECMGR_DUPLICATED_ERROR_CODE",
	-1536:  "GEN_ERR_TXLOG_NULL_POINTER_FROM_TSD",
	-1792:  "GEN_ERR_TABLE_READONLY",
	-514:   "LOC_ERR__0x00000202",
	-770:   "LOC_ERR__0x00000302",
	-1026:  "LOC_ERR__0x00000402",
	-1282:  "LOC_ERR__0x00000502",
	-1538:  "LOC_ERR__0x00000602",
	-1794:  "LOC_ERR__0x00000702",
	-2050:  "LOC_ERR__0x00000802",
	-2306:  "LOC_ERR__0x00000902",
	-2562:  "LOC_ERR__0x00000A02",
	-2818:  "LOC_ERR__0x00000B02",
	-3074:  "LOC_ERR__0x00000C02",
	-3330:  "LOC_ERR__0x00000D02",
	-3586:  "LOC_ERR__0x00000E02",
	-3842:  "LOC_ERR__0x00000F02",
	-4098:  "LOC_ERR__0x00001002",
	-4354:  "LOC_ERR__0x00001102",
	-4610:  "LOC_ERR__0x00001202",
	-4866:  "LOC_ERR__0x00001302",
	-5122:  "LOC_ERR__0x00001402",
	-5378:  "LOC_ERR__0x00001502",
	-5634:  "LOC_ERR__0x00001602",
	-5890:  "LOC_ERR__0x00001702",
	-6146:  "LOC_ERR__0x00001802",
	-6402:  "LOC_ERR__0x00001902",
	-6658:  "LOC_ERR__0x00001A02",
	-6914:  "LOC_ERR__0x00001B02",
	-7170:  "LOC_ERR__0x00001C02",
	-7426:  "LOC_ERR__0x00001D02",
	-7682:  "LOC_ERR__0x00001E02",
	-7938:  "LOC_ERR__0x00001F02",
	-8194:  "LOC_ERR__0x00002002",
	-10242: "LOC_ERR__0x00002802",
	-12290: "LOC_ERR__0x00003002",
	-14338: "LOC_ERR__0x00003802",
	-16386: "LOC_ERR__0x00004002",
	-18434: "LOC_ERR__0x00004802",
	-20482: "LOC_ERR__0x00005002",
	-22530: "LOC_ERR__0x00005802",
	-24578: "LOC_ERR__0x00006002",
	-26626: "LOC_ERR__0x00006802",
	-28674: "LOC_ERR__0x00007002",
	-30722: "LOC_ERR__0x00007802",
	-32770: "LOC_ERR__0x00008002",
	-34818: "LOC_ERR__0x00008802",
	-36866: "LOC_ERR__0x00009002",
	-38914: "LOC_ERR__0x00009802",
	-40962: "LOC_ERR__0x0000A002",
	-43010: "LOC_ERR__0x0000A802",
	-45058: "LOC_ERR__0x0000B002",
	-47106: "LOC_ERR__0x0000B802",
	-49154: "LOC_ERR__0x0000C002",
	-51202: "LOC_ERR__0x0000C802",
	-65282: "LOC_ERR__0x0000FF02",
}
var TcaplusAPIErr_value = map[string]int32{
	"API_ERR_OVER_MAX_KEY_FIELD_NUM":                                                 -275,
	"API_ERR_OVER_MAX_VALUE_FIELD_NUM":                                               -531,
	"API_ERR_OVER_MAX_FIELD_NAME_LEN":                                                -787,
	"API_ERR_OVER_MAX_FIELD_VALUE_LEN":                                               -1043,
	"API_ERR_FIELD_NOT_EXSIST":                                                       -1299,
	"API_ERR_FIELD_TYPE_NOT_MATCH":                                                   -1555,
	"API_ERR_PARAMETER_INVALID":                                                      -1811,
	"API_ERR_OPERATION_TYPE_NOT_MATCH":                                               -2067,
	"API_ERR_PACK_MESSAGE":                                                           -2323,
	"API_ERR_UNPACK_MESSAGE":                                                         -2579,
	"API_ERR_PACKAGE_NOT_UNPACKED":                                                   -2835,
	"API_ERR_OVER_MAX_RECORD_NUM":                                                    -3091,
	"API_ERR_INVALID_COMMAND":                                                        -3347,
	"API_ERR_NO_MORE_RECORD":                                                         -3603,
	"API_ERR_OVER_KEY_FIELD_NUM":                                                     -3859,
	"API_ERR_OVER_VALUE_FIELD_NUM":                                                   -4115,
	"API_ERR_OBJ_NEED_INIT":                                                          -4371,
	"API_ERR_INVALID_DATA_SIZE":                                                      -4627,
	"API_ERR_INVALID_ARRAY_COUNT":                                                    -4883,
	"API_ERR_INVALID_UNION_SELECT":                                                   -5139,
	"API_ERR_MISS_PRIMARY_KEY":                                                       -5395,
	"API_ERR_UNSUPPORT_FIELD_TYPE":                                                   -5651,
	"API_ERR_ARRAY_BUFFER_IS_SMALL":                                                  -5907,
	"API_ERR_IS_NOT_WHOLE_PACKAGE":                                                   -6163,
	"API_ERR_MISS_PAIR_FIELD":                                                        -6419,
	"API_ERR_GET_META_ENTRY":                                                         -6675,
	"API_ERR_GET_ARRAY_META":                                                         -6931,
	"API_ERR_GET_ENTRY_META":                                                         -7187,
	"API_ERR_INCOMPATIBLE_META":                                                      -7443,
	"API_ERR_PACK_ARRAY_DATA":                                                        -7699,
	"API_ERR_PACK_UNION_DATA":                                                        -7955,
	"API_ERR_PACK_STRUCT_DATA":                                                       -8211,
	"API_ERR_UNPACK_ARRAY_DATA":                                                      -8467,
	"API_ERR_UNPACK_UNION_DATA":                                                      -8723,
	"API_ERR_UNPACK_STRUCT_DATA":                                                     -8979,
	"API_ERR_INVALID_INDEX_NAME":                                                     -9235,
	"API_ERR_MISS_PARTKEY_FIELD":                                                     -9491,
	"API_ERR_ALLOCATE_MEMORY":                                                        -9747,
	"API_ERR_GET_META_SIZE":                                                          -10003,
	"API_ERR_MISS_BINARY_VERSION":                                                    -10259,
	"API_ERR_INVALID_INCREASE_FIELD":                                                 -10515,
	"API_ERR_INVALID_RESULT_FLAG":                                                    -10771,
	"API_ERR_OVER_MAX_LIST_INDEX_NUM":                                                -11027,
	"API_ERR_INVALID_OBJ_STATUE":                                                     -11283,
	"API_ERR_INVALID_REQUEST":                                                        -11539,
	"API_ERR_INVALID_SHARD_LIST":                                                     -11795,
	"API_ERR_TABLE_NAME_MISSING":                                                     -12051,
	"API_ERR_SOCKET_SEND_BUFF_IS_FULL":                                               -12307,
	"API_ERR_INVALID_MAGIC":                                                          -12563,
	"API_ERR_TABLE_IS_NOT_EXIST":                                                     -12819,
	"API_ERR_SHORT_BUFF":                                                             -13075,
	"API_ERR_FLOW_CONTROL":                                                           -13331,
	"API_ERR_COMPRESS_SWITCH_NOT_SUPPORTED_REGARDING_THIS_CMD":                       -13587,
	"API_ERR_FAILED_TO_FIND_ROUTE":                                                   -13843,
	"API_ERR_OVER_MAX_PKG_SIZE":                                                      -14099,
	"API_ERR_INVALID_VERSION_FOR_TLV":                                                -14355,
	"API_ERR_BSON_SERIALIZE":                                                         -14611,
	"API_ERR_BSON_DESERIALIZE":                                                       -14867,
	"API_ERR_ADD_RECORD":                                                             -15123,
	"API_ERR_ZONE_IS_NOT_EXIST":                                                      -15379,
	"API_ERR_TRAVERSER_IS_NOT_EXIST":                                                 -15635,
	"TXHDB_ERR_RECORD_NOT_EXIST":                                                     261,
	"TXHDB_ERR_ITERATION_NO_MORE_RECORDS":                                            517,
	"TXHDB_ERR_MUTEX_TRYLOCK_BUSY":                                                   773,
	"TXHDB_ERR_MUTEX_TIMEDLOCK_TIMEOUT":                                              1029,
	"TXHDB_ERR_RWLOCK_TRYWRLOCK_BUSY":                                                1285,
	"TXHDB_ERR_RWLOCK_TRYRDLOCK_BUSY":                                                1541,
	"TXHDB_ERR_SPIN_TRYLOCK_BUSY":                                                    1797,
	"TXHDB_ERR_ITERATION_EXCEED_MAX_ALLOWED_TIME_OF_ONE_ITER":                        2053,
	"TXHDB_ERR_INVALID_ARGUMENTS":                                                    -261,
	"TXHDB_ERR_INVALID_MEMBER_VARIABLE_VALUE":                                        -517,
	"TXHDB_ERR_ALREADY_OPEN":                                                         -773,
	"TXHDB_ERR_MUTEX_LOCK_FAIL":                                                      -1029,
	"TXHDB_ERR_MUTEX_TRYLOCK_FAIL":                                                   -1285,
	"TXHDB_ERR_MUTEX_TIMEDLOCK_FAIL":                                                 -1541,
	"TXHDB_ERR_MUTEX_UNLOCK_FAIL":                                                    -1797,
	"TXHDB_ERR_RWLOCK_WRLOCK_FAIL":                                                   -2053,
	"TXHDB_ERR_RWLOCK_TRYWRLOCK_FAIL":                                                -2309,
	"TXHDB_ERR_RWLOCK_RDLOCK_FAIL":                                                   -2565,
	"TXHDB_ERR_RWLOCK_TRYRDLOCK_FAIL":                                                -2821,
	"TXHDB_ERR_RWLOCK_UNLOCK_FAIL":                                                   -3077,
	"TXHDB_ERR_SPIN_LOCK_FAIL":                                                       -3333,
	"TXHDB_ERR_SPIN_UNLOCK_FAIL":                                                     -3589,
	"TXHDB_ERR_FILE_EXISTS_BUT_STATUS_ERROR":                                         -3845,
	"TXHDB_ERR_FILE_OPEN_FAIL":                                                       -4101,
	"TXHDB_ERR_FILE_READ_SIZE_INVALID":                                               -4357,
	"TXHDB_ERR_FILE_INVALID_FILE_PATH":                                               -4613,
	"TXHDB_ERR_FILE_LOCK_FILE_FAIL":                                                  -4869,
	"TXHDB_ERR_FILE_NOT_A_REGULAR_FILE":                                              -5125,
	"TXHDB_ERR_FILE_MMAP_FAIL":                                                       -5381,
	"TXHDB_ERR_FILE_MUNMAP_FAIL":                                                     -5637,
	"TXHDB_ERR_FILE_CLOSE_FAIL":                                                      -5893,
	"TXHDB_ERR_FILE_SPACE_NOT_ENOUGH_IN_HEAD":                                        -6149,
	"TXHDB_ERR_FILE_FTRUNCATE_FAIL":                                                  -6405,
	"TXHDB_ERR_FILE_INCONSISTANT_FILE_SIZE":                                          -6661,
	"TXHDB_ERR_FILE_MSIZ_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET":                         -6917,
	"TXHDB_ERR_FILE_MSIZ_CHANGE_NOT_PERMIT":                                          -7173,
	"TXHDB_ERR_FILE_FSTAT_FAIL":                                                      -7429,
	"TXHDB_ERR_FILE_MSYNC_FAIL":                                                      -7685,
	"TXHDB_ERR_FILE_FSYNC_FAIL":                                                      -7941,
	"TXHDB_ERR_FILE_FCNTL_LOCK_FILE_FAIL":                                            -8197,
	"TXHDB_ERR_FILE_FCNTL_UNLOCK_FILE_FAIL":                                          -8453,
	"TXHDB_ERR_FILE_PREAD_FAIL_WITH_SPECIFIED_ERRNO":                                 -8709,
	"TXHDB_ERR_FILE_PREAD_FAIL_WITH_UNSPECIFIED_ERRNO":                               -8965,
	"TXHDB_ERR_FILE_PWRITE_FAIL_WITH_SPECIFIED_ERRNO":                                -9221,
	"TXHDB_ERR_FILE_PWRITE_FAIL_WITH_UNSPECIFIED_ERRNO":                              -9477,
	"TXHDB_ERR_FILE_READ_EXCEED_FILE_BOUNDARY":                                       -9733,
	"TXHDB_ERR_FILE_READ_FAIL_DURING_COPY":                                           -9989,
	"TXHDB_ERR_FILE_WRITE_FAIL_DURING_COPY":                                          -10245,
	"TXHDB_ERR_FILE_INVALID_FREE_BLOCK_POOL_METADATA":                                -10501,
	"TXHDB_ERR_FILE_INVALID_MAGIC":                                                   -10757,
	"TXHDB_ERR_FILE_INVALID_LIBRARY_VERSION":                                         -11013,
	"TXHDB_ERR_FILE_INVALID_LIBRARY_REVISION":                                        -11269,
	"TXHDB_ERR_FILE_INVALID_FORMAT_VERSION":                                          -11525,
	"TXHDB_ERR_FILE_INVALID_EXTDATA_FORMAT_VERSION":                                  -11781,
	"TXHDB_ERR_FILE_INVALID_DBTYPE":                                                  -12037,
	"TXHDB_ERR_FILE_HEAD_CRC_UNMATCH":                                                -12293,
	"TXHDB_ERR_FILE_INVALID_METADATA":                                                -12549,
	"TXHDB_ERR_FILE_INVALID_HEADLEN":                                                 -12805,
	"TXHDB_ERR_FILE_DESERIAL_HEAD_SPACE_NOT_ENOUGH":                                  -13061,
	"TXHDB_ERR_FILE_SERIAL_HEAD_SPACE_NOT_ENOUGH":                                    -13317,
	"TXHDB_ERR_FILE_DESERIAL_STAT_SPACE_NOT_ENOUGH":                                  -13573,
	"TXHDB_ERR_FILE_SERIAL_STAT_SPACE_NOT_ENOUGH":                                    -13829,
	"TXHDB_ERR_FILE_SERIAL_FREE_BLOCK_LIST_INFO_WRONG_BUFFLEN":                       -14085,
	"TXHDB_ERR_FILE_IN_EXCEPTIONAL_STATUS":                                           -14341,
	"TXHDB_ERR_DB_NOT_OPENED":                                                        -14597,
	"TXHDB_ERR_DB_WRITE_NOT_PERMIT":                                                  -14853,
	"TXHDB_ERR_INVALID_OFFSET_FROM_BUCKET":                                           -15109,
	"TXHDB_ERR_READ_EXTDATA_EXCEED_BUFF_LENGTH":                                      -15365,
	"TXHDB_ERR_WRITE_EXTDATA_EXCEED_BUFF_LENGTH":                                     -15621,
	"TXHDB_ERR_FREE_BLOCK_IS_READ_WHEN_GETTING_RECORD":                               -15877,
	"TXHDB_ERR_INVALID_KEY_DATABLOCK_NUM":                                            -16133,
	"TXHDB_ERR_INVALID_VALUE_DATABLOCK_NUM":                                          -16389,
	"TXHDB_ERR_GET_RECORD_EXCEED_BUFF_LENGTH":                                        -16645,
	"TXHDB_ERR_COMPRESSION_FAIL":                                                     -16901,
	"TXHDB_ERR_DECOMPRESSION_FAIL":                                                   -17157,
	"TXHDB_ERR_INVALID_OFFSETINEXTDATA_AND_SIZE_WHEN_UPDATING_EXTDATA":               -17413,
	"TXHDB_ERR_UNEXPECTED_FREEBLOCK":                                                 -17669,
	"TXHDB_ERR_VALUE_APOW_LESSER_THAN_KEY_APOW":                                      -17925,
	"TXHDB_ERR_DUPLICATED_FILE_PATH":                                                 -18181,
	"TXHDB_ERR_INVALID_KEY_HEAD_SIZE_IN_TXHDB_META":                                  -18437,
	"TXHDB_ERR_INVALID_FILE_SIZE":                                                    -18693,
	"TXHDB_ERR_INVALID_FREE_BLOCK_SIZE":                                              -18949,
	"TXHDB_ERR_MMAP_MEMSIZE_CHANGE_NOT_PERMITTED":                                    -19205,
	"TXHDB_ERR_NEW_FILE_OBJ_FAIL":                                                    -19461,
	"TXHDB_ERR_RECORD_KEY_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET":                 -19717,
	"TXHDB_ERR_RECORD_VALUE_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET":               -19973,
	"TXHDB_ERR_RECORD_OFFSET_LESSER_THAN_TXHDB_WHOLE_REC_OFFSET":                     -20229,
	"TXHDB_ERR_KEY_BUFFSIZE_LESSER_THAN_KEY_HEADSIZE":                                -20485,
	"TXHDB_ERR_VALUE_BUFFSIZE_LESSER_THAN_VALUE_HEADSIZE":                            -20741,
	"TXHDB_ERR_RECORD_SIZE_LESSER_THAN_KEY_HEADSIZE":                                 -20997,
	"TXHDB_ERR_INVALID_BLOCK_MAGIC":                                                  -21253,
	"TXHDB_ERR_INVALID_FREE_BLOCK_MAGIC":                                             -21509,
	"TXHDB_ERR_INVALID_KEYMAGIC":                                                     -21765,
	"TXHDB_ERR_INVALID_KEYSPLMAGIC":                                                  -22021,
	"TXHDB_ERR_INVALID_VALMAGIC":                                                     -22277,
	"TXHDB_ERR_INVALID_VALSPLMAGIC":                                                  -22533,
	"TXHDB_ERR_UNSUPPORTED_KEY_FORMAT_VERSION":                                       -22789,
	"TXHDB_ERR_UNSUPPORTED_KEY_SPLBLOCK_FORMAT_VERSION":                              -23045,
	"TXHDB_ERR_UNSUPPORTED_VALUE_FORMAT_VERSION":                                     -23301,
	"TXHDB_ERR_UNSUPPORTED_VALUE_SPLBLOCK_FORMAT_VERSION":                            -23557,
	"TXHDB_ERR_UNSUPPORTED_FREE_BLOCK_FORMAT_VERSION":                                -23813,
	"TXHDB_ERR_KEY_HEAD_CRC_UNMATCH":                                                 -24069,
	"TXHDB_ERR_KEY_SPLBLOCK_HEAD_CRC_UNMATCH":                                        -24325,
	"TXHDB_ERR_VALUE_HEAD_CRC_UNMATCH":                                               -24581,
	"TXHDB_ERR_VALUE_SPLBLOCK_HEAD_CRC_UNMATCH":                                      -24837,
	"TXHDB_ERR_FREE_BLOCK_HEAD_CRC_UNMATCH":                                          -25093,
	"TXHDB_ERR_FREE_BLOCK_LIST_INFO_CRC_UNMATCH":                                     -25349,
	"TXHDB_ERR_GET_KEY_READ_BUFFER_FAIL":                                             -25605,
	"TXHDB_ERR_GET_VALUE_READ_BUFFER_FAIL":                                           -25861,
	"TXHDB_ERR_GET_LRU_VALUE_BUFFER_FAIL":                                            -26117,
	"TXHDB_ERR_GET_EXTDATA_READ_BUFFER_FAIL":                                         -26373,
	"TXHDB_ERR_KEY_BLOCK_BODYSIZE_GREATER_THAN_KEY_BODYSIZE":                         -26629,
	"TXHDB_ERR_VALUE_BLOCK_BODYSIZE_GREATER_THAN_VALUE_BODYSIZE":                     -26885,
	"TXHDB_ERR_NULL_RECORD_POINTER":                                                  -27141,
	"TXHDB_ERR_NULL_RECORD_WRITE_BUFF":                                               -27397,
	"TXHDB_ERR_SERIALIZE_RECORD_KEY_HEAD":                                            -27653,
	"TXHDB_ERR_INVALID_IDX_IN_STAT_NUMS_ARRAY":                                       -27909,
	"TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_KEYNUMS":                                      -28165,
	"TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_VALNUMS":                                      -28421,
	"TXHDB_ERR_PRINT_SPACE_NOT_ENOUGH":                                               -28677,
	"TXHDB_ERR_LRU_SHIFTIN_NOT_ENOUGH_MEMORY":                                        -28933,
	"TXHDB_ERR_LRU_SHIFTIN_NO_MORE_LRU_NODE":                                         -29189,
	"TXHDB_ERR_LRU_ADJUST_NO_MORE_LRU_NODE":                                          -29445,
	"TXHDB_ERR_LRU_SHIFTOUT_RECORD_ALREADY_OUTSIDE_OF_MEMORY":                        -29701,
	"TXHDB_ERR_FILE_EXTDATA_LENGTH_CRC_UNMATCH":                                      -29957,
	"TXHDB_ERR_FILE_EXTDATA_INVALID_LENGTH":                                          -30213,
	"TXHDB_ERR_INVALID_VALUE_HEAD_SIZE_IN_TXHDB_META":                                -30469,
	"TXHDB_ERR_INVALID_SPLITDATABLOCK_HEAD_SIZE_IN_TXHDB_META":                       -30725,
	"TXHDB_ERR_KEY_BUCKETIDX_UNMATCH":                                                -30981,
	"TXHDB_ERR_FILE_WRITE_SIZE_INVALID":                                              -31237,
	"TXHDB_ERR_MODIFY_STAT_UNSUPPORTED_OPERATION_TYPE":                               -31493,
	"TXHDB_ERR_INVALID_EXTDATAMAGIC":                                                 -31749,
	"TXHDB_ERR_INVALID_INTERNAL_LIST_TAIL_DURING_POP_LRU_NODELIST":                   -32005,
	"TXHDB_ERR_GET_LRUNODE_FAIL":                                                     -32261,
	"TXHDB_ERR_LRUNODE_INVALID_FLAG":                                                 -32517,
	"TXHDB_ERR_INVALID_FREE_BLOCK_NUM_TOO_MANY_FREE_BLOCKS":                          -32773,
	"TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_NOPADDING_SIZE_KEYNUMS":                       -33029,
	"TXHDB_ERR_INVALID_ELEMNUM_OF_STAT_NOPADDING_SIZE_VALNUMS":                       -33285,
	"TXHDB_ERR_ADD_LSIZE_EXCEEDS_MAX_TSD_VALUE_BUFF_SIZE":                            -33541,
	"TXHDB_ERR_INTERNAL_CONSTANTS_ILLEGAL":                                           -33797,
	"TXHDB_ERR_TOO_BIG_KEY_BIZ_SIZE":                                                 -34053,
	"TXHDB_ERR_TOO_BIG_VALUE_BIZ_SIZE":                                               -34309,
	"TXHDB_ERR_INDEX_NO_EXIST":                                                       -34565,
	"TXHDB_ERR_INVALID_FREE_BLOCK_BASESIZE":                                          -34821,
	"TXHDB_ERR_CANNOT_CREATE_MMAPSHM_BECAUSE_SHM_ALREADY_EXISTED":                    -35077,
	"TXHDB_ERR_INVALID_GENSHM_KEY":                                                   -35333,
	"TXHDB_ERR_GENSHM_GET_FAIL":                                                      -35589,
	"TXHDB_ERR_GENSHM_CREATE_FAIL":                                                   -35845,
	"TXHDB_ERR_GENSHM_STAT_FAIL":                                                     -36101,
	"TXHDB_ERR_GENSHM_DOES_NOT_EXIST":                                                -36357,
	"TXHDB_ERR_GENSHM_ATTACH_FAIL_BECAUSE_IT_IS_ALREADY_ATTACHED_BY_OTHER_PROCESSES": -36613,
	"TXHDB_ERR_GENSHM_ATTACH_FAIL":                                                   -36869,
	"TXHDB_ERR_FILE_INCONSISTANT_MSIZE":                                              -37125,
	"TXHDB_ERR_INVALID_TCAP_GENSHM_MAGIC":                                            -37381,
	"TXHDB_ERR_GENSHM_FIXED_HEAD_BUFFLEN_UNMATCH":                                    -37637,
	"TXHDB_ERR_GENSHM_INVALID_HEADLEN":                                               -37893,
	"TXHDB_ERR_GENSHM_HEAD_CRC_UNMATCH":                                              -38149,
	"TXHDB_ERR_GENSHM_HEAD_INVALID_VERSION":                                          -38405,
	"TXHDB_ERR_GENSHM_INVALID_FILETYPE":                                              -38661,
	"TXHDB_ERR_GET_IPV4ADDR_FAIL":                                                    -38917,
	"TXHDB_ERR_NO_VALID_IPV4ADDR_EXISTS":                                             -39173,
	"TXHDB_ERR_TRANSFER_IPV4ADDR_FAIL":                                               -39429,
	"TXHDB_ERR_FILE_EXCEEDS_LSIZE_LIMIT":                                             -39685,
	"TXHDB_ERR_GENSHM_DETACH_FAIL":                                                   -39941,
	"TXHDB_ERR_TXHDB_HEAD_PARAMETERS_ERROR":                                          -40197,
	"TXHDB_ERR_TXHDB_HEAD_OLD_VERSION":                                               -40453,
	"TXHDB_ERR_TXHDB_SHM_COREINFO_UNMATCH":                                           -40709,
	"TXHDB_ERR_TXHDB_SHM_EXTDATA_UNMATCH":                                            -40965,
	"TXHDB_ERR_TXHDB_EXTDATA_CHECK_ERROR":                                            -41221,
	"TXHDB_ERR_CHUNK_BUFFS_CANNOT_BE_ALLOCED_IF_THEY_ARE_NOT_RELEASED":               -41477,
	"TXHDB_ERR_ALLOCATE_MEMORY_FAIL":                                                 -41733,
	"TXHDB_ERR_INVALID_CHUNK_RW_MANNER":                                              -41989,
	"TXHDB_ERR_FILE_PREAD_NOT_COMPLETE":                                              -42245,
	"TXHDB_ERR_FILE_PWRITE_NOT_COMPLETE":                                             -42501,
	"TXHDB_ERR_KEY_ONEBLOCK_BUT_NEXT_NOTNULL":                                        -42757,
	"TXHDB_ERR_VALUE_ONEBLOCK_BUT_NEXT_NOTNULL":                                      -43013,
	"TXHDB_ERR_VARINT_FORMAT_ERROR":                                                  -43269,
	"TXHDB_ERR_TXSTAT_ERROR":                                                         -43525,
	"SVR_ERR_FAIL_ROUTE":                                                             -269,
	"SVR_ERR_FAIL_TIMEOUT":                                                           -525,
	"SVR_ERR_FAIL_SHORT_BUFF":                                                        -781,
	"SVR_ERR_FAIL_SYSTEM_BUSY":                                                       -1037,
	"SVR_ERR_FAIL_RECORD_EXIST":                                                      -1293,
	"SVR_ERR_FAIL_INVALID_FIELD_NAME":                                                -1549,
	"SVR_ERR_FAIL_VALUE_OVER_MAX_LEN":                                                -1805,
	"SVR_ERR_FAIL_INVALID_FIELD_TYPE":                                                -2061,
	"SVR_ERR_FAIL_SYNC_WRITE":                                                        -2317,
	"SVR_ERR_FAIL_WRITE_RECORD":                                                      -2573,
	"SVR_ERR_FAIL_DELETE_RECORD":                                                     -2829,
	"SVR_ERR_FAIL_DATA_ENGINE":                                                       -3085,
	"SVR_ERR_FAIL_RESULT_OVERFLOW":                                                   -3341,
	"SVR_ERR_FAIL_INVALID_OPERATION":                                                 -3597,
	"SVR_ERR_FAIL_INVALID_SUBSCRIPT":                                                 -3853,
	"SVR_ERR_FAIL_INVALID_INDEX":                                                     -4109,
	"SVR_ERR_FAIL_OVER_MAXE_FIELD_NUM":                                               -4365,
	"SVR_ERR_FAIL_MISS_KEY_FIELD":                                                    -4621,
	"SVR_ERR_FAIL_NEED_SIGNUP":                                                       -4877,
	"SVR_ERR_FAIL_CROSS_AUTH":                                                        -5133,
	"SVR_ERR_FAIL_SIGNUP_FAIL":                                                       -5389,
	"SVR_ERR_FAIL_SIGNUP_INVALID":                                                    -5645,
	"SVR_ERR_FAIL_SIGNUP_INIT":                                                       -5901,
	"SVR_ERR_FAIL_LIST_FULL":                                                         -6157,
	"SVR_ERR_FAIL_LOW_VERSION":                                                       -6413,
	"SVR_ERR_FAIL_HIGH_VERSION":                                                      -6669,
	"SVR_ERR_FAIL_INVALID_RESULT_FLAG":                                               -6925,
	"SVR_ERR_FAIL_PROXY_STOPPING":                                                    -7181,
	"SVR_ERR_FAIL_SVR_READONLY":                                                      -7437,
	"SVR_ERR_FAIL_SVR_READONLY_BECAUSE_IN_SLAVE_MODE":                                -7693,
	"SVR_ERR_FAIL_INVALID_VERSION":                                                   -7949,
	"SVR_ERR_FAIL_SYSTEM_ERROR":                                                      -8205,
	"SVR_ERR_FAIL_OVERLOAD":                                                          -8461,
	"SVR_ERR_FAIL_NOT_ENOUGH_DADADISK_SPACE":                                         -8717,
	"SVR_ERR_FAIL_NOT_ENOUGH_ULOGDISK_SPACE":                                         -8973,
	"SVR_ERR_FAIL_UNSUPPORTED_PROTOCOL_MAGIC":                                        -9229,
	"SVR_ERR_FAIL_UNSUPPORTED_PROTOCOL_CMD":                                          -9485,
	"SVR_ERR_FAIL_HIGH_TABLE_META_VERSION":                                           -9741,
	"SVR_ERR_FAIL_MERGE_VALUE_FIELD":                                                 -9997,
	"SVR_ERR_FAIL_CUT_VALUE_FIELD":                                                   -10253,
	"SVR_ERR_FAIL_PACK_FIELD":                                                        -10509,
	"SVR_ERR_FAIL_UNPACK_FIELD":                                                      -10765,
	"SVR_ERR_FAIL_LOW_API_VERSION":                                                   -11021,
	"SVR_ERR_COMMAND_AND_TABLE_TYPE_IS_MISMATCH":                                     -11277,
	"SVR_ERR_FAIL_TO_FIND_CACHE":                                                     -11533,
	"SVR_ERR_FAIL_TO_FIND_META":                                                      -11789,
	"SVR_ERR_FAIL_TO_GET_CURSOR":                                                     -12045,
	"SVR_ERR_FAIL_OUT_OF_USER_DEF_RANGE":                                             -12301,
	"SVR_ERR_INVALID_ARGUMENTS":                                                      -12557,
	"SVR_ERR_SLAVE_READ_INVALID":                                                     -12813,
	"SVR_ERR_NULL_CACHE":                                                             -13069,
	"SVR_ERR_NULL_CURSOR":                                                            -13325,
	"SVR_ERR_METALIB_VERSION_LESS_THAN_ENTRY_VERSION":                                -13581,
	"SVR_ERR_INVALID_SELECT_ID_FOR_UNION":                                            -13837,
	"SVR_ERR_CAN_NOT_FIND_SELECT_ENTRY_FOR_UNION":                                    -14093,
	"SVR_ERR_FAIL_DOCUMENT_PACK_VERSION":                                             -14349,
	"SVR_ERR_TCAPSVR_PROCESS_NOT_NORMAL":                                             -14605,
	"SVR_ERR_TBUSD_PROCESS_NOT_NORMAL":                                               -14861,
	"SVR_ERR_INVALID_ARRAY_COUNT":                                                    -15117,
	"SVR_ERR_REJECT_REQUEST_BECAUSE_ROUTE_IN_REJECT_STATUS":                          -15373,
	"SVR_ERR_FAIL_GET_ROUTE_HASH_CODE":                                               -15629,
	"TCAPDB_ERR_INVALID_PARAMS":                                                      -271,
	"PROXY_ERR_INVALID_PARAMS":                                                       -273,
	"PROXY_ERR_NO_NEED_ROUTE_BATCHGET_ACTION_MSG_WHEN_NODE_IS_IN_SYNC_STATUS":        -529,
	"PROXY_ERR_NO_NEED_ROUTE_WHEN_NODE_IS_IN_REJECT_STATUS":                          -785,
	"PROXY_ERR_PROBE_TIMEOUT":                                                        -1041,
	"PROXY_ERR_SYSTEM_ERROR":                                                         -1297,
	"PROXY_ERR_CONFIG_ERROR":                                                         -1553,
	"PROXY_ERR_OVER_MAX_NODE":                                                        -1809,
	"PROXY_ERR_INVALID_SPLIT_SIZE":                                                   -2065,
	"PROXY_ERR_INVALID_ROUTE_INDEX":                                                  -2321,
	"PROXY_ERR_CONNECT_SERVER":                                                       -2577,
	"PROXY_ERR_COMPOSE_MSG":                                                          -2833,
	"PROXY_ERR_ROUTE_MSG":                                                            -3089,
	"PROXY_ERR_SHORT_BUFFER":                                                         -3345,
	"PROXY_ERR_OVER_MAX_RECORD":                                                      -3601,
	"PROXY_ERR_INVALID_SERVICE_TABLE":                                                -3857,
	"PROXY_ERR_REGISTER_FAILED":                                                      -4113,
	"PROXY_ERR_CREATE_SESSION_HASH":                                                  -4369,
	"PROXY_ERR_WRONG_STATUS":                                                         -4625,
	"PROXY_ERR_UNPACK_MSG":                                                           -4881,
	"PROXY_ERR_PACK_MSG":                                                             -5137,
	"PROXY_ERR_SEND_MSG":                                                             -5393,
	"PROXY_ERR_ALLOCATE_MEMORY":                                                      -5649,
	"PROXY_ERR_PARSE_MSG":                                                            -5905,
	"PROXY_ERR_INVALID_MSG":                                                          -6161,
	"PROXY_ERR_FAILED_PROC_REQUEST_BECAUSE_NODE_IS_IN_SYNC_STASUS":                   -6417,
	"PROXY_ERR_KEY_FIELD_NUM_IS_ZERO":                                                -6673,
	"PROXY_ERR_LACK_OF_SOME_KEY_FIELDS":                                              -6929,
	"PROXY_ERR_FAILED_TO_FIND_NODE":                                                  -7185,
	"PROXY_ERR_INVALID_COMPRESS_TYPE":                                                -7441,
	"PROXY_ERR_REQUEST_OVERSPEED":                                                    -7697,
	"PROXY_ERR_SWIFT_TIMEOUT":                                                        -7953,
	"PROXY_ERR_SWIFT_ERROR":                                                          -8209,
	"PROXY_ERR_DIRECT_RESPONSE":                                                      -8465,
	"PROXY_ERR_INIT_TLOG":                                                            -8721,
	"PROXY_ERR_ASSISTANT_THREAD_NOT_RUN":                                             -8977,
	"CENTER_ERR_INVALID_PARAMS":                                                      -277,
	"CENTER_ERR_TABLE_ALREADY_EXIST":                                                 -533,
	"CENTER_ERR_TABLE_NOT_EXIST":                                                     -789,
	"DIR_ERR_SIGN_FAIL":                                                              -279,
	"DIR_ERR_LOW_VERSION":                                                            -535,
	"DIR_ERR_HIGH_VERSION":                                                           -791,
	"DIR_ERR_GET_DIR_SERVER_LIST":                                                    -1047,
	"DIR_ERR_APP_IS_NOT_FOUNT":                                                       -1303,
	"DIR_ERR_NOT_CONNECT_TCAPCENTER":                                                 -1559,
	"DIR_ERR_ZONE_IS_NOT_FOUNT":                                                      -1815,
	"DIR_ERR_HASH_TABLE_FAILED":                                                      -2071,
	"BSON_ERR_TYPE_IS_NOT_MATCH":                                                     -280,
	"BSON_ERR_INVALID_DATA_TYPE":                                                     -536,
	"BSON_ERR_INVALID_VALUE":                                                         -792,
	"BSON_ERR_BSON_TYPE_UNMATCH_TDR_TYPE":                                            -1048,
	"BSON_ERR_BSON_TYPE_IS_NOT_SUPPORT_BY_TCAPLUS":                                   -1304,
	"BSON_ERR_BSON_ARRAY_COUNT_IS_INVALID":                                           -1560,
	"BSON_ERR_FAILED_TO_PARSE":                                                       -1816,
	"BSON_ERR_INVALID_FIELD_NAME_LENGTH":                                             -2072,
	"BSON_ERR_INDEX_FIELD_NAME_NOT_EXIST_WITH_ARRAY_TYPE":                            -2328,
	"BSON_ERR_INVALID_ARRAY_INDEX":                                                   -2584,
	"BSON_ERR_TDR_META_LIB_IS_NULL":                                                  -2840,
	"BSON_ERR_MATCHED_COUNT_GREATER_THAN_ONE":                                        -3096,
	"BSON_ERR_NO_MATCHED":                                                            -3352,
	"BSON_ERR_GREATER_THAN_ARRAY_MAX_COUNT":                                          -3864,
	"BSON_ERR_BSON_EXCEPTION":                                                        -4120,
	"BSON_ERR_STD_EXCEPTION":                                                         -4376,
	"BSON_ERR_INVALID_KEY":                                                           -4632,
	"BSON_ERR_TDR_META_LIB_IS_INVALID":                                               -4888,
	"COMMON_ERR_INVALID_ARGUMENTS":                                                   -281,
	"COMMON_ERR_INVALID_MEMBER_VARIABLE_VALUE":                                       -537,
	"COMMON_ERR_SPINLOCK_INIT_FAIL":                                                  -793,
	"COMMON_ERR_SPINLOCK_DESTROY_FAIL":                                               -1049,
	"COMMON_ERR_COMPRESS_BUF_NOT_ENOUGH":                                             -1305,
	"COMMON_ERR_DECOMPRESS_BUF_NOT_ENOUGH":                                           -1561,
	"COMMON_ERR_DECOMPRESS_INVALID_INPUT":                                            -1817,
	"COMMON_ERR_CANNOT_FIND_COMPRESS_ALGORITHM":                                      -2073,
	"COMMON_ERR_CANNOT_FIND_DECOMPRESS_ALGORITHM":                                    -2329,
	"COMMON_ERR_COMPRESS_FAIL":                                                       -2585,
	"COMMON_ERR_DECOMPRESS_FAIL":                                                     -2841,
	"COMMON_ERR_INVALID_SWITCH_VALUE":                                                -3097,
	"COMMON_ERR_LINUX_SYSTEM_CALL_FAIL":                                              -3353,
	"COMMON_ERR_NOT_FIND_STAT_CACHE_VALUE":                                           -3609,
	"COMMON_ERR_LZO_CHECK_FAIL":                                                      -3865,
	"COMMON_INFO_DATA_NOT_MODIFIED":                                                  288,
	"MAX_MODULE_NUM":                                                                 26,
	"MAX_POSITIVE_ERR_CODE_NUM_PER_MODULE":                                           16,
	"MAX_NEGATIVE_ERR_CODE_NUM_PER_MODULE":                                           256,
	"GEN_ERR_SUC":                                                                    0,
	"GEN_ERR_ERR":                                                                    -256,
	"GEN_ERR_INVALID_ARGUMENTS":                                                      -257,
	"GEN_ERR_UNSUPPORT_OPERATION":                                                    -258,
	"GEN_ERR_NOT_ENOUGH_MEMORY":                                                      -259,
	"GEN_ERR_ECMGR_INVALID_MODULE_ID":                                                -512,
	"GEN_ERR_ECMGR_INVALID_ERROR_CODE":                                               -768,
	"GEN_ERR_ECMGR_NULL_ERROR_STRING":                                                -1024,
	"GEN_ERR_ECMGR_DUPLICATED_ERROR_CODE":                                            -1280,
	"GEN_ERR_TXLOG_NULL_POINTER_FROM_TSD":                                            -1536,
	"GEN_ERR_TABLE_READONLY":                                                         -1792,
	"LOC_ERR__0x00000202":                                                            -514,
	"LOC_ERR__0x00000302":                                                            -770,
	"LOC_ERR__0x00000402":                                                            -1026,
	"LOC_ERR__0x00000502":                                                            -1282,
	"LOC_ERR__0x00000602":                                                            -1538,
	"LOC_ERR__0x00000702":                                                            -1794,
	"LOC_ERR__0x00000802":                                                            -2050,
	"LOC_ERR__0x00000902":                                                            -2306,
	"LOC_ERR__0x00000A02":                                                            -2562,
	"LOC_ERR__0x00000B02":                                                            -2818,
	"LOC_ERR__0x00000C02":                                                            -3074,
	"LOC_ERR__0x00000D02":                                                            -3330,
	"LOC_ERR__0x00000E02":                                                            -3586,
	"LOC_ERR__0x00000F02":                                                            -3842,
	"LOC_ERR__0x00001002":                                                            -4098,
	"LOC_ERR__0x00001102":                                                            -4354,
	"LOC_ERR__0x00001202":                                                            -4610,
	"LOC_ERR__0x00001302":                                                            -4866,
	"LOC_ERR__0x00001402":                                                            -5122,
	"LOC_ERR__0x00001502":                                                            -5378,
	"LOC_ERR__0x00001602":                                                            -5634,
	"LOC_ERR__0x00001702":                                                            -5890,
	"LOC_ERR__0x00001802":                                                            -6146,
	"LOC_ERR__0x00001902":                                                            -6402,
	"LOC_ERR__0x00001A02":                                                            -6658,
	"LOC_ERR__0x00001B02":                                                            -6914,
	"LOC_ERR__0x00001C02":                                                            -7170,
	"LOC_ERR__0x00001D02":                                                            -7426,
	"LOC_ERR__0x00001E02":                                                            -7682,
	"LOC_ERR__0x00001F02":                                                            -7938,
	"LOC_ERR__0x00002002":                                                            -8194,
	"LOC_ERR__0x00002802":                                                            -10242,
	"LOC_ERR__0x00003002":                                                            -12290,
	"LOC_ERR__0x00003802":                                                            -14338,
	"LOC_ERR__0x00004002":                                                            -16386,
	"LOC_ERR__0x00004802":                                                            -18434,
	"LOC_ERR__0x00005002":                                                            -20482,
	"LOC_ERR__0x00005802":                                                            -22530,
	"LOC_ERR__0x00006002":                                                            -24578,
	"LOC_ERR__0x00006802":                                                            -26626,
	"LOC_ERR__0x00007002":                                                            -28674,
	"LOC_ERR__0x00007802":                                                            -30722,
	"LOC_ERR__0x00008002":                                                            -32770,
	"LOC_ERR__0x00008802":                                                            -34818,
	"LOC_ERR__0x00009002":                                                            -36866,
	"LOC_ERR__0x00009802":                                                            -38914,
	"LOC_ERR__0x0000A002":                                                            -40962,
	"LOC_ERR__0x0000A802":                                                            -43010,
	"LOC_ERR__0x0000B002":                                                            -45058,
	"LOC_ERR__0x0000B802":                                                            -47106,
	"LOC_ERR__0x0000C002":                                                            -49154,
	"LOC_ERR__0x0000C802":                                                            -51202,
	"LOC_ERR__0x0000FF02":                                                            -65282,
}

func (x TcaplusAPIErr) Enum() *TcaplusAPIErr {
	p := new(TcaplusAPIErr)
	*p = x
	return p
}
func (x TcaplusAPIErr) String() string {
	return proto.EnumName(TcaplusAPIErr_name, int32(x))
}
func (x *TcaplusAPIErr) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TcaplusAPIErr_value, data, "TcaplusAPIErr")
	if err != nil {
		return err
	}
	*x = TcaplusAPIErr(value)
	return nil
}
func (TcaplusAPIErr) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DBUserSevenSignUp struct {
	Appid            *int32  `protobuf:"varint,1,req,name=appid" json:"appid,omitempty"`
	Uin              *uint64 `protobuf:"varint,2,req,name=uin" json:"uin,omitempty"`
	LastSignTime     *uint32 `protobuf:"varint,3,opt,name=last_sign_time" json:"last_sign_time,omitempty"`
	SignNum          *uint32 `protobuf:"varint,4,opt,name=sign_num" json:"sign_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBUserSevenSignUp) Reset()                    { *m = DBUserSevenSignUp{} }
func (m *DBUserSevenSignUp) String() string            { return proto.CompactTextString(m) }
func (*DBUserSevenSignUp) ProtoMessage()               {}
func (*DBUserSevenSignUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DBUserSevenSignUp) GetAppid() int32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *DBUserSevenSignUp) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBUserSevenSignUp) GetLastSignTime() uint32 {
	if m != nil && m.LastSignTime != nil {
		return *m.LastSignTime
	}
	return 0
}

func (m *DBUserSevenSignUp) GetSignNum() uint32 {
	if m != nil && m.SignNum != nil {
		return *m.SignNum
	}
	return 0
}

type DBUserBestRecord struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Appid            *int32  `protobuf:"varint,2,req,name=appid" json:"appid,omitempty"`
	Rule             *string `protobuf:"bytes,3,req,name=rule" json:"rule,omitempty"`
	BestRecord       *string `protobuf:"bytes,4,opt,name=best_record" json:"best_record,omitempty"`
	BestScore        *int32  `protobuf:"varint,5,opt,name=best_score" json:"best_score,omitempty"`
	FinishTime       *int32  `protobuf:"varint,6,opt,name=finish_time" json:"finish_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBUserBestRecord) Reset()                    { *m = DBUserBestRecord{} }
func (m *DBUserBestRecord) String() string            { return proto.CompactTextString(m) }
func (*DBUserBestRecord) ProtoMessage()               {}
func (*DBUserBestRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DBUserBestRecord) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBUserBestRecord) GetAppid() int32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *DBUserBestRecord) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *DBUserBestRecord) GetBestRecord() string {
	if m != nil && m.BestRecord != nil {
		return *m.BestRecord
	}
	return ""
}

func (m *DBUserBestRecord) GetBestScore() int32 {
	if m != nil && m.BestScore != nil {
		return *m.BestScore
	}
	return 0
}

func (m *DBUserBestRecord) GetFinishTime() int32 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

type DBRoleActivity struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Appid            *uint32 `protobuf:"varint,2,req,name=appid" json:"appid,omitempty"`
	Signup           *string `protobuf:"bytes,3,opt,name=signup" json:"signup,omitempty"`
	Roulette         *string `protobuf:"bytes,4,opt,name=roulette" json:"roulette,omitempty"`
	MissionLottery   *string `protobuf:"bytes,5,opt,name=mission_lottery" json:"mission_lottery,omitempty"`
	NewerGift        *string `protobuf:"bytes,6,opt,name=newer_gift" json:"newer_gift,omitempty"`
	BrokeAward       *string `protobuf:"bytes,7,opt,name=broke_award" json:"broke_award,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBRoleActivity) Reset()                    { *m = DBRoleActivity{} }
func (m *DBRoleActivity) String() string            { return proto.CompactTextString(m) }
func (*DBRoleActivity) ProtoMessage()               {}
func (*DBRoleActivity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DBRoleActivity) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBRoleActivity) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *DBRoleActivity) GetSignup() string {
	if m != nil && m.Signup != nil {
		return *m.Signup
	}
	return ""
}

func (m *DBRoleActivity) GetRoulette() string {
	if m != nil && m.Roulette != nil {
		return *m.Roulette
	}
	return ""
}

func (m *DBRoleActivity) GetMissionLottery() string {
	if m != nil && m.MissionLottery != nil {
		return *m.MissionLottery
	}
	return ""
}

func (m *DBRoleActivity) GetNewerGift() string {
	if m != nil && m.NewerGift != nil {
		return *m.NewerGift
	}
	return ""
}

func (m *DBRoleActivity) GetBrokeAward() string {
	if m != nil && m.BrokeAward != nil {
		return *m.BrokeAward
	}
	return ""
}

type DBUserAccount2IdInfo struct {
	OpenID           *string `protobuf:"bytes,1,req,name=OpenID" json:"OpenID,omitempty"`
	Uin              *uint64 `protobuf:"varint,2,opt,name=Uin" json:"Uin,omitempty"`
	GameAppID        *int32  `protobuf:"varint,3,opt,name=GameAppID" json:"GameAppID,omitempty"`
	AddTime          *uint32 `protobuf:"varint,4,opt,name=AddTime" json:"AddTime,omitempty"`
	Status           *int32  `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty"`
	BlockTime        *uint32 `protobuf:"varint,6,opt,name=BlockTime" json:"BlockTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBUserAccount2IdInfo) Reset()                    { *m = DBUserAccount2IdInfo{} }
func (m *DBUserAccount2IdInfo) String() string            { return proto.CompactTextString(m) }
func (*DBUserAccount2IdInfo) ProtoMessage()               {}
func (*DBUserAccount2IdInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DBUserAccount2IdInfo) GetOpenID() string {
	if m != nil && m.OpenID != nil {
		return *m.OpenID
	}
	return ""
}

func (m *DBUserAccount2IdInfo) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBUserAccount2IdInfo) GetGameAppID() int32 {
	if m != nil && m.GameAppID != nil {
		return *m.GameAppID
	}
	return 0
}

func (m *DBUserAccount2IdInfo) GetAddTime() uint32 {
	if m != nil && m.AddTime != nil {
		return *m.AddTime
	}
	return 0
}

func (m *DBUserAccount2IdInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DBUserAccount2IdInfo) GetBlockTime() uint32 {
	if m != nil && m.BlockTime != nil {
		return *m.BlockTime
	}
	return 0
}

type DBUserAccount2IdNew struct {
	OpenID               *string `protobuf:"bytes,1,req,name=OpenID" json:"OpenID,omitempty"`
	PlatID               *int32  `protobuf:"varint,2,req,name=PlatID" json:"PlatID,omitempty"`
	Uin                  *uint64 `protobuf:"varint,3,opt,name=Uin" json:"Uin,omitempty"`
	GameAppID            *int32  `protobuf:"varint,4,opt,name=GameAppID" json:"GameAppID,omitempty"`
	AddTime              *uint32 `protobuf:"varint,5,opt,name=AddTime" json:"AddTime,omitempty"`
	Status               *int32  `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty"`
	BlockTime            *uint32 `protobuf:"varint,7,opt,name=BlockTime" json:"BlockTime,omitempty"`
	HealthBlockBeginTime *uint32 `protobuf:"varint,8,opt,name=HealthBlockBeginTime" json:"HealthBlockBeginTime,omitempty"`
	HealthBlockEndTime   *uint32 `protobuf:"varint,9,opt,name=HealthBlockEndTime" json:"HealthBlockEndTime,omitempty"`
	HealthBlockMsg       *string `protobuf:"bytes,10,opt,name=HealthBlockMsg" json:"HealthBlockMsg,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *DBUserAccount2IdNew) Reset()                    { *m = DBUserAccount2IdNew{} }
func (m *DBUserAccount2IdNew) String() string            { return proto.CompactTextString(m) }
func (*DBUserAccount2IdNew) ProtoMessage()               {}
func (*DBUserAccount2IdNew) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DBUserAccount2IdNew) GetOpenID() string {
	if m != nil && m.OpenID != nil {
		return *m.OpenID
	}
	return ""
}

func (m *DBUserAccount2IdNew) GetPlatID() int32 {
	if m != nil && m.PlatID != nil {
		return *m.PlatID
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetGameAppID() int32 {
	if m != nil && m.GameAppID != nil {
		return *m.GameAppID
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetAddTime() uint32 {
	if m != nil && m.AddTime != nil {
		return *m.AddTime
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetBlockTime() uint32 {
	if m != nil && m.BlockTime != nil {
		return *m.BlockTime
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetHealthBlockBeginTime() uint32 {
	if m != nil && m.HealthBlockBeginTime != nil {
		return *m.HealthBlockBeginTime
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetHealthBlockEndTime() uint32 {
	if m != nil && m.HealthBlockEndTime != nil {
		return *m.HealthBlockEndTime
	}
	return 0
}

func (m *DBUserAccount2IdNew) GetHealthBlockMsg() string {
	if m != nil && m.HealthBlockMsg != nil {
		return *m.HealthBlockMsg
	}
	return ""
}

type DBUserId2AccountInfo struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=Uin" json:"Uin,omitempty"`
	GameAppID        *int32  `protobuf:"varint,2,req,name=GameAppID" json:"GameAppID,omitempty"`
	AppID            *string `protobuf:"bytes,3,opt,name=AppID" json:"AppID,omitempty"`
	OpenID           *string `protobuf:"bytes,4,opt,name=OpenID" json:"OpenID,omitempty"`
	AccessToken      *string `protobuf:"bytes,5,opt,name=AccessToken" json:"AccessToken,omitempty"`
	Pf               *string `protobuf:"bytes,6,opt,name=Pf" json:"Pf,omitempty"`
	PfKey            *string `protobuf:"bytes,7,opt,name=PfKey" json:"PfKey,omitempty"`
	PayToken         *string `protobuf:"bytes,8,opt,name=PayToken" json:"PayToken,omitempty"`
	ClientType       *int32  `protobuf:"varint,9,opt,name=ClientType" json:"ClientType,omitempty"`
	AccountType      *int32  `protobuf:"varint,10,opt,name=AccountType" json:"AccountType,omitempty"`
	AddTime          *uint32 `protobuf:"varint,11,opt,name=AddTime" json:"AddTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBUserId2AccountInfo) Reset()                    { *m = DBUserId2AccountInfo{} }
func (m *DBUserId2AccountInfo) String() string            { return proto.CompactTextString(m) }
func (*DBUserId2AccountInfo) ProtoMessage()               {}
func (*DBUserId2AccountInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DBUserId2AccountInfo) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBUserId2AccountInfo) GetGameAppID() int32 {
	if m != nil && m.GameAppID != nil {
		return *m.GameAppID
	}
	return 0
}

func (m *DBUserId2AccountInfo) GetAppID() string {
	if m != nil && m.AppID != nil {
		return *m.AppID
	}
	return ""
}

func (m *DBUserId2AccountInfo) GetOpenID() string {
	if m != nil && m.OpenID != nil {
		return *m.OpenID
	}
	return ""
}

func (m *DBUserId2AccountInfo) GetAccessToken() string {
	if m != nil && m.AccessToken != nil {
		return *m.AccessToken
	}
	return ""
}

func (m *DBUserId2AccountInfo) GetPf() string {
	if m != nil && m.Pf != nil {
		return *m.Pf
	}
	return ""
}

func (m *DBUserId2AccountInfo) GetPfKey() string {
	if m != nil && m.PfKey != nil {
		return *m.PfKey
	}
	return ""
}

func (m *DBUserId2AccountInfo) GetPayToken() string {
	if m != nil && m.PayToken != nil {
		return *m.PayToken
	}
	return ""
}

func (m *DBUserId2AccountInfo) GetClientType() int32 {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return 0
}

func (m *DBUserId2AccountInfo) GetAccountType() int32 {
	if m != nil && m.AccountType != nil {
		return *m.AccountType
	}
	return 0
}

func (m *DBUserId2AccountInfo) GetAddTime() uint32 {
	if m != nil && m.AddTime != nil {
		return *m.AddTime
	}
	return 0
}

type DBNQGUserScore struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	SysId            *int32  `protobuf:"varint,2,req,name=sys_id" json:"sys_id,omitempty"`
	Score            *int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Win              *int32  `protobuf:"varint,4,opt,name=win" json:"win,omitempty"`
	Lose             *int32  `protobuf:"varint,5,opt,name=lose" json:"lose,omitempty"`
	Equ              *int32  `protobuf:"varint,6,opt,name=equ" json:"equ,omitempty"`
	Esc              *int32  `protobuf:"varint,7,opt,name=esc" json:"esc,omitempty"`
	Invalid          *int32  `protobuf:"varint,8,opt,name=invalid" json:"invalid,omitempty"`
	Time             *int64  `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGUserScore) Reset()                    { *m = DBNQGUserScore{} }
func (m *DBNQGUserScore) String() string            { return proto.CompactTextString(m) }
func (*DBNQGUserScore) ProtoMessage()               {}
func (*DBNQGUserScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DBNQGUserScore) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGUserScore) GetSysId() int32 {
	if m != nil && m.SysId != nil {
		return *m.SysId
	}
	return 0
}

func (m *DBNQGUserScore) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *DBNQGUserScore) GetWin() int32 {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return 0
}

func (m *DBNQGUserScore) GetLose() int32 {
	if m != nil && m.Lose != nil {
		return *m.Lose
	}
	return 0
}

func (m *DBNQGUserScore) GetEqu() int32 {
	if m != nil && m.Equ != nil {
		return *m.Equ
	}
	return 0
}

func (m *DBNQGUserScore) GetEsc() int32 {
	if m != nil && m.Esc != nil {
		return *m.Esc
	}
	return 0
}

func (m *DBNQGUserScore) GetInvalid() int32 {
	if m != nil && m.Invalid != nil {
		return *m.Invalid
	}
	return 0
}

func (m *DBNQGUserScore) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type DBNQGUserInfo struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	SysId            *int32  `protobuf:"varint,2,req,name=sys_id" json:"sys_id,omitempty"`
	Info             *string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGUserInfo) Reset()                    { *m = DBNQGUserInfo{} }
func (m *DBNQGUserInfo) String() string            { return proto.CompactTextString(m) }
func (*DBNQGUserInfo) ProtoMessage()               {}
func (*DBNQGUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DBNQGUserInfo) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGUserInfo) GetSysId() int32 {
	if m != nil && m.SysId != nil {
		return *m.SysId
	}
	return 0
}

func (m *DBNQGUserInfo) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

type DBNQGUserCoin struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	SysId            *int32  `protobuf:"varint,2,req,name=sys_id" json:"sys_id,omitempty"`
	Coin             *int64  `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	Ext_1            *int64  `protobuf:"varint,4,opt,name=ext_1" json:"ext_1,omitempty"`
	Ext_2            *int64  `protobuf:"varint,5,opt,name=ext_2" json:"ext_2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGUserCoin) Reset()                    { *m = DBNQGUserCoin{} }
func (m *DBNQGUserCoin) String() string            { return proto.CompactTextString(m) }
func (*DBNQGUserCoin) ProtoMessage()               {}
func (*DBNQGUserCoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DBNQGUserCoin) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGUserCoin) GetSysId() int32 {
	if m != nil && m.SysId != nil {
		return *m.SysId
	}
	return 0
}

func (m *DBNQGUserCoin) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *DBNQGUserCoin) GetExt_1() int64 {
	if m != nil && m.Ext_1 != nil {
		return *m.Ext_1
	}
	return 0
}

func (m *DBNQGUserCoin) GetExt_2() int64 {
	if m != nil && m.Ext_2 != nil {
		return *m.Ext_2
	}
	return 0
}

type DBNQGNewerGift struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Appid            *int32  `protobuf:"varint,2,req,name=appid" json:"appid,omitempty"`
	Subid            *int32  `protobuf:"varint,3,req,name=subid" json:"subid,omitempty"`
	LastLoginTime    *uint64 `protobuf:"varint,4,opt,name=last_login_time" json:"last_login_time,omitempty"`
	GiftDelivered    *int32  `protobuf:"varint,5,opt,name=gift_delivered" json:"gift_delivered,omitempty"`
	Reserve1         *int32  `protobuf:"varint,6,opt,name=reserve1" json:"reserve1,omitempty"`
	Reserve2         *int32  `protobuf:"varint,7,opt,name=reserve2" json:"reserve2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGNewerGift) Reset()                    { *m = DBNQGNewerGift{} }
func (m *DBNQGNewerGift) String() string            { return proto.CompactTextString(m) }
func (*DBNQGNewerGift) ProtoMessage()               {}
func (*DBNQGNewerGift) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DBNQGNewerGift) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGNewerGift) GetAppid() int32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *DBNQGNewerGift) GetSubid() int32 {
	if m != nil && m.Subid != nil {
		return *m.Subid
	}
	return 0
}

func (m *DBNQGNewerGift) GetLastLoginTime() uint64 {
	if m != nil && m.LastLoginTime != nil {
		return *m.LastLoginTime
	}
	return 0
}

func (m *DBNQGNewerGift) GetGiftDelivered() int32 {
	if m != nil && m.GiftDelivered != nil {
		return *m.GiftDelivered
	}
	return 0
}

func (m *DBNQGNewerGift) GetReserve1() int32 {
	if m != nil && m.Reserve1 != nil {
		return *m.Reserve1
	}
	return 0
}

func (m *DBNQGNewerGift) GetReserve2() int32 {
	if m != nil && m.Reserve2 != nil {
		return *m.Reserve2
	}
	return 0
}

type DBNQGTrunkMission struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Rule             *string `protobuf:"bytes,2,req,name=rule" json:"rule,omitempty"`
	Level            *string `protobuf:"bytes,3,req,name=level" json:"level,omitempty"`
	Missions         *string `protobuf:"bytes,4,opt,name=missions" json:"missions,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGTrunkMission) Reset()                    { *m = DBNQGTrunkMission{} }
func (m *DBNQGTrunkMission) String() string            { return proto.CompactTextString(m) }
func (*DBNQGTrunkMission) ProtoMessage()               {}
func (*DBNQGTrunkMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DBNQGTrunkMission) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGTrunkMission) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *DBNQGTrunkMission) GetLevel() string {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return ""
}

func (m *DBNQGTrunkMission) GetMissions() string {
	if m != nil && m.Missions != nil {
		return *m.Missions
	}
	return ""
}

type DBNQGBranchMission struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Missions         *string `protobuf:"bytes,2,opt,name=missions" json:"missions,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGBranchMission) Reset()                    { *m = DBNQGBranchMission{} }
func (m *DBNQGBranchMission) String() string            { return proto.CompactTextString(m) }
func (*DBNQGBranchMission) ProtoMessage()               {}
func (*DBNQGBranchMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DBNQGBranchMission) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGBranchMission) GetMissions() string {
	if m != nil && m.Missions != nil {
		return *m.Missions
	}
	return ""
}

type DBPlayerDailyRoom struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	LastUpdateTime   *uint32 `protobuf:"varint,2,opt,name=last_update_time" json:"last_update_time,omitempty"`
	DailyRoomData    *string `protobuf:"bytes,3,opt,name=daily_room_data" json:"daily_room_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBPlayerDailyRoom) Reset()                    { *m = DBPlayerDailyRoom{} }
func (m *DBPlayerDailyRoom) String() string            { return proto.CompactTextString(m) }
func (*DBPlayerDailyRoom) ProtoMessage()               {}
func (*DBPlayerDailyRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DBPlayerDailyRoom) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBPlayerDailyRoom) GetLastUpdateTime() uint32 {
	if m != nil && m.LastUpdateTime != nil {
		return *m.LastUpdateTime
	}
	return 0
}

func (m *DBPlayerDailyRoom) GetDailyRoomData() string {
	if m != nil && m.DailyRoomData != nil {
		return *m.DailyRoomData
	}
	return ""
}

type DBPlayerGameRoom struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Rule             *string `protobuf:"bytes,2,req,name=rule" json:"rule,omitempty"`
	Level            *string `protobuf:"bytes,3,req,name=level" json:"level,omitempty"`
	RoomType         *uint32 `protobuf:"varint,4,req,name=room_type" json:"room_type,omitempty"`
	RoomData         *string `protobuf:"bytes,5,opt,name=room_data" json:"room_data,omitempty"`
	LastUpdateTime   *uint32 `protobuf:"varint,6,opt,name=last_update_time" json:"last_update_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBPlayerGameRoom) Reset()                    { *m = DBPlayerGameRoom{} }
func (m *DBPlayerGameRoom) String() string            { return proto.CompactTextString(m) }
func (*DBPlayerGameRoom) ProtoMessage()               {}
func (*DBPlayerGameRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DBPlayerGameRoom) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBPlayerGameRoom) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *DBPlayerGameRoom) GetLevel() string {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return ""
}

func (m *DBPlayerGameRoom) GetRoomType() uint32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *DBPlayerGameRoom) GetRoomData() string {
	if m != nil && m.RoomData != nil {
		return *m.RoomData
	}
	return ""
}

func (m *DBPlayerGameRoom) GetLastUpdateTime() uint32 {
	if m != nil && m.LastUpdateTime != nil {
		return *m.LastUpdateTime
	}
	return 0
}

type DBPlayerBrokeAward struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	LastAwardTime    *uint32 `protobuf:"varint,2,opt,name=last_award_time" json:"last_award_time,omitempty"`
	AwardTimes       *uint32 `protobuf:"varint,3,opt,name=award_times" json:"award_times,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBPlayerBrokeAward) Reset()                    { *m = DBPlayerBrokeAward{} }
func (m *DBPlayerBrokeAward) String() string            { return proto.CompactTextString(m) }
func (*DBPlayerBrokeAward) ProtoMessage()               {}
func (*DBPlayerBrokeAward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DBPlayerBrokeAward) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBPlayerBrokeAward) GetLastAwardTime() uint32 {
	if m != nil && m.LastAwardTime != nil {
		return *m.LastAwardTime
	}
	return 0
}

func (m *DBPlayerBrokeAward) GetAwardTimes() uint32 {
	if m != nil && m.AwardTimes != nil {
		return *m.AwardTimes
	}
	return 0
}

type DBPlayerExt struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	NewGiftStatus    *int32  `protobuf:"varint,2,opt,name=new_gift_status" json:"new_gift_status,omitempty"`
	RulePrefer       *string `protobuf:"bytes,3,opt,name=rule_prefer" json:"rule_prefer,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBPlayerExt) Reset()                    { *m = DBPlayerExt{} }
func (m *DBPlayerExt) String() string            { return proto.CompactTextString(m) }
func (*DBPlayerExt) ProtoMessage()               {}
func (*DBPlayerExt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DBPlayerExt) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBPlayerExt) GetNewGiftStatus() int32 {
	if m != nil && m.NewGiftStatus != nil {
		return *m.NewGiftStatus
	}
	return 0
}

func (m *DBPlayerExt) GetRulePrefer() string {
	if m != nil && m.RulePrefer != nil {
		return *m.RulePrefer
	}
	return ""
}

type DBPlayerGameStatis struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	LastUpdateTime   *uint32 `protobuf:"varint,2,opt,name=last_update_time" json:"last_update_time,omitempty"`
	PlayerRuleReport *string `protobuf:"bytes,3,opt,name=player_rule_report" json:"player_rule_report,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBPlayerGameStatis) Reset()                    { *m = DBPlayerGameStatis{} }
func (m *DBPlayerGameStatis) String() string            { return proto.CompactTextString(m) }
func (*DBPlayerGameStatis) ProtoMessage()               {}
func (*DBPlayerGameStatis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DBPlayerGameStatis) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBPlayerGameStatis) GetLastUpdateTime() uint32 {
	if m != nil && m.LastUpdateTime != nil {
		return *m.LastUpdateTime
	}
	return 0
}

func (m *DBPlayerGameStatis) GetPlayerRuleReport() string {
	if m != nil && m.PlayerRuleReport != nil {
		return *m.PlayerRuleReport
	}
	return ""
}

type DBDailyGameTableStatis struct {
	Rule             *string `protobuf:"bytes,1,req,name=rule" json:"rule,omitempty"`
	Level            *string `protobuf:"bytes,2,req,name=level" json:"level,omitempty"`
	RoomType         *uint32 `protobuf:"varint,3,req,name=room_type" json:"room_type,omitempty"`
	EnterTimes       *uint32 `protobuf:"varint,4,opt,name=enter_times" json:"enter_times,omitempty"`
	CoinHigh         *int32  `protobuf:"varint,5,opt,name=coin_high" json:"coin_high,omitempty"`
	CoinLow          *int32  `protobuf:"varint,6,opt,name=coin_low" json:"coin_low,omitempty"`
	CoinTotal        *int32  `protobuf:"varint,7,opt,name=coin_total" json:"coin_total,omitempty"`
	ScoreHigh        *int32  `protobuf:"varint,8,opt,name=score_high" json:"score_high,omitempty"`
	ScoreLow         *int32  `protobuf:"varint,9,opt,name=score_low" json:"score_low,omitempty"`
	ScoreTotal       *int32  `protobuf:"varint,10,opt,name=score_total" json:"score_total,omitempty"`
	WinMultiHigh     *int32  `protobuf:"varint,11,opt,name=win_multi_high" json:"win_multi_high,omitempty"`
	LastResetTime    *uint32 `protobuf:"varint,12,opt,name=last_reset_time" json:"last_reset_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBDailyGameTableStatis) Reset()                    { *m = DBDailyGameTableStatis{} }
func (m *DBDailyGameTableStatis) String() string            { return proto.CompactTextString(m) }
func (*DBDailyGameTableStatis) ProtoMessage()               {}
func (*DBDailyGameTableStatis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DBDailyGameTableStatis) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *DBDailyGameTableStatis) GetLevel() string {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return ""
}

func (m *DBDailyGameTableStatis) GetRoomType() uint32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetEnterTimes() uint32 {
	if m != nil && m.EnterTimes != nil {
		return *m.EnterTimes
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetCoinHigh() int32 {
	if m != nil && m.CoinHigh != nil {
		return *m.CoinHigh
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetCoinLow() int32 {
	if m != nil && m.CoinLow != nil {
		return *m.CoinLow
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetCoinTotal() int32 {
	if m != nil && m.CoinTotal != nil {
		return *m.CoinTotal
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetScoreHigh() int32 {
	if m != nil && m.ScoreHigh != nil {
		return *m.ScoreHigh
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetScoreLow() int32 {
	if m != nil && m.ScoreLow != nil {
		return *m.ScoreLow
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetScoreTotal() int32 {
	if m != nil && m.ScoreTotal != nil {
		return *m.ScoreTotal
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetWinMultiHigh() int32 {
	if m != nil && m.WinMultiHigh != nil {
		return *m.WinMultiHigh
	}
	return 0
}

func (m *DBDailyGameTableStatis) GetLastResetTime() uint32 {
	if m != nil && m.LastResetTime != nil {
		return *m.LastResetTime
	}
	return 0
}

type DBNQGHiddenMission struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Missions         *string `protobuf:"bytes,2,opt,name=missions" json:"missions,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGHiddenMission) Reset()                    { *m = DBNQGHiddenMission{} }
func (m *DBNQGHiddenMission) String() string            { return proto.CompactTextString(m) }
func (*DBNQGHiddenMission) ProtoMessage()               {}
func (*DBNQGHiddenMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DBNQGHiddenMission) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGHiddenMission) GetMissions() string {
	if m != nil && m.Missions != nil {
		return *m.Missions
	}
	return ""
}

type DBNQGRushMission struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Rule             *string `protobuf:"bytes,2,req,name=rule" json:"rule,omitempty"`
	Level            *string `protobuf:"bytes,3,req,name=level" json:"level,omitempty"`
	Missions         *string `protobuf:"bytes,4,opt,name=missions" json:"missions,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGRushMission) Reset()                    { *m = DBNQGRushMission{} }
func (m *DBNQGRushMission) String() string            { return proto.CompactTextString(m) }
func (*DBNQGRushMission) ProtoMessage()               {}
func (*DBNQGRushMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DBNQGRushMission) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGRushMission) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *DBNQGRushMission) GetLevel() string {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return ""
}

func (m *DBNQGRushMission) GetMissions() string {
	if m != nil && m.Missions != nil {
		return *m.Missions
	}
	return ""
}

type DBNQGUserItem struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	SysId            *int32  `protobuf:"varint,2,req,name=sys_id" json:"sys_id,omitempty"`
	ItemId           *int32  `protobuf:"varint,3,req,name=item_id" json:"item_id,omitempty"`
	SubId            *int32  `protobuf:"varint,4,opt,name=sub_id" json:"sub_id,omitempty"`
	LastTm           *uint32 `protobuf:"varint,5,opt,name=last_tm" json:"last_tm,omitempty"`
	Amount           *int32  `protobuf:"varint,6,opt,name=amount" json:"amount,omitempty"`
	Res_1            *int32  `protobuf:"varint,7,opt,name=res_1" json:"res_1,omitempty"`
	Res_2            *int32  `protobuf:"varint,8,opt,name=res_2" json:"res_2,omitempty"`
	Res_3            *int32  `protobuf:"varint,9,opt,name=res_3" json:"res_3,omitempty"`
	Res_4            *int64  `protobuf:"varint,10,opt,name=res_4" json:"res_4,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGUserItem) Reset()                    { *m = DBNQGUserItem{} }
func (m *DBNQGUserItem) String() string            { return proto.CompactTextString(m) }
func (*DBNQGUserItem) ProtoMessage()               {}
func (*DBNQGUserItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DBNQGUserItem) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGUserItem) GetSysId() int32 {
	if m != nil && m.SysId != nil {
		return *m.SysId
	}
	return 0
}

func (m *DBNQGUserItem) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *DBNQGUserItem) GetSubId() int32 {
	if m != nil && m.SubId != nil {
		return *m.SubId
	}
	return 0
}

func (m *DBNQGUserItem) GetLastTm() uint32 {
	if m != nil && m.LastTm != nil {
		return *m.LastTm
	}
	return 0
}

func (m *DBNQGUserItem) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DBNQGUserItem) GetRes_1() int32 {
	if m != nil && m.Res_1 != nil {
		return *m.Res_1
	}
	return 0
}

func (m *DBNQGUserItem) GetRes_2() int32 {
	if m != nil && m.Res_2 != nil {
		return *m.Res_2
	}
	return 0
}

func (m *DBNQGUserItem) GetRes_3() int32 {
	if m != nil && m.Res_3 != nil {
		return *m.Res_3
	}
	return 0
}

func (m *DBNQGUserItem) GetRes_4() int64 {
	if m != nil && m.Res_4 != nil {
		return *m.Res_4
	}
	return 0
}

type DuoBaoUserHistory struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	GoodsId          *int32  `protobuf:"varint,2,req,name=goods_id" json:"goods_id,omitempty"`
	Idx              *int32  `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	AppId            *int32  `protobuf:"varint,4,req,name=app_id" json:"app_id,omitempty"`
	ActionTime       *uint32 `protobuf:"varint,5,req,name=action_time" json:"action_time,omitempty"`
	Times            *int32  `protobuf:"varint,6,req,name=times" json:"times,omitempty"`
	Codes            *string `protobuf:"bytes,7,req,name=codes" json:"codes,omitempty"`
	JqCost           *int32  `protobuf:"varint,8,req,name=jq_cost" json:"jq_cost,omitempty"`
	OpenResult       *int32  `protobuf:"varint,9,req,name=open_result" json:"open_result,omitempty"`
	IsWinner         *int32  `protobuf:"varint,10,req,name=is_winner" json:"is_winner,omitempty"`
	Rewarded         *int32  `protobuf:"varint,11,req,name=rewarded" json:"rewarded,omitempty"`
	DeliverId        *string `protobuf:"bytes,12,req,name=deliver_id" json:"deliver_id,omitempty"`
	DeliverCom       *string `protobuf:"bytes,13,req,name=deliver_com" json:"deliver_com,omitempty"`
	LuckSingleCode   *string `protobuf:"bytes,14,opt,name=luck_single_code" json:"luck_single_code,omitempty"`
	IsRobot          *int32  `protobuf:"varint,15,opt,name=is_robot" json:"is_robot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DuoBaoUserHistory) Reset()                    { *m = DuoBaoUserHistory{} }
func (m *DuoBaoUserHistory) String() string            { return proto.CompactTextString(m) }
func (*DuoBaoUserHistory) ProtoMessage()               {}
func (*DuoBaoUserHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DuoBaoUserHistory) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DuoBaoUserHistory) GetGoodsId() int32 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *DuoBaoUserHistory) GetIdx() int32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *DuoBaoUserHistory) GetAppId() int32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *DuoBaoUserHistory) GetActionTime() uint32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DuoBaoUserHistory) GetTimes() int32 {
	if m != nil && m.Times != nil {
		return *m.Times
	}
	return 0
}

func (m *DuoBaoUserHistory) GetCodes() string {
	if m != nil && m.Codes != nil {
		return *m.Codes
	}
	return ""
}

func (m *DuoBaoUserHistory) GetJqCost() int32 {
	if m != nil && m.JqCost != nil {
		return *m.JqCost
	}
	return 0
}

func (m *DuoBaoUserHistory) GetOpenResult() int32 {
	if m != nil && m.OpenResult != nil {
		return *m.OpenResult
	}
	return 0
}

func (m *DuoBaoUserHistory) GetIsWinner() int32 {
	if m != nil && m.IsWinner != nil {
		return *m.IsWinner
	}
	return 0
}

func (m *DuoBaoUserHistory) GetRewarded() int32 {
	if m != nil && m.Rewarded != nil {
		return *m.Rewarded
	}
	return 0
}

func (m *DuoBaoUserHistory) GetDeliverId() string {
	if m != nil && m.DeliverId != nil {
		return *m.DeliverId
	}
	return ""
}

func (m *DuoBaoUserHistory) GetDeliverCom() string {
	if m != nil && m.DeliverCom != nil {
		return *m.DeliverCom
	}
	return ""
}

func (m *DuoBaoUserHistory) GetLuckSingleCode() string {
	if m != nil && m.LuckSingleCode != nil {
		return *m.LuckSingleCode
	}
	return ""
}

func (m *DuoBaoUserHistory) GetIsRobot() int32 {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return 0
}

type DuoBaoDuihuanUserHistory struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	GoodsId          *int32  `protobuf:"varint,2,req,name=goods_id" json:"goods_id,omitempty"`
	Idx              *int32  `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	AppId            *int32  `protobuf:"varint,4,req,name=app_id" json:"app_id,omitempty"`
	ActionTime       *uint32 `protobuf:"varint,5,req,name=action_time" json:"action_time,omitempty"`
	JqCost           *int32  `protobuf:"varint,6,req,name=jq_cost" json:"jq_cost,omitempty"`
	Rewarded         *int32  `protobuf:"varint,7,req,name=rewarded" json:"rewarded,omitempty"`
	DeliverId        *string `protobuf:"bytes,8,req,name=deliver_id" json:"deliver_id,omitempty"`
	DeliverCom       *string `protobuf:"bytes,9,req,name=deliver_com" json:"deliver_com,omitempty"`
	Count            *int32  `protobuf:"varint,10,req,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DuoBaoDuihuanUserHistory) Reset()                    { *m = DuoBaoDuihuanUserHistory{} }
func (m *DuoBaoDuihuanUserHistory) String() string            { return proto.CompactTextString(m) }
func (*DuoBaoDuihuanUserHistory) ProtoMessage()               {}
func (*DuoBaoDuihuanUserHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DuoBaoDuihuanUserHistory) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetGoodsId() int32 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetIdx() int32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetAppId() int32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetActionTime() uint32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetJqCost() int32 {
	if m != nil && m.JqCost != nil {
		return *m.JqCost
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetRewarded() int32 {
	if m != nil && m.Rewarded != nil {
		return *m.Rewarded
	}
	return 0
}

func (m *DuoBaoDuihuanUserHistory) GetDeliverId() string {
	if m != nil && m.DeliverId != nil {
		return *m.DeliverId
	}
	return ""
}

func (m *DuoBaoDuihuanUserHistory) GetDeliverCom() string {
	if m != nil && m.DeliverCom != nil {
		return *m.DeliverCom
	}
	return ""
}

func (m *DuoBaoDuihuanUserHistory) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type DuoBaoUserHistoryCodes struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	GoodsId          *int32  `protobuf:"varint,2,req,name=goods_id" json:"goods_id,omitempty"`
	Idx              *int32  `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	AllCodes         *string `protobuf:"bytes,4,req,name=all_codes" json:"all_codes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DuoBaoUserHistoryCodes) Reset()                    { *m = DuoBaoUserHistoryCodes{} }
func (m *DuoBaoUserHistoryCodes) String() string            { return proto.CompactTextString(m) }
func (*DuoBaoUserHistoryCodes) ProtoMessage()               {}
func (*DuoBaoUserHistoryCodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DuoBaoUserHistoryCodes) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DuoBaoUserHistoryCodes) GetGoodsId() int32 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *DuoBaoUserHistoryCodes) GetIdx() int32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *DuoBaoUserHistoryCodes) GetAllCodes() string {
	if m != nil && m.AllCodes != nil {
		return *m.AllCodes
	}
	return ""
}

type DuoBaoUserContact struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	AppId            *int32  `protobuf:"varint,2,req,name=app_id" json:"app_id,omitempty"`
	RealName         *string `protobuf:"bytes,3,req,name=real_name" json:"real_name,omitempty"`
	Qq               *string `protobuf:"bytes,4,req,name=qq" json:"qq,omitempty"`
	PhoneNum         *string `protobuf:"bytes,5,req,name=phone_num" json:"phone_num,omitempty"`
	PostCode         *string `protobuf:"bytes,6,req,name=post_code" json:"post_code,omitempty"`
	Address          *string `protobuf:"bytes,7,req,name=address" json:"address,omitempty"`
	IdentityId       *string `protobuf:"bytes,8,opt,name=identity_id" json:"identity_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DuoBaoUserContact) Reset()                    { *m = DuoBaoUserContact{} }
func (m *DuoBaoUserContact) String() string            { return proto.CompactTextString(m) }
func (*DuoBaoUserContact) ProtoMessage()               {}
func (*DuoBaoUserContact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DuoBaoUserContact) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DuoBaoUserContact) GetAppId() int32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *DuoBaoUserContact) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *DuoBaoUserContact) GetQq() string {
	if m != nil && m.Qq != nil {
		return *m.Qq
	}
	return ""
}

func (m *DuoBaoUserContact) GetPhoneNum() string {
	if m != nil && m.PhoneNum != nil {
		return *m.PhoneNum
	}
	return ""
}

func (m *DuoBaoUserContact) GetPostCode() string {
	if m != nil && m.PostCode != nil {
		return *m.PostCode
	}
	return ""
}

func (m *DuoBaoUserContact) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *DuoBaoUserContact) GetIdentityId() string {
	if m != nil && m.IdentityId != nil {
		return *m.IdentityId
	}
	return ""
}

type DBRoleMail struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	MailId           *int64  `protobuf:"varint,2,req,name=mail_id" json:"mail_id,omitempty"`
	SendTime         *uint32 `protobuf:"varint,3,opt,name=send_time" json:"send_time,omitempty"`
	Flag             *uint32 `protobuf:"varint,4,opt,name=flag" json:"flag,omitempty"`
	State            *int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	MailData         *string `protobuf:"bytes,6,opt,name=mail_data" json:"mail_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBRoleMail) Reset()                    { *m = DBRoleMail{} }
func (m *DBRoleMail) String() string            { return proto.CompactTextString(m) }
func (*DBRoleMail) ProtoMessage()               {}
func (*DBRoleMail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DBRoleMail) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBRoleMail) GetMailId() int64 {
	if m != nil && m.MailId != nil {
		return *m.MailId
	}
	return 0
}

func (m *DBRoleMail) GetSendTime() uint32 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *DBRoleMail) GetFlag() uint32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *DBRoleMail) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *DBRoleMail) GetMailData() string {
	if m != nil && m.MailData != nil {
		return *m.MailData
	}
	return ""
}

type DBRoleGame struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	LastUpdateTime   *uint32 `protobuf:"varint,2,opt,name=last_update_time" json:"last_update_time,omitempty"`
	DailyGame        *string `protobuf:"bytes,3,opt,name=daily_game" json:"daily_game,omitempty"`
	GameRecord       *string `protobuf:"bytes,4,opt,name=game_record" json:"game_record,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBRoleGame) Reset()                    { *m = DBRoleGame{} }
func (m *DBRoleGame) String() string            { return proto.CompactTextString(m) }
func (*DBRoleGame) ProtoMessage()               {}
func (*DBRoleGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DBRoleGame) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBRoleGame) GetLastUpdateTime() uint32 {
	if m != nil && m.LastUpdateTime != nil {
		return *m.LastUpdateTime
	}
	return 0
}

func (m *DBRoleGame) GetDailyGame() string {
	if m != nil && m.DailyGame != nil {
		return *m.DailyGame
	}
	return ""
}

func (m *DBRoleGame) GetGameRecord() string {
	if m != nil && m.GameRecord != nil {
		return *m.GameRecord
	}
	return ""
}

type DBRoleData struct {
	Uin                *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	DataRoleSim        *string `protobuf:"bytes,2,opt,name=data_role_sim" json:"data_role_sim,omitempty"`
	DataRoleProp       *string `protobuf:"bytes,3,opt,name=data_role_prop" json:"data_role_prop,omitempty"`
	DataMailSim        *string `protobuf:"bytes,4,opt,name=data_mail_sim" json:"data_mail_sim,omitempty"`
	DataNoticeActivity *string `protobuf:"bytes,5,opt,name=data_notice_activity" json:"data_notice_activity,omitempty"`
	CreateTime         *int32  `protobuf:"varint,6,opt,name=create_time" json:"create_time,omitempty"`
	LoginTime          *int32  `protobuf:"varint,7,opt,name=login_time" json:"login_time,omitempty"`
	LogoutTime         *int32  `protobuf:"varint,8,opt,name=logout_time" json:"logout_time,omitempty"`
	OnlineTime         *int32  `protobuf:"varint,9,opt,name=online_time" json:"online_time,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *DBRoleData) Reset()                    { *m = DBRoleData{} }
func (m *DBRoleData) String() string            { return proto.CompactTextString(m) }
func (*DBRoleData) ProtoMessage()               {}
func (*DBRoleData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DBRoleData) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBRoleData) GetDataRoleSim() string {
	if m != nil && m.DataRoleSim != nil {
		return *m.DataRoleSim
	}
	return ""
}

func (m *DBRoleData) GetDataRoleProp() string {
	if m != nil && m.DataRoleProp != nil {
		return *m.DataRoleProp
	}
	return ""
}

func (m *DBRoleData) GetDataMailSim() string {
	if m != nil && m.DataMailSim != nil {
		return *m.DataMailSim
	}
	return ""
}

func (m *DBRoleData) GetDataNoticeActivity() string {
	if m != nil && m.DataNoticeActivity != nil {
		return *m.DataNoticeActivity
	}
	return ""
}

func (m *DBRoleData) GetCreateTime() int32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DBRoleData) GetLoginTime() int32 {
	if m != nil && m.LoginTime != nil {
		return *m.LoginTime
	}
	return 0
}

func (m *DBRoleData) GetLogoutTime() int32 {
	if m != nil && m.LogoutTime != nil {
		return *m.LogoutTime
	}
	return 0
}

func (m *DBRoleData) GetOnlineTime() int32 {
	if m != nil && m.OnlineTime != nil {
		return *m.OnlineTime
	}
	return 0
}

type DBGameReportDaily struct {
	DateTime         *uint32 `protobuf:"varint,1,req,name=date_time" json:"date_time,omitempty"`
	Rule             *string `protobuf:"bytes,2,opt,name=rule" json:"rule,omitempty"`
	Level            *string `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
	RoomType         *uint32 `protobuf:"varint,4,opt,name=room_type" json:"room_type,omitempty"`
	TimeTotal        *uint32 `protobuf:"varint,5,opt,name=time_total" json:"time_total,omitempty"`
	EnterTimes       *uint32 `protobuf:"varint,6,opt,name=enter_times" json:"enter_times,omitempty"`
	CoinTotal        *uint32 `protobuf:"varint,7,opt,name=coin_total" json:"coin_total,omitempty"`
	UpdateTime       *uint32 `protobuf:"varint,8,opt,name=update_time" json:"update_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBGameReportDaily) Reset()                    { *m = DBGameReportDaily{} }
func (m *DBGameReportDaily) String() string            { return proto.CompactTextString(m) }
func (*DBGameReportDaily) ProtoMessage()               {}
func (*DBGameReportDaily) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DBGameReportDaily) GetDateTime() uint32 {
	if m != nil && m.DateTime != nil {
		return *m.DateTime
	}
	return 0
}

func (m *DBGameReportDaily) GetRule() string {
	if m != nil && m.Rule != nil {
		return *m.Rule
	}
	return ""
}

func (m *DBGameReportDaily) GetLevel() string {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return ""
}

func (m *DBGameReportDaily) GetRoomType() uint32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *DBGameReportDaily) GetTimeTotal() uint32 {
	if m != nil && m.TimeTotal != nil {
		return *m.TimeTotal
	}
	return 0
}

func (m *DBGameReportDaily) GetEnterTimes() uint32 {
	if m != nil && m.EnterTimes != nil {
		return *m.EnterTimes
	}
	return 0
}

func (m *DBGameReportDaily) GetCoinTotal() uint32 {
	if m != nil && m.CoinTotal != nil {
		return *m.CoinTotal
	}
	return 0
}

func (m *DBGameReportDaily) GetUpdateTime() uint32 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type DBWorldRank struct {
	RankId           *uint32 `protobuf:"varint,1,req,name=rank_id" json:"rank_id,omitempty"`
	AppId            *uint32 `protobuf:"varint,2,req,name=app_id" json:"app_id,omitempty"`
	RankData         *string `protobuf:"bytes,3,opt,name=rank_data" json:"rank_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBWorldRank) Reset()                    { *m = DBWorldRank{} }
func (m *DBWorldRank) String() string            { return proto.CompactTextString(m) }
func (*DBWorldRank) ProtoMessage()               {}
func (*DBWorldRank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DBWorldRank) GetRankId() uint32 {
	if m != nil && m.RankId != nil {
		return *m.RankId
	}
	return 0
}

func (m *DBWorldRank) GetAppId() uint32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *DBWorldRank) GetRankData() string {
	if m != nil && m.RankData != nil {
		return *m.RankData
	}
	return ""
}

type DBNQGHealthGame struct {
	Openid           *string `protobuf:"bytes,1,req,name=openid" json:"openid,omitempty"`
	Uin              *uint64 `protobuf:"varint,2,req,name=uin" json:"uin,omitempty"`
	Healthinfo       *string `protobuf:"bytes,3,opt,name=healthinfo" json:"healthinfo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGHealthGame) Reset()                    { *m = DBNQGHealthGame{} }
func (m *DBNQGHealthGame) String() string            { return proto.CompactTextString(m) }
func (*DBNQGHealthGame) ProtoMessage()               {}
func (*DBNQGHealthGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DBNQGHealthGame) GetOpenid() string {
	if m != nil && m.Openid != nil {
		return *m.Openid
	}
	return ""
}

func (m *DBNQGHealthGame) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGHealthGame) GetHealthinfo() string {
	if m != nil && m.Healthinfo != nil {
		return *m.Healthinfo
	}
	return ""
}

type DBNQGRedPackage struct {
	Id               *int64  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Uin              *uint64 `protobuf:"varint,2,opt,name=uin" json:"uin,omitempty"`
	Status           *int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	TotalNum         *uint32 `protobuf:"varint,4,opt,name=total_num" json:"total_num,omitempty"`
	SendNum          *uint32 `protobuf:"varint,5,opt,name=send_num" json:"send_num,omitempty"`
	TotalCoin        *uint32 `protobuf:"varint,6,opt,name=total_coin" json:"total_coin,omitempty"`
	SendCoin         *uint32 `protobuf:"varint,7,opt,name=send_coin" json:"send_coin,omitempty"`
	StartTime        *uint64 `protobuf:"varint,8,opt,name=start_time" json:"start_time,omitempty"`
	EndTime          *uint64 `protobuf:"varint,9,opt,name=end_time" json:"end_time,omitempty"`
	TitleText        *string `protobuf:"bytes,10,opt,name=title_text" json:"title_text,omitempty"`
	SendDetail       *string `protobuf:"bytes,11,opt,name=send_detail" json:"send_detail,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBNQGRedPackage) Reset()                    { *m = DBNQGRedPackage{} }
func (m *DBNQGRedPackage) String() string            { return proto.CompactTextString(m) }
func (*DBNQGRedPackage) ProtoMessage()               {}
func (*DBNQGRedPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DBNQGRedPackage) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DBNQGRedPackage) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBNQGRedPackage) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DBNQGRedPackage) GetTotalNum() uint32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *DBNQGRedPackage) GetSendNum() uint32 {
	if m != nil && m.SendNum != nil {
		return *m.SendNum
	}
	return 0
}

func (m *DBNQGRedPackage) GetTotalCoin() uint32 {
	if m != nil && m.TotalCoin != nil {
		return *m.TotalCoin
	}
	return 0
}

func (m *DBNQGRedPackage) GetSendCoin() uint32 {
	if m != nil && m.SendCoin != nil {
		return *m.SendCoin
	}
	return 0
}

func (m *DBNQGRedPackage) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *DBNQGRedPackage) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *DBNQGRedPackage) GetTitleText() string {
	if m != nil && m.TitleText != nil {
		return *m.TitleText
	}
	return ""
}

func (m *DBNQGRedPackage) GetSendDetail() string {
	if m != nil && m.SendDetail != nil {
		return *m.SendDetail
	}
	return ""
}

type DBRoleDiamond struct {
	Uin              *uint64 `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	Appid            *uint32 `protobuf:"varint,2,req,name=appid" json:"appid,omitempty"`
	Diamonds         *string `protobuf:"bytes,3,opt,name=diamonds" json:"diamonds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBRoleDiamond) Reset()                    { *m = DBRoleDiamond{} }
func (m *DBRoleDiamond) String() string            { return proto.CompactTextString(m) }
func (*DBRoleDiamond) ProtoMessage()               {}
func (*DBRoleDiamond) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DBRoleDiamond) GetUin() uint64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *DBRoleDiamond) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *DBRoleDiamond) GetDiamonds() string {
	if m != nil && m.Diamonds != nil {
		return *m.Diamonds
	}
	return ""
}

type DBOnlineCnt struct {
	Gameappid        *string `protobuf:"bytes,1,req,name=gameappid" json:"gameappid,omitempty"`
	Timekey          *int32  `protobuf:"varint,2,req,name=timekey" json:"timekey,omitempty"`
	Gsid             *string `protobuf:"bytes,3,req,name=gsid" json:"gsid,omitempty"`
	Zoneareaid       *int32  `protobuf:"varint,4,opt,name=zoneareaid" json:"zoneareaid,omitempty"`
	Onlinecntios     *int32  `protobuf:"varint,5,opt,name=onlinecntios" json:"onlinecntios,omitempty"`
	Onlinecntandroid *int32  `protobuf:"varint,6,opt,name=onlinecntandroid" json:"onlinecntandroid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBOnlineCnt) Reset()                    { *m = DBOnlineCnt{} }
func (m *DBOnlineCnt) String() string            { return proto.CompactTextString(m) }
func (*DBOnlineCnt) ProtoMessage()               {}
func (*DBOnlineCnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DBOnlineCnt) GetGameappid() string {
	if m != nil && m.Gameappid != nil {
		return *m.Gameappid
	}
	return ""
}

func (m *DBOnlineCnt) GetTimekey() int32 {
	if m != nil && m.Timekey != nil {
		return *m.Timekey
	}
	return 0
}

func (m *DBOnlineCnt) GetGsid() string {
	if m != nil && m.Gsid != nil {
		return *m.Gsid
	}
	return ""
}

func (m *DBOnlineCnt) GetZoneareaid() int32 {
	if m != nil && m.Zoneareaid != nil {
		return *m.Zoneareaid
	}
	return 0
}

func (m *DBOnlineCnt) GetOnlinecntios() int32 {
	if m != nil && m.Onlinecntios != nil {
		return *m.Onlinecntios
	}
	return 0
}

func (m *DBOnlineCnt) GetOnlinecntandroid() int32 {
	if m != nil && m.Onlinecntandroid != nil {
		return *m.Onlinecntandroid
	}
	return 0
}

type DBHealthGameInfo struct {
	AccountId           *string `protobuf:"bytes,1,opt,name=account_id" json:"account_id,omitempty"`
	CharacterId         *string `protobuf:"bytes,2,opt,name=character_id" json:"character_id,omitempty"`
	IsAdult             *uint32 `protobuf:"varint,3,opt,name=is_adult" json:"is_adult,omitempty"`
	GameStatus          *uint32 `protobuf:"varint,4,opt,name=game_status" json:"game_status,omitempty"`
	StatusStartTime     *uint64 `protobuf:"varint,5,opt,name=status_start_time" json:"status_start_time,omitempty"`
	AccumuTime          *uint32 `protobuf:"varint,6,opt,name=accumu_time" json:"accumu_time,omitempty"`
	RestTime            *uint32 `protobuf:"varint,7,opt,name=rest_time" json:"rest_time,omitempty"`
	LimitTime           *uint32 `protobuf:"varint,8,opt,name=limit_time" json:"limit_time,omitempty"`
	TodayFirstLimitTime *uint64 `protobuf:"varint,9,opt,name=today_first_limit_time" json:"today_first_limit_time,omitempty"`
	RestTimeRemain      *uint32 `protobuf:"varint,10,opt,name=rest_time_remain" json:"rest_time_remain,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *DBHealthGameInfo) Reset()                    { *m = DBHealthGameInfo{} }
func (m *DBHealthGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DBHealthGameInfo) ProtoMessage()               {}
func (*DBHealthGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DBHealthGameInfo) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

func (m *DBHealthGameInfo) GetCharacterId() string {
	if m != nil && m.CharacterId != nil {
		return *m.CharacterId
	}
	return ""
}

func (m *DBHealthGameInfo) GetIsAdult() uint32 {
	if m != nil && m.IsAdult != nil {
		return *m.IsAdult
	}
	return 0
}

func (m *DBHealthGameInfo) GetGameStatus() uint32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DBHealthGameInfo) GetStatusStartTime() uint64 {
	if m != nil && m.StatusStartTime != nil {
		return *m.StatusStartTime
	}
	return 0
}

func (m *DBHealthGameInfo) GetAccumuTime() uint32 {
	if m != nil && m.AccumuTime != nil {
		return *m.AccumuTime
	}
	return 0
}

func (m *DBHealthGameInfo) GetRestTime() uint32 {
	if m != nil && m.RestTime != nil {
		return *m.RestTime
	}
	return 0
}

func (m *DBHealthGameInfo) GetLimitTime() uint32 {
	if m != nil && m.LimitTime != nil {
		return *m.LimitTime
	}
	return 0
}

func (m *DBHealthGameInfo) GetTodayFirstLimitTime() uint64 {
	if m != nil && m.TodayFirstLimitTime != nil {
		return *m.TodayFirstLimitTime
	}
	return 0
}

func (m *DBHealthGameInfo) GetRestTimeRemain() uint32 {
	if m != nil && m.RestTimeRemain != nil {
		return *m.RestTimeRemain
	}
	return 0
}

type DataPlainColumn struct {
	Type             *TcaplusDataType `protobuf:"varint,1,req,name=type,enum=tcaplusgatesvr.TcaplusDataType" json:"type,omitempty"`
	Name             *string          `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	ValueUint        *uint64          `protobuf:"varint,3,opt,name=value_uint" json:"value_uint,omitempty"`
	ValueInt         *int64           `protobuf:"varint,4,opt,name=value_int" json:"value_int,omitempty"`
	ValueStr         []byte           `protobuf:"bytes,5,opt,name=value_str" json:"value_str,omitempty"`
	Flag             *int32           `protobuf:"varint,6,opt,name=flag" json:"flag,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DataPlainColumn) Reset()                    { *m = DataPlainColumn{} }
func (m *DataPlainColumn) String() string            { return proto.CompactTextString(m) }
func (*DataPlainColumn) ProtoMessage()               {}
func (*DataPlainColumn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *DataPlainColumn) GetType() TcaplusDataType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TcaplusDataType_EN_TCAPLUS_DATATYPE_MIN
}

func (m *DataPlainColumn) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DataPlainColumn) GetValueUint() uint64 {
	if m != nil && m.ValueUint != nil {
		return *m.ValueUint
	}
	return 0
}

func (m *DataPlainColumn) GetValueInt() int64 {
	if m != nil && m.ValueInt != nil {
		return *m.ValueInt
	}
	return 0
}

func (m *DataPlainColumn) GetValueStr() []byte {
	if m != nil {
		return m.ValueStr
	}
	return nil
}

func (m *DataPlainColumn) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

type DataPlainRow struct {
	Key_1            *DataPlainColumn   `protobuf:"bytes,1,opt,name=key_1" json:"key_1,omitempty"`
	Key_2            *DataPlainColumn   `protobuf:"bytes,2,opt,name=key_2" json:"key_2,omitempty"`
	Key_3            *DataPlainColumn   `protobuf:"bytes,3,opt,name=key_3" json:"key_3,omitempty"`
	Key_4            *DataPlainColumn   `protobuf:"bytes,4,opt,name=key_4" json:"key_4,omitempty"`
	Values           []*DataPlainColumn `protobuf:"bytes,5,rep,name=values" json:"values,omitempty"`
	Index            *int64             `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *DataPlainRow) Reset()                    { *m = DataPlainRow{} }
func (m *DataPlainRow) String() string            { return proto.CompactTextString(m) }
func (*DataPlainRow) ProtoMessage()               {}
func (*DataPlainRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DataPlainRow) GetKey_1() *DataPlainColumn {
	if m != nil {
		return m.Key_1
	}
	return nil
}

func (m *DataPlainRow) GetKey_2() *DataPlainColumn {
	if m != nil {
		return m.Key_2
	}
	return nil
}

func (m *DataPlainRow) GetKey_3() *DataPlainColumn {
	if m != nil {
		return m.Key_3
	}
	return nil
}

func (m *DataPlainRow) GetKey_4() *DataPlainColumn {
	if m != nil {
		return m.Key_4
	}
	return nil
}

func (m *DataPlainRow) GetValues() []*DataPlainColumn {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *DataPlainRow) GetIndex() int64 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type DataTcaplusRequestOption struct {
	ZoneId              *uint32 `protobuf:"varint,1,opt,name=zone_id" json:"zone_id,omitempty"`
	UserBuff            []byte  `protobuf:"bytes,2,opt,name=user_buff" json:"user_buff,omitempty"`
	ResultFlag          *uint32 `protobuf:"varint,3,opt,name=result_flag" json:"result_flag,omitempty"`
	AddableIncreaseFlag *uint32 `protobuf:"varint,4,opt,name=addable_increase_flag" json:"addable_increase_flag,omitempty"`
	Flags               *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ExpireTime          *uint32 `protobuf:"varint,6,opt,name=expire_time" json:"expire_time,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *DataTcaplusRequestOption) Reset()                    { *m = DataTcaplusRequestOption{} }
func (m *DataTcaplusRequestOption) String() string            { return proto.CompactTextString(m) }
func (*DataTcaplusRequestOption) ProtoMessage()               {}
func (*DataTcaplusRequestOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DataTcaplusRequestOption) GetZoneId() uint32 {
	if m != nil && m.ZoneId != nil {
		return *m.ZoneId
	}
	return 0
}

func (m *DataTcaplusRequestOption) GetUserBuff() []byte {
	if m != nil {
		return m.UserBuff
	}
	return nil
}

func (m *DataTcaplusRequestOption) GetResultFlag() uint32 {
	if m != nil && m.ResultFlag != nil {
		return *m.ResultFlag
	}
	return 0
}

func (m *DataTcaplusRequestOption) GetAddableIncreaseFlag() uint32 {
	if m != nil && m.AddableIncreaseFlag != nil {
		return *m.AddableIncreaseFlag
	}
	return 0
}

func (m *DataTcaplusRequestOption) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *DataTcaplusRequestOption) GetExpireTime() uint32 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

type DataTcaplusResponseOption struct {
	ZoneId              *uint32 `protobuf:"varint,1,opt,name=zone_id" json:"zone_id,omitempty"`
	UserBuff            []byte  `protobuf:"bytes,2,opt,name=user_buff" json:"user_buff,omitempty"`
	ResultFlag          *uint32 `protobuf:"varint,3,opt,name=result_flag" json:"result_flag,omitempty"`
	AddableIncreaseFlag *uint32 `protobuf:"varint,4,opt,name=addable_increase_flag" json:"addable_increase_flag,omitempty"`
	Flags               *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	AffectedRecordNum   *int32  `protobuf:"varint,6,opt,name=affected_record_num" json:"affected_record_num,omitempty"`
	LastError           *string `protobuf:"bytes,7,opt,name=last_error" json:"last_error,omitempty"`
	PartkeyTotalNum     *int32  `protobuf:"varint,8,opt,name=partkey_total_num" json:"partkey_total_num,omitempty"`
	PartkeySucNum       *int32  `protobuf:"varint,9,opt,name=partkey_suc_num" json:"partkey_suc_num,omitempty"`
	PartkeyFailedNum    *int32  `protobuf:"varint,10,opt,name=partkey_failed_num" json:"partkey_failed_num,omitempty"`
	PartkeyOffset       *int32  `protobuf:"varint,11,opt,name=partkey_offset" json:"partkey_offset,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *DataTcaplusResponseOption) Reset()                    { *m = DataTcaplusResponseOption{} }
func (m *DataTcaplusResponseOption) String() string            { return proto.CompactTextString(m) }
func (*DataTcaplusResponseOption) ProtoMessage()               {}
func (*DataTcaplusResponseOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DataTcaplusResponseOption) GetZoneId() uint32 {
	if m != nil && m.ZoneId != nil {
		return *m.ZoneId
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetUserBuff() []byte {
	if m != nil {
		return m.UserBuff
	}
	return nil
}

func (m *DataTcaplusResponseOption) GetResultFlag() uint32 {
	if m != nil && m.ResultFlag != nil {
		return *m.ResultFlag
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetAddableIncreaseFlag() uint32 {
	if m != nil && m.AddableIncreaseFlag != nil {
		return *m.AddableIncreaseFlag
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetAffectedRecordNum() int32 {
	if m != nil && m.AffectedRecordNum != nil {
		return *m.AffectedRecordNum
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetLastError() string {
	if m != nil && m.LastError != nil {
		return *m.LastError
	}
	return ""
}

func (m *DataTcaplusResponseOption) GetPartkeyTotalNum() int32 {
	if m != nil && m.PartkeyTotalNum != nil {
		return *m.PartkeyTotalNum
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetPartkeySucNum() int32 {
	if m != nil && m.PartkeySucNum != nil {
		return *m.PartkeySucNum
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetPartkeyFailedNum() int32 {
	if m != nil && m.PartkeyFailedNum != nil {
		return *m.PartkeyFailedNum
	}
	return 0
}

func (m *DataTcaplusResponseOption) GetPartkeyOffset() int32 {
	if m != nil && m.PartkeyOffset != nil {
		return *m.PartkeyOffset
	}
	return 0
}

type DataOperation struct {
	FieldName        *string        `protobuf:"bytes,1,req,name=field_name" json:"field_name,omitempty"`
	OperationType    *OperationType `protobuf:"varint,2,req,name=operation_type,enum=tcaplusgatesvr.OperationType" json:"operation_type,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *DataOperation) Reset()                    { *m = DataOperation{} }
func (m *DataOperation) String() string            { return proto.CompactTextString(m) }
func (*DataOperation) ProtoMessage()               {}
func (*DataOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DataOperation) GetFieldName() string {
	if m != nil && m.FieldName != nil {
		return *m.FieldName
	}
	return ""
}

func (m *DataOperation) GetOperationType() OperationType {
	if m != nil && m.OperationType != nil {
		return *m.OperationType
	}
	return OperationType_EN_OPERATION_TYPE_PLUS
}

type SSMsgReqTcaplusPlainTable struct {
	TcaplusGateId    *int32                    `protobuf:"varint,1,req,name=tcaplus_gate_id" json:"tcaplus_gate_id,omitempty"`
	TableName        *string                   `protobuf:"bytes,2,req,name=table_name" json:"table_name,omitempty"`
	ApiCmd           *TcaplusAPICmd            `protobuf:"varint,3,req,name=api_cmd,enum=tcaplusgatesvr.TcaplusAPICmd" json:"api_cmd,omitempty"`
	RequestSet       *DataPlainRow             `protobuf:"bytes,4,req,name=request_set" json:"request_set,omitempty"`
	Options          *DataTcaplusRequestOption `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	Operation        *DataOperation            `protobuf:"bytes,6,opt,name=operation" json:"operation,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *SSMsgReqTcaplusPlainTable) Reset()                    { *m = SSMsgReqTcaplusPlainTable{} }
func (m *SSMsgReqTcaplusPlainTable) String() string            { return proto.CompactTextString(m) }
func (*SSMsgReqTcaplusPlainTable) ProtoMessage()               {}
func (*SSMsgReqTcaplusPlainTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SSMsgReqTcaplusPlainTable) GetTcaplusGateId() int32 {
	if m != nil && m.TcaplusGateId != nil {
		return *m.TcaplusGateId
	}
	return 0
}

func (m *SSMsgReqTcaplusPlainTable) GetTableName() string {
	if m != nil && m.TableName != nil {
		return *m.TableName
	}
	return ""
}

func (m *SSMsgReqTcaplusPlainTable) GetApiCmd() TcaplusAPICmd {
	if m != nil && m.ApiCmd != nil {
		return *m.ApiCmd
	}
	return TcaplusAPICmd_ENTCAPLUS_API_MIN
}

func (m *SSMsgReqTcaplusPlainTable) GetRequestSet() *DataPlainRow {
	if m != nil {
		return m.RequestSet
	}
	return nil
}

func (m *SSMsgReqTcaplusPlainTable) GetOptions() *DataTcaplusRequestOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *SSMsgReqTcaplusPlainTable) GetOperation() *DataOperation {
	if m != nil {
		return m.Operation
	}
	return nil
}

type SSMsgRspTcaplusPlainTable struct {
	ApiCmd           *TcaplusAPICmd             `protobuf:"varint,1,req,name=api_cmd,enum=tcaplusgatesvr.TcaplusAPICmd" json:"api_cmd,omitempty"`
	Result           *int32                     `protobuf:"varint,2,req,name=result" json:"result,omitempty"`
	ResponseRows     []*DataPlainRow            `protobuf:"bytes,3,rep,name=response_rows" json:"response_rows,omitempty"`
	Options          *DataTcaplusResponseOption `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *SSMsgRspTcaplusPlainTable) Reset()                    { *m = SSMsgRspTcaplusPlainTable{} }
func (m *SSMsgRspTcaplusPlainTable) String() string            { return proto.CompactTextString(m) }
func (*SSMsgRspTcaplusPlainTable) ProtoMessage()               {}
func (*SSMsgRspTcaplusPlainTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SSMsgRspTcaplusPlainTable) GetApiCmd() TcaplusAPICmd {
	if m != nil && m.ApiCmd != nil {
		return *m.ApiCmd
	}
	return TcaplusAPICmd_ENTCAPLUS_API_MIN
}

func (m *SSMsgRspTcaplusPlainTable) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *SSMsgRspTcaplusPlainTable) GetResponseRows() []*DataPlainRow {
	if m != nil {
		return m.ResponseRows
	}
	return nil
}

func (m *SSMsgRspTcaplusPlainTable) GetOptions() *DataTcaplusResponseOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type SSMsgReqTcaplusPlainTableBatch struct {
	TcaplusGateId    *int32                    `protobuf:"varint,1,req,name=tcaplus_gate_id" json:"tcaplus_gate_id,omitempty"`
	TableName        *string                   `protobuf:"bytes,2,req,name=table_name" json:"table_name,omitempty"`
	ApiCmd           *TcaplusAPICmd            `protobuf:"varint,3,req,name=api_cmd,enum=tcaplusgatesvr.TcaplusAPICmd" json:"api_cmd,omitempty"`
	RequestKeys      []*DataPlainRow           `protobuf:"bytes,4,rep,name=request_keys" json:"request_keys,omitempty"`
	RequestFeild     *DataPlainRow             `protobuf:"bytes,5,opt,name=request_feild" json:"request_feild,omitempty"`
	Options          *DataTcaplusRequestOption `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *SSMsgReqTcaplusPlainTableBatch) Reset()                    { *m = SSMsgReqTcaplusPlainTableBatch{} }
func (m *SSMsgReqTcaplusPlainTableBatch) String() string            { return proto.CompactTextString(m) }
func (*SSMsgReqTcaplusPlainTableBatch) ProtoMessage()               {}
func (*SSMsgReqTcaplusPlainTableBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SSMsgReqTcaplusPlainTableBatch) GetTcaplusGateId() int32 {
	if m != nil && m.TcaplusGateId != nil {
		return *m.TcaplusGateId
	}
	return 0
}

func (m *SSMsgReqTcaplusPlainTableBatch) GetTableName() string {
	if m != nil && m.TableName != nil {
		return *m.TableName
	}
	return ""
}

func (m *SSMsgReqTcaplusPlainTableBatch) GetApiCmd() TcaplusAPICmd {
	if m != nil && m.ApiCmd != nil {
		return *m.ApiCmd
	}
	return TcaplusAPICmd_ENTCAPLUS_API_MIN
}

func (m *SSMsgReqTcaplusPlainTableBatch) GetRequestKeys() []*DataPlainRow {
	if m != nil {
		return m.RequestKeys
	}
	return nil
}

func (m *SSMsgReqTcaplusPlainTableBatch) GetRequestFeild() *DataPlainRow {
	if m != nil {
		return m.RequestFeild
	}
	return nil
}

func (m *SSMsgReqTcaplusPlainTableBatch) GetOptions() *DataTcaplusRequestOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type SSMsgRspTcaplusPlainTableBatch struct {
	TableCmd         *TcaplusAPICmd             `protobuf:"varint,1,opt,name=table_cmd,enum=tcaplusgatesvr.TcaplusAPICmd" json:"table_cmd,omitempty"`
	Result           *int32                     `protobuf:"varint,2,req,name=result" json:"result,omitempty"`
	ResponseRows     []*DataPlainRow            `protobuf:"bytes,3,rep,name=response_rows" json:"response_rows,omitempty"`
	Options          *DataTcaplusResponseOption `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *SSMsgRspTcaplusPlainTableBatch) Reset()                    { *m = SSMsgRspTcaplusPlainTableBatch{} }
func (m *SSMsgRspTcaplusPlainTableBatch) String() string            { return proto.CompactTextString(m) }
func (*SSMsgRspTcaplusPlainTableBatch) ProtoMessage()               {}
func (*SSMsgRspTcaplusPlainTableBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *SSMsgRspTcaplusPlainTableBatch) GetTableCmd() TcaplusAPICmd {
	if m != nil && m.TableCmd != nil {
		return *m.TableCmd
	}
	return TcaplusAPICmd_ENTCAPLUS_API_MIN
}

func (m *SSMsgRspTcaplusPlainTableBatch) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *SSMsgRspTcaplusPlainTableBatch) GetResponseRows() []*DataPlainRow {
	if m != nil {
		return m.ResponseRows
	}
	return nil
}

func (m *SSMsgRspTcaplusPlainTableBatch) GetOptions() *DataTcaplusResponseOption {
	if m != nil {
		return m.Options
	}
	return nil
}

var E_BKey = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60000,
	Name:          "tcaplusgatesvr.b_key",
	Tag:           "varint,60000,opt,name=b_key",
	Filename:      "tcaplusgatesvr.proto",
}

var E_TInt8 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60001,
	Name:          "tcaplusgatesvr.t_int8",
	Tag:           "varint,60001,opt,name=t_int8",
	Filename:      "tcaplusgatesvr.proto",
}

var E_TUint8 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60002,
	Name:          "tcaplusgatesvr.t_uint8",
	Tag:           "varint,60002,opt,name=t_uint8",
	Filename:      "tcaplusgatesvr.proto",
}

var E_TInt16 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60003,
	Name:          "tcaplusgatesvr.t_int16",
	Tag:           "varint,60003,opt,name=t_int16",
	Filename:      "tcaplusgatesvr.proto",
}

var E_TUint16 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60004,
	Name:          "tcaplusgatesvr.t_uint16",
	Tag:           "varint,60004,opt,name=t_uint16",
	Filename:      "tcaplusgatesvr.proto",
}

var E_TBlob = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60005,
	Name:          "tcaplusgatesvr.t_blob",
	Tag:           "varint,60005,opt,name=t_blob",
	Filename:      "tcaplusgatesvr.proto",
}

var E_BCustomType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60006,
	Name:          "tcaplusgatesvr.b_custom_type",
	Tag:           "varint,60006,opt,name=b_custom_type",
	Filename:      "tcaplusgatesvr.proto",
}

var E_TableName = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         70002,
	Name:          "tcaplusgatesvr.table_name",
	Tag:           "bytes,70002,opt,name=table_name",
	Filename:      "tcaplusgatesvr.proto",
}

func init() {
	proto.RegisterType((*DBUserSevenSignUp)(nil), "tcaplusgatesvr.DBUserSevenSignUp")
	proto.RegisterType((*DBUserBestRecord)(nil), "tcaplusgatesvr.DBUserBestRecord")
	proto.RegisterType((*DBRoleActivity)(nil), "tcaplusgatesvr.DBRoleActivity")
	proto.RegisterType((*DBUserAccount2IdInfo)(nil), "tcaplusgatesvr.DBUserAccount2IdInfo")
	proto.RegisterType((*DBUserAccount2IdNew)(nil), "tcaplusgatesvr.DBUserAccount2IdNew")
	proto.RegisterType((*DBUserId2AccountInfo)(nil), "tcaplusgatesvr.DBUserId2AccountInfo")
	proto.RegisterType((*DBNQGUserScore)(nil), "tcaplusgatesvr.DBNQGUserScore")
	proto.RegisterType((*DBNQGUserInfo)(nil), "tcaplusgatesvr.DBNQGUserInfo")
	proto.RegisterType((*DBNQGUserCoin)(nil), "tcaplusgatesvr.DBNQGUserCoin")
	proto.RegisterType((*DBNQGNewerGift)(nil), "tcaplusgatesvr.DBNQGNewerGift")
	proto.RegisterType((*DBNQGTrunkMission)(nil), "tcaplusgatesvr.DBNQGTrunkMission")
	proto.RegisterType((*DBNQGBranchMission)(nil), "tcaplusgatesvr.DBNQGBranchMission")
	proto.RegisterType((*DBPlayerDailyRoom)(nil), "tcaplusgatesvr.DBPlayerDailyRoom")
	proto.RegisterType((*DBPlayerGameRoom)(nil), "tcaplusgatesvr.DBPlayerGameRoom")
	proto.RegisterType((*DBPlayerBrokeAward)(nil), "tcaplusgatesvr.DBPlayerBrokeAward")
	proto.RegisterType((*DBPlayerExt)(nil), "tcaplusgatesvr.DBPlayerExt")
	proto.RegisterType((*DBPlayerGameStatis)(nil), "tcaplusgatesvr.DBPlayerGameStatis")
	proto.RegisterType((*DBDailyGameTableStatis)(nil), "tcaplusgatesvr.DBDailyGameTableStatis")
	proto.RegisterType((*DBNQGHiddenMission)(nil), "tcaplusgatesvr.DBNQGHiddenMission")
	proto.RegisterType((*DBNQGRushMission)(nil), "tcaplusgatesvr.DBNQGRushMission")
	proto.RegisterType((*DBNQGUserItem)(nil), "tcaplusgatesvr.DBNQGUserItem")
	proto.RegisterType((*DuoBaoUserHistory)(nil), "tcaplusgatesvr.DuoBaoUserHistory")
	proto.RegisterType((*DuoBaoDuihuanUserHistory)(nil), "tcaplusgatesvr.DuoBaoDuihuanUserHistory")
	proto.RegisterType((*DuoBaoUserHistoryCodes)(nil), "tcaplusgatesvr.DuoBaoUserHistoryCodes")
	proto.RegisterType((*DuoBaoUserContact)(nil), "tcaplusgatesvr.DuoBaoUserContact")
	proto.RegisterType((*DBRoleMail)(nil), "tcaplusgatesvr.DBRoleMail")
	proto.RegisterType((*DBRoleGame)(nil), "tcaplusgatesvr.DBRoleGame")
	proto.RegisterType((*DBRoleData)(nil), "tcaplusgatesvr.DBRoleData")
	proto.RegisterType((*DBGameReportDaily)(nil), "tcaplusgatesvr.DBGameReportDaily")
	proto.RegisterType((*DBWorldRank)(nil), "tcaplusgatesvr.DBWorldRank")
	proto.RegisterType((*DBNQGHealthGame)(nil), "tcaplusgatesvr.DBNQGHealthGame")
	proto.RegisterType((*DBNQGRedPackage)(nil), "tcaplusgatesvr.DBNQGRedPackage")
	proto.RegisterType((*DBRoleDiamond)(nil), "tcaplusgatesvr.DBRoleDiamond")
	proto.RegisterType((*DBOnlineCnt)(nil), "tcaplusgatesvr.DBOnlineCnt")
	proto.RegisterType((*DBHealthGameInfo)(nil), "tcaplusgatesvr.DBHealthGameInfo")
	proto.RegisterType((*DataPlainColumn)(nil), "tcaplusgatesvr.DataPlainColumn")
	proto.RegisterType((*DataPlainRow)(nil), "tcaplusgatesvr.DataPlainRow")
	proto.RegisterType((*DataTcaplusRequestOption)(nil), "tcaplusgatesvr.DataTcaplusRequestOption")
	proto.RegisterType((*DataTcaplusResponseOption)(nil), "tcaplusgatesvr.DataTcaplusResponseOption")
	proto.RegisterType((*DataOperation)(nil), "tcaplusgatesvr.DataOperation")
	proto.RegisterType((*SSMsgReqTcaplusPlainTable)(nil), "tcaplusgatesvr.SSMsgReqTcaplusPlainTable")
	proto.RegisterType((*SSMsgRspTcaplusPlainTable)(nil), "tcaplusgatesvr.SSMsgRspTcaplusPlainTable")
	proto.RegisterType((*SSMsgReqTcaplusPlainTableBatch)(nil), "tcaplusgatesvr.SSMsgReqTcaplusPlainTableBatch")
	proto.RegisterType((*SSMsgRspTcaplusPlainTableBatch)(nil), "tcaplusgatesvr.SSMsgRspTcaplusPlainTableBatch")
	proto.RegisterEnum("tcaplusgatesvr.TcaplusAPICmd", TcaplusAPICmd_name, TcaplusAPICmd_value)
	proto.RegisterEnum("tcaplusgatesvr.SSDBTcaplusErr", SSDBTcaplusErr_name, SSDBTcaplusErr_value)
	proto.RegisterEnum("tcaplusgatesvr.TcaplusDataType", TcaplusDataType_name, TcaplusDataType_value)
	proto.RegisterEnum("tcaplusgatesvr.DataColumnFlag", DataColumnFlag_name, DataColumnFlag_value)
	proto.RegisterEnum("tcaplusgatesvr.OperationType", OperationType_name, OperationType_value)
	proto.RegisterEnum("tcaplusgatesvr.TcaplusAPIErr", TcaplusAPIErr_name, TcaplusAPIErr_value)
	proto.RegisterExtension(E_BKey)
	proto.RegisterExtension(E_TInt8)
	proto.RegisterExtension(E_TUint8)
	proto.RegisterExtension(E_TInt16)
	proto.RegisterExtension(E_TUint16)
	proto.RegisterExtension(E_TBlob)
	proto.RegisterExtension(E_BCustomType)
	proto.RegisterExtension(E_TableName)
}

func init() { proto.RegisterFile("tcaplusgatesvr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 9371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7d, 0x7f, 0x6c, 0x1c, 0xd7,
	0x9d, 0x5f, 0x48, 0x8a, 0x14, 0xf9, 0x28, 0x92, 0x8f, 0x2b, 0x59, 0xa6, 0x7e, 0xd9, 0xf2, 0xc6,
	0x71, 0x14, 0xe7, 0x22, 0x5b, 0x92, 0xad, 0x38, 0xba, 0xf4, 0x90, 0xd9, 0x9d, 0xc7, 0xe5, 0x44,
	0xbb, 0x33, 0x9b, 0x99, 0x59, 0x49, 0xf4, 0xfd, 0x31, 0x58, 0x71, 0x87, 0xd4, 0x56, 0xcb, 0x5d,
	0x7a, 0x77, 0x68, 0x59, 0x87, 0x02, 0x75, 0x9a, 0x0a, 0xe9, 0x35, 0x48, 0x8d, 0x28, 0x48, 0xd5,
	0x43, 0x90, 0x73, 0xd3, 0x34, 0x97, 0x0b, 0x5c, 0xc3, 0xe7, 0xa6, 0x41, 0x60, 0x18, 0x86, 0x6b,
	0x18, 0x86, 0x61, 0xb8, 0x86, 0x65, 0xb8, 0x86, 0x61, 0x18, 0x86, 0xab, 0xfa, 0x74, 0x92, 0xaa,
	0x6e, 0x59, 0xdd, 0x9e, 0xeb, 0x73, 0xf7, 0xc8, 0x14, 0xef, 0xfb, 0xde, 0xcc, 0xbc, 0xd9, 0x7d,
	0x33, 0x92, 0x11, 0xdc, 0xa1, 0xfa, 0x8b, 0x9c, 0xf7, 0xf9, 0xbe, 0xf7, 0x7d, 0xdf, 0xdf, 0xdf,
	0x37, 0x6f, 0x28, 0xb4, 0xcd, 0x5b, 0x28, 0xaf, 0xd4, 0x56, 0x5b, 0x4b, 0x65, 0xcf, 0x6d, 0x3d,
	0xda, 0xdc, 0xbf, 0xd2, 0x6c, 0x78, 0x8d, 0xd4, 0x64, 0xf4, 0xe9, 0xce, 0xbd, 0x4b, 0x8d, 0xc6,
	0x52, 0xcd, 0xbd, 0x0f, 0x46, 0x4f, 0xae, 0x2e, 0xde, 0x57, 0x71, 0x5b, 0x0b, 0xcd, 0xea, 0x8a,
	0xd7, 0xe0, 0x14, 0xe9, 0x7f, 0x82, 0xa6, 0xd5, 0x4c, 0xa9, 0xe5, 0x36, 0x2d, 0xf7, 0x51, 0xb7,
	0x6e, 0x55, 0x97, 0xea, 0xa5, 0x95, 0xd4, 0x56, 0x34, 0x5c, 0x5e, 0x59, 0xa9, 0x56, 0x66, 0x06,
	0xf6, 0x0e, 0xee, 0x1b, 0xce, 0x6c, 0x7a, 0xfc, 0xcf, 0xf6, 0x0c, 0xa4, 0xa6, 0xd1, 0xd0, 0x6a,
	0xb5, 0x3e, 0x33, 0xb8, 0x77, 0x70, 0xdf, 0x26, 0xfe, 0x68, 0x3b, 0x9a, 0xac, 0x95, 0x5b, 0x9e,
	0xd3, 0xaa, 0x2e, 0xd5, 0x1d, 0xaf, 0xba, 0xec, 0xce, 0x0c, 0xed, 0x1d, 0xd8, 0x37, 0x91, 0xc2,
	0x68, 0x14, 0x1e, 0xd5, 0x57, 0x97, 0x67, 0x36, 0xd1, 0x27, 0x47, 0x6e, 0x3b, 0x7f, 0x21, 0x3d,
	0xbd, 0xda, 0x72, 0x9b, 0x4e, 0x8b, 0xae, 0x03, 0x14, 0xab, 0x2b, 0xe9, 0xff, 0x30, 0x80, 0x30,
	0x5b, 0x3e, 0xe3, 0xb6, 0x3c, 0xd3, 0x5d, 0x68, 0x34, 0x2b, 0xfe, 0x42, 0x03, 0xc2, 0x42, 0x01,
	0x43, 0x83, 0x02, 0x43, 0x29, 0xb4, 0xa9, 0xb9, 0x5a, 0xa3, 0x6b, 0x0e, 0xee, 0x1b, 0xe3, 0xcf,
	0xf6, 0xa0, 0xf1, 0x93, 0x6e, 0xcb, 0x73, 0x9a, 0x30, 0x15, 0x2c, 0x3e, 0x96, 0x19, 0xfd, 0xf3,
	0x3f, 0xdb, 0x33, 0xf0, 0x17, 0x8c, 0x04, 0xc1, 0x70, 0x6b, 0xa1, 0xd1, 0x74, 0x67, 0x86, 0xf7,
	0x0e, 0xec, 0x1b, 0x4e, 0x6d, 0x45, 0xe3, 0x8b, 0xd5, 0x7a, 0xb5, 0x75, 0x8a, 0xed, 0x60, 0x84,
	0x3e, 0x3c, 0xb2, 0xed, 0xfc, 0x85, 0x34, 0x06, 0x7e, 0x85, 0xe9, 0xd2, 0x97, 0x06, 0xd0, 0xa4,
	0x9a, 0x31, 0x1b, 0x35, 0x57, 0x59, 0xf0, 0xaa, 0x8f, 0x56, 0xbd, 0xb3, 0x37, 0x65, 0x76, 0x82,
	0x3f, 0x9c, 0x41, 0x23, 0x6c, 0xcf, 0x20, 0x22, 0x91, 0xa7, 0x9d, 0x68, 0xb4, 0xd9, 0x58, 0xad,
	0xb9, 0x9e, 0xe7, 0xf6, 0xf1, 0x7b, 0x17, 0x9a, 0x5a, 0xae, 0xb6, 0x5a, 0xd5, 0x46, 0xdd, 0xa9,
	0x35, 0x3c, 0xcf, 0x6d, 0x9e, 0x05, 0xa6, 0x45, 0xc8, 0x6e, 0x84, 0xea, 0xee, 0x19, 0xb7, 0xe9,
	0x2c, 0x55, 0x17, 0x3d, 0xe0, 0x5e, 0x1c, 0xa5, 0xf2, 0x68, 0x36, 0x4e, 0xbb, 0x4e, 0xf9, 0x4c,
	0xb9, 0x59, 0x99, 0xd9, 0x1c, 0x1d, 0x3e, 0x32, 0x7d, 0xfe, 0x42, 0x7a, 0xa2, 0xd9, 0xa8, 0xb9,
	0x4e, 0x99, 0x6f, 0x28, 0xfd, 0xef, 0x07, 0xd0, 0x36, 0xa6, 0x12, 0x65, 0x61, 0xa1, 0xb1, 0x5a,
	0xf7, 0x0e, 0x6a, 0x15, 0xad, 0xbe, 0xd8, 0x48, 0x6d, 0x43, 0x23, 0xc6, 0x8a, 0x5b, 0xd7, 0x54,
	0xd8, 0xac, 0x2f, 0xf0, 0x71, 0x34, 0x54, 0x02, 0xab, 0x18, 0xd8, 0xb7, 0x29, 0x35, 0x8d, 0xc6,
	0x72, 0xe5, 0x65, 0x57, 0x59, 0x59, 0xd1, 0x54, 0xd8, 0xe7, 0x70, 0x6a, 0x0a, 0x6d, 0x56, 0x2a,
	0x15, 0x9b, 0x4a, 0x16, 0x2c, 0x81, 0x0a, 0xc2, 0xf2, 0xca, 0xde, 0x6a, 0x8b, 0x89, 0x3f, 0x33,
	0xfa, 0x2f, 0x7c, 0x5e, 0xa7, 0xd1, 0x58, 0xa6, 0xd6, 0x58, 0x38, 0x6d, 0xfb, 0x6a, 0x98, 0x38,
	0x32, 0x73, 0xfe, 0x42, 0x7a, 0x1b, 0xa8, 0xa1, 0xcc, 0x99, 0xa9, 0x56, 0x9c, 0x6a, 0x7d, 0xb1,
	0x91, 0xfe, 0x97, 0x83, 0x68, 0x6b, 0x2f, 0x9b, 0xba, 0x7b, 0x26, 0x86, 0xcb, 0x6d, 0x68, 0xa4,
	0x58, 0x2b, 0x7b, 0x9a, 0x1a, 0x31, 0x20, 0xce, 0xfb, 0x50, 0x3f, 0xef, 0x9b, 0x7a, 0x79, 0x1f,
	0xee, 0xe1, 0x7d, 0x24, 0x89, 0xf7, 0xcd, 0x00, 0xde, 0x8d, 0xb6, 0xcd, 0xb9, 0xe5, 0x9a, 0x77,
	0x0a, 0x06, 0x32, 0xee, 0x52, 0xb5, 0x0e, 0xa3, 0xa3, 0x30, 0xba, 0x13, 0xa5, 0x84, 0x51, 0x52,
	0x67, 0xcb, 0x8c, 0xc1, 0xd8, 0x76, 0x34, 0x29, 0x8c, 0x15, 0x5a, 0x4b, 0x33, 0x88, 0xea, 0xed,
	0xc8, 0xed, 0xe7, 0x2f, 0xa4, 0xb7, 0xf6, 0x4a, 0xa3, 0xee, 0x9e, 0x49, 0x7f, 0x12, 0xe8, 0x4c,
	0xab, 0x1c, 0xe4, 0xf2, 0x00, 0x9d, 0x4d, 0xb3, 0x1d, 0x8a, 0xd6, 0x79, 0xbb, 0xb8, 0x4f, 0x51,
	0x1a, 0x13, 0x68, 0x38, 0x54, 0xdc, 0x58, 0x6a, 0x32, 0x10, 0x24, 0x18, 0x25, 0x75, 0x13, 0x65,
	0x61, 0xc1, 0x6d, 0xb5, 0xec, 0xc6, 0x69, 0xb7, 0xce, 0xcc, 0x30, 0x85, 0xd0, 0x60, 0x71, 0x91,
	0x19, 0x1d, 0xa5, 0x2f, 0x2e, 0x1e, 0x75, 0xcf, 0x32, 0x23, 0xa3, 0x31, 0xa0, 0x58, 0x3e, 0xcb,
	0xc0, 0xa3, 0xf0, 0x24, 0x85, 0x50, 0xb6, 0x56, 0x75, 0xeb, 0x9e, 0x7d, 0x76, 0x85, 0x6d, 0x75,
	0x98, 0xcf, 0x4a, 0xf9, 0x85, 0x87, 0xa8, 0x57, 0xee, 0xe3, 0x3d, 0x66, 0x50, 0xad, 0x1c, 0xe4,
	0x7b, 0x67, 0x66, 0xf0, 0x17, 0xe0, 0x91, 0xfa, 0xb7, 0x72, 0x10, 0xc2, 0xa8, 0x57, 0xcb, 0x3c,
	0x72, 0x1b, 0x1a, 0x69, 0x9d, 0x6d, 0x39, 0x3d, 0xf1, 0x63, 0x02, 0x0d, 0xb3, 0x38, 0xc0, 0x2c,
	0x75, 0x1c, 0x0d, 0x9d, 0xa9, 0xd6, 0xb9, 0xea, 0xb7, 0xa0, 0x4d, 0xb5, 0x46, 0xcb, 0x0f, 0x11,
	0xe3, 0x68, 0xc8, 0x7d, 0x64, 0x95, 0x29, 0x1d, 0x7e, 0x69, 0x2d, 0xc0, 0x2e, 0x81, 0xd5, 0x6a,
	0xfd, 0xd1, 0x72, 0xad, 0x5a, 0x81, 0x4d, 0x02, 0xa1, 0xe7, 0x6b, 0x72, 0xe8, 0x48, 0xea, 0xfc,
	0x85, 0xf4, 0x64, 0xfd, 0x91, 0x25, 0x87, 0x85, 0x3e, 0xba, 0x5a, 0x7a, 0x1e, 0x4d, 0x04, 0x1c,
	0xfb, 0x4a, 0xba, 0x35, 0x86, 0xb7, 0xa0, 0x4d, 0x74, 0xd3, 0x4c, 0x41, 0xcc, 0x77, 0x83, 0xb9,
	0x41, 0x1a, 0x67, 0x84, 0xa9, 0xb3, 0x8d, 0x6a, 0xfd, 0x33, 0x4d, 0xbd, 0xd0, 0xe0, 0xbe, 0x30,
	0x44, 0x25, 0xe3, 0x3e, 0xe6, 0x39, 0x07, 0x40, 0x18, 0xc1, 0xaf, 0x07, 0x41, 0x1a, 0x43, 0x3d,
	0x0b, 0x53, 0xb2, 0xf4, 0x7f, 0xf6, 0xd5, 0xa0, 0xd3, 0x50, 0x94, 0xab, 0x2e, 0x7a, 0xb7, 0x1c,
	0xc5, 0xb7, 0xa2, 0xe1, 0xd6, 0xea, 0xc9, 0x6a, 0x05, 0xc2, 0xf8, 0x70, 0x60, 0xa4, 0x53, 0x90,
	0x58, 0x6a, 0x8d, 0xa5, 0x2a, 0xcf, 0x2c, 0x9b, 0xc0, 0x4b, 0xf7, 0xa2, 0x49, 0x1a, 0xe7, 0x9c,
	0x8a, 0x5b, 0xab, 0x3e, 0xea, 0x36, 0xdd, 0x4a, 0x5f, 0x14, 0xc1, 0x68, 0xb4, 0xe9, 0xb6, 0xdc,
	0xe6, 0xa3, 0xee, 0x01, 0xae, 0xb0, 0xf0, 0xc9, 0x41, 0xa6, 0xb5, 0x50, 0x2d, 0x61, 0xe4, 0x4c,
	0xff, 0xb3, 0x01, 0x9a, 0x09, 0xf5, 0x6f, 0xe5, 0xec, 0xe6, 0x6a, 0xfd, 0x74, 0x81, 0x45, 0x5d,
	0xd9, 0x2e, 0xfc, 0xb4, 0x33, 0x28, 0xc4, 0x97, 0xad, 0x68, 0xb8, 0xe6, 0x3e, 0xea, 0xd6, 0x22,
	0xb9, 0x68, 0x27, 0x1a, 0xe5, 0xc1, 0xbb, 0xd5, 0x1b, 0xd8, 0x59, 0x3e, 0xa4, 0x1c, 0x78, 0x74,
	0x35, 0x87, 0xe3, 0xd2, 0x7f, 0x88, 0x52, 0xc0, 0x43, 0xa6, 0x59, 0xae, 0x2f, 0x9c, 0x4a, 0x60,
	0x42, 0x9c, 0x7b, 0xb0, 0x67, 0xee, 0xed, 0xe7, 0x2f, 0xa4, 0x53, 0x74, 0xee, 0x93, 0x30, 0x4b,
	0x30, 0xf9, 0x1f, 0xd1, 0x0d, 0x16, 0x6b, 0xe5, 0xb3, 0x6e, 0x53, 0x2d, 0x57, 0x6b, 0x67, 0xcd,
	0x46, 0x63, 0x59, 0x36, 0xf7, 0x0c, 0xc2, 0x20, 0xfc, 0xd5, 0x95, 0x4a, 0xd9, 0x73, 0x99, 0xf4,
	0x07, 0x21, 0x30, 0xdd, 0x85, 0xa6, 0x2a, 0x94, 0xd2, 0x69, 0x36, 0x1a, 0xcb, 0x4e, 0xa5, 0xec,
	0x95, 0x7b, 0xb3, 0x19, 0xdb, 0xd8, 0x0a, 0x2c, 0xe2, 0x84, 0xd8, 0xf4, 0x7f, 0x82, 0x44, 0xcf,
	0x16, 0xa7, 0xe1, 0x27, 0x6e, 0xed, 0x5b, 0x16, 0xee, 0xed, 0x68, 0x0c, 0x98, 0xf0, 0x68, 0xd8,
	0xd8, 0x24, 0x24, 0xda, 0x5d, 0x7c, 0x00, 0xb8, 0xeb, 0x4d, 0x96, 0xb2, 0xad, 0xb1, 0x4c, 0x03,
	0x09, 0x9f, 0xf3, 0xbd, 0x54, 0x5e, 0x76, 0x19, 0xdb, 0xcb, 0x54, 0x1f, 0x8c, 0xeb, 0x0c, 0x4d,
	0xa3, 0x0a, 0xcd, 0xa2, 0x32, 0xbe, 0x7d, 0x83, 0x85, 0x34, 0x2b, 0x8a, 0x6c, 0x2b, 0x1a, 0x0f,
	0x9f, 0xb5, 0x58, 0x7d, 0xc4, 0x34, 0xc4, 0x17, 0x13, 0xd2, 0x73, 0xba, 0x89, 0xc6, 0xfd, 0xe5,
	0xc8, 0x63, 0x52, 0x17, 0xba, 0x0b, 0x4d, 0xd5, 0xdd, 0x33, 0x60, 0xb1, 0x4e, 0x8b, 0xa5, 0xa2,
	0xc1, 0x1e, 0x07, 0xd8, 0x83, 0xc6, 0xa9, 0x08, 0x9d, 0x95, 0xa6, 0xbb, 0xe8, 0x36, 0xfb, 0x14,
	0x34, 0x79, 0xfe, 0x42, 0x1a, 0xf1, 0xb5, 0xdd, 0xc7, 0xbc, 0xf4, 0x3f, 0x0d, 0xb7, 0x48, 0x15,
	0x43, 0xf3, 0x5b, 0xb5, 0xf5, 0xd9, 0xcc, 0xe2, 0x6e, 0xe4, 0x6f, 0x06, 0x16, 0x6e, 0xba, 0x2b,
	0x8d, 0xa6, 0xd7, 0xb7, 0xb0, 0xb8, 0x69, 0x90, 0x70, 0x0b, 0x96, 0x4a, 0xff, 0xc7, 0x41, 0xb4,
	0x5d, 0xcd, 0x80, 0x45, 0x52, 0x06, 0xec, 0xf2, 0xc9, 0x9a, 0xcf, 0x85, 0x6f, 0x0d, 0x03, 0x32,
	0x6b, 0x18, 0x8c, 0xb3, 0x86, 0x21, 0xc1, 0x1a, 0xb6, 0xa2, 0x71, 0xb7, 0xee, 0xb9, 0x4d, 0x2e,
	0x7e, 0x56, 0x82, 0x4c, 0xa3, 0x31, 0x1a, 0xb5, 0x9c, 0x53, 0xd5, 0xa5, 0x53, 0x3c, 0xc2, 0x63,
	0x34, 0x0a, 0x8f, 0x6a, 0x8d, 0x33, 0x3c, 0x6a, 0xa4, 0x10, 0x82, 0x27, 0x5e, 0xc3, 0x2b, 0xd7,
	0x78, 0xb4, 0x4f, 0x21, 0x04, 0x31, 0x9c, 0x51, 0xb2, 0x80, 0x3f, 0x8d, 0xc6, 0xd8, 0x33, 0x4a,
	0x1a, 0x24, 0x35, 0xf6, 0x88, 0xd1, 0xb2, 0xa4, 0xb6, 0x1d, 0x4d, 0x9e, 0xa9, 0xd6, 0x9d, 0xe5,
	0xd5, 0x9a, 0x57, 0x65, 0xf4, 0xe3, 0xf0, 0xdc, 0xb7, 0x1c, 0x1a, 0xa2, 0x3c, 0x26, 0xd5, 0x2d,
	0x60, 0x24, 0xbb, 0xce, 0x5f, 0x48, 0xdf, 0xce, 0x5c, 0x08, 0xc4, 0xe5, 0x51, 0xc1, 0xf8, 0x42,
	0xf3, 0x03, 0xc5, 0x5c, 0xb5, 0x52, 0x71, 0xeb, 0xbf, 0x6b, 0xa0, 0x38, 0x05, 0xb3, 0x04, 0x81,
	0xe2, 0x71, 0x70, 0x56, 0xfd, 0x5b, 0x39, 0x73, 0xb5, 0x75, 0xea, 0xef, 0x3b, 0x12, 0x82, 0xe3,
	0x51, 0x26, 0x9a, 0xab, 0xad, 0x30, 0x56, 0xbd, 0x33, 0x20, 0x66, 0x49, 0xcf, 0x5d, 0xbe, 0xf5,
	0x54, 0x76, 0x1b, 0xda, 0x5c, 0xf5, 0xdc, 0x65, 0xa7, 0x27, 0xa5, 0x50, 0xf0, 0xea, 0x49, 0xfa,
	0x14, 0x32, 0x3c, 0x7f, 0x3a, 0x85, 0x36, 0x83, 0xf4, 0xbd, 0x65, 0x5e, 0xe2, 0x4d, 0xa2, 0x91,
	0xf2, 0x32, 0xad, 0x2f, 0xb8, 0x19, 0x4c, 0xa0, 0xe1, 0xa6, 0xdb, 0x72, 0x0e, 0x70, 0x0b, 0xe0,
	0xbf, 0x1e, 0xe4, 0xca, 0xe7, 0xbf, 0x1e, 0xe2, 0x8a, 0xe7, 0xbf, 0x3e, 0x00, 0x2a, 0xef, 0x4d,
	0x94, 0x94, 0xa9, 0xf4, 0x6b, 0x83, 0x68, 0x5a, 0x5d, 0x6d, 0x64, 0xca, 0x0d, 0xba, 0xb1, 0xb9,
	0x6a, 0xcb, 0x6b, 0x34, 0xa5, 0x4d, 0xc4, 0x76, 0x34, 0xba, 0xd4, 0x68, 0x54, 0xfa, 0x76, 0x37,
	0x8d, 0x86, 0xaa, 0x95, 0xc7, 0x22, 0x3b, 0xa3, 0x2c, 0xaf, 0xac, 0xb0, 0x9d, 0x0d, 0x32, 0xf3,
	0xa3, 0xd5, 0x7c, 0x83, 0x27, 0xce, 0x61, 0xea, 0x0e, 0x94, 0x35, 0xe6, 0x02, 0x23, 0x80, 0x99,
	0x40, 0xc3, 0x0b, 0x8d, 0x8a, 0xdb, 0x9a, 0xd9, 0x4c, 0xd5, 0x44, 0xc5, 0xf0, 0x8f, 0x1f, 0x71,
	0x16, 0x1a, 0x2d, 0x6f, 0x66, 0xd4, 0x9f, 0xa3, 0xb1, 0xe2, 0xd6, 0xa9, 0x55, 0xae, 0xd6, 0xbc,
	0x99, 0x31, 0x78, 0x38, 0x8d, 0xc6, 0xaa, 0x2d, 0xe7, 0x4c, 0xb5, 0x5e, 0x77, 0x9b, 0x33, 0x08,
	0x1e, 0x41, 0x6e, 0xa5, 0xb1, 0xcb, 0xad, 0xcc, 0x8c, 0xc3, 0x93, 0x14, 0x42, 0x3c, 0x39, 0x53,
	0x8e, 0xb6, 0xc0, 0xf4, 0x5b, 0xd1, 0xb8, 0xff, 0x6c, 0xa1, 0xb1, 0x3c, 0x33, 0x01, 0x0f, 0x69,
	0x3c, 0x59, 0x5d, 0x38, 0xed, 0xb4, 0xaa, 0xf5, 0xa5, 0x9a, 0xeb, 0x50, 0x76, 0x66, 0x26, 0xfd,
	0xd2, 0xb1, 0xda, 0x72, 0x9a, 0x8d, 0x93, 0x0d, 0x6f, 0x66, 0x0a, 0x12, 0xf6, 0xd6, 0xf3, 0x17,
	0xd2, 0x53, 0x95, 0xd5, 0xc6, 0xc9, 0x72, 0x83, 0x09, 0xf3, 0x54, 0xb5, 0x95, 0xfe, 0x78, 0x00,
	0xcd, 0x30, 0x59, 0xaa, 0xab, 0xd5, 0x53, 0xab, 0xe5, 0xfa, 0x3f, 0xb0, 0x48, 0x05, 0xa1, 0x8d,
	0xf4, 0x09, 0x63, 0xb3, 0x44, 0x18, 0xa3, 0x32, 0x61, 0x8c, 0xc1, 0x43, 0xd0, 0x07, 0xb5, 0x3a,
	0x10, 0x2b, 0xf7, 0x7d, 0xb6, 0xdf, 0x0a, 0xdb, 0x5c, 0xb8, 0xef, 0x7f, 0x3e, 0x80, 0xb6, 0xf7,
	0xd9, 0x50, 0x96, 0x6a, 0xf3, 0x77, 0xdc, 0xf5, 0x34, 0x1a, 0x2b, 0xd7, 0x6a, 0x0e, 0x33, 0x0c,
	0xba, 0xf1, 0xb1, 0x23, 0x3b, 0xce, 0x5f, 0x48, 0xdf, 0xd6, 0x23, 0x78, 0x06, 0xa0, 0x35, 0x9f,
	0x60, 0xca, 0xd9, 0x46, 0xdd, 0x2b, 0x2f, 0x78, 0x31, 0x6e, 0xca, 0x85, 0x19, 0x5d, 0x7f, 0xac,
	0xe9, 0x96, 0x6b, 0x4e, 0xbd, 0xbc, 0xcc, 0x5b, 0x78, 0xda, 0x4d, 0x3c, 0xf2, 0x08, 0x5b, 0x98,
	0x0e, 0xaf, 0x9c, 0x6a, 0xd4, 0x5d, 0x38, 0x43, 0x18, 0x0e, 0x1e, 0x35, 0x5a, 0x1e, 0xb3, 0x94,
	0x11, 0xdf, 0x6e, 0xcb, 0x95, 0x4a, 0xd3, 0x6d, 0xf9, 0x86, 0xbc, 0x15, 0x8d, 0x57, 0x2b, 0x6e,
	0xdd, 0xab, 0x7a, 0x67, 0x1d, 0x5e, 0x93, 0xf3, 0xbe, 0x49, 0xdc, 0xc4, 0x02, 0x63, 0x36, 0x7d,
	0x7e, 0x00, 0x21, 0xd6, 0xcf, 0x17, 0xca, 0xd5, 0x9a, 0x8c, 0xf7, 0xdb, 0xd0, 0xe6, 0xe5, 0x72,
	0xb5, 0xe6, 0x33, 0x3f, 0x14, 0x32, 0xdf, 0x72, 0xeb, 0x15, 0xf1, 0xcc, 0x63, 0x0b, 0xda, 0xb4,
	0x58, 0x2b, 0x2f, 0xf1, 0x14, 0x43, 0x7b, 0x0b, 0xaf, 0xec, 0xf9, 0x0d, 0xc4, 0x2e, 0x34, 0x06,
	0xd3, 0x40, 0x51, 0xd2, 0xd3, 0xa3, 0x1f, 0x99, 0x38, 0x7f, 0x21, 0x3d, 0x06, 0x4d, 0x38, 0xc5,
	0xa4, 0xcf, 0x05, 0x4c, 0xd1, 0x74, 0xf8, 0xd9, 0x32, 0xf1, 0x6e, 0x84, 0xc2, 0x8c, 0xd1, 0x77,
	0xd2, 0xb0, 0x07, 0x8d, 0xb3, 0xd2, 0x46, 0x7a, 0x38, 0x22, 0xf0, 0x41, 0x51, 0xe9, 0xef, 0x0f,
	0xfa, 0x7c, 0xa8, 0x65, 0xaf, 0x2c, 0xe3, 0xe3, 0x4e, 0x34, 0x41, 0x37, 0xe4, 0x00, 0x4d, 0xab,
	0xba, 0xdc, 0x9b, 0x60, 0x68, 0xb5, 0x1e, 0x02, 0x56, 0x9a, 0x8d, 0xfe, 0xc3, 0x0f, 0x7f, 0x0a,
	0x90, 0x0e, 0x9d, 0xa2, 0xf7, 0x04, 0xe4, 0x1e, 0xb4, 0x0d, 0x00, 0xf5, 0x86, 0x57, 0x5d, 0x08,
	0x8f, 0x29, 0xfa, 0x2a, 0xbb, 0xad, 0x68, 0x7c, 0xa1, 0xe9, 0x46, 0x8a, 0x3a, 0x70, 0x3f, 0xa1,
	0x83, 0xd8, 0xec, 0x27, 0xe7, 0x5a, 0x63, 0xa9, 0xb1, 0xca, 0x73, 0xed, 0xa8, 0xff, 0xb0, 0x51,
	0xaf, 0x55, 0xeb, 0x9c, 0x1a, 0xa2, 0xb9, 0x20, 0x0f, 0xca, 0x41, 0xfa, 0x5d, 0x68, 0x10, 0xa0,
	0x78, 0x85, 0x02, 0x07, 0x2a, 0x16, 0x5a, 0x79, 0x84, 0x4a, 0x18, 0x10, 0x2a, 0x8f, 0x30, 0x39,
	0x0e, 0xc8, 0x92, 0xe3, 0x40, 0x5c, 0x25, 0x3b, 0x20, 0xcc, 0x80, 0xe8, 0xac, 0xbc, 0x8a, 0x18,
	0xf6, 0xcb, 0x49, 0xb1, 0x9e, 0x81, 0xda, 0x55, 0x52, 0xaa, 0x00, 0x50, 0x34, 0x8f, 0xd1, 0xf0,
	0x14, 0x0e, 0x4c, 0x80, 0x97, 0xe6, 0xb0, 0x91, 0xf4, 0x12, 0x2d, 0x3b, 0x8f, 0x37, 0x9a, 0xb5,
	0x8a, 0x59, 0xae, 0x9f, 0xa6, 0x36, 0xdf, 0x2c, 0xd7, 0x4f, 0x3b, 0xfc, 0xfc, 0x6f, 0x42, 0xea,
	0xc6, 0x62, 0xb9, 0x4d, 0xc1, 0xd2, 0x66, 0x00, 0x6a, 0xcd, 0x33, 0x74, 0x62, 0x87, 0x82, 0xd2,
	0xcb, 0x68, 0x8a, 0x55, 0x2d, 0x70, 0xba, 0x01, 0xe6, 0xbd, 0x0d, 0x8d, 0xd0, 0x44, 0xc3, 0xd7,
	0x1a, 0x8b, 0x3f, 0x6b, 0xdc, 0x8d, 0xd0, 0x29, 0x20, 0x0b, 0x5b, 0x60, 0x61, 0x25, 0x48, 0x10,
	0x50, 0xca, 0x00, 0x86, 0x59, 0xf0, 0xdf, 0x0e, 0xf0, 0xf5, 0x4c, 0xb7, 0x52, 0x2c, 0x2f, 0x9c,
	0x2e, 0x2f, 0xb9, 0x29, 0x8c, 0x06, 0xf9, 0x5a, 0x43, 0xe1, 0x29, 0xd0, 0x6a, 0x70, 0x82, 0x35,
	0x89, 0x46, 0x78, 0x59, 0x3d, 0xe4, 0x57, 0x77, 0x20, 0xd5, 0xf0, 0x28, 0x13, 0x0e, 0x37, 0xa9,
	0xef, 0xb3, 0xc0, 0xc4, 0xe5, 0xcf, 0x40, 0xd0, 0x42, 0x8f, 0xf8, 0x35, 0x26, 0xa0, 0xe0, 0xd1,
	0x66, 0x1f, 0xd6, 0xf2, 0xca, 0x4d, 0xc1, 0xf0, 0x36, 0xd1, 0xc9, 0x82, 0x38, 0x32, 0x06, 0x4f,
	0x40, 0xeb, 0x5e, 0xcd, 0x75, 0x3c, 0xf7, 0x31, 0x8f, 0x1d, 0xfc, 0x50, 0xc7, 0x85, 0xc9, 0x2a,
	0xae, 0x57, 0xae, 0xd6, 0xa0, 0x70, 0xec, 0x3b, 0xc5, 0x83, 0x12, 0xca, 0xad, 0xac, 0x94, 0x17,
	0x4e, 0xbb, 0x5e, 0xda, 0xa5, 0xe5, 0x13, 0xf8, 0x6e, 0xb5, 0xbc, 0xdc, 0xa8, 0x57, 0x6e, 0xf9,
	0x9c, 0x72, 0x27, 0x1a, 0xad, 0x30, 0x92, 0x56, 0x9f, 0x90, 0xf1, 0xf9, 0x0b, 0xe9, 0x2d, 0xcc,
	0x21, 0x18, 0x24, 0xfd, 0xe7, 0x03, 0xd4, 0x74, 0x0c, 0x70, 0x9d, 0x6c, 0xdd, 0xa3, 0xb6, 0x4c,
	0x25, 0x1f, 0x1e, 0x1e, 0x8f, 0x85, 0x71, 0x94, 0xee, 0xf1, 0xb4, 0x7b, 0xb6, 0xf7, 0x08, 0x77,
	0xa9, 0xc5, 0x0b, 0xb5, 0xb1, 0xd0, 0xec, 0xff, 0xa8, 0x51, 0x77, 0xcb, 0x4d, 0xb7, 0xec, 0x17,
	0x6b, 0xa9, 0x6d, 0x68, 0x0b, 0xf3, 0xcf, 0x85, 0xba, 0x57, 0x6d, 0xf0, 0xa3, 0x43, 0x1a, 0x07,
	0x83, 0xa7, 0xe5, 0x7a, 0xa5, 0xd9, 0xa8, 0x56, 0xf8, 0xf1, 0x6d, 0x20, 0x91, 0x60, 0x3c, 0xfd,
	0x37, 0x50, 0xd4, 0x86, 0x96, 0x07, 0x47, 0x2f, 0x29, 0x84, 0x82, 0xe3, 0x24, 0xca, 0x30, 0x15,
	0xf6, 0x36, 0xb4, 0x65, 0xe1, 0x54, 0xb9, 0x59, 0x5e, 0xf0, 0x58, 0xd6, 0x1e, 0x14, 0x6a, 0x92,
	0x72, 0x85, 0x56, 0x43, 0x43, 0xbe, 0x87, 0x05, 0x6d, 0xcc, 0xaa, 0xdf, 0x5a, 0xec, 0x40, 0xd3,
	0xec, 0x77, 0x47, 0x50, 0xf5, 0x30, 0x28, 0x16, 0x6a, 0x88, 0x85, 0xd5, 0xe5, 0x55, 0xa1, 0xed,
	0x64, 0x59, 0xb0, 0xe5, 0x85, 0x01, 0x0a, 0xcc, 0xa4, 0x56, 0x5d, 0xae, 0x0a, 0x66, 0x32, 0x91,
	0xba, 0x03, 0x6d, 0xf7, 0x1a, 0x95, 0xf2, 0x59, 0x67, 0xb1, 0xda, 0x6c, 0x79, 0x8e, 0x30, 0xce,
	0x8c, 0x66, 0x06, 0xe1, 0x60, 0x1a, 0xa7, 0xe9, 0x2e, 0x97, 0xab, 0x75, 0x30, 0x9d, 0x89, 0xf4,
	0xbf, 0xa6, 0x3e, 0x50, 0xf6, 0xca, 0xc5, 0x5a, 0xb9, 0x5a, 0xcf, 0x36, 0x6a, 0xab, 0xcb, 0xf5,
	0xd4, 0x57, 0xd0, 0x26, 0x08, 0x36, 0x54, 0x41, 0x93, 0x07, 0xef, 0xdc, 0xdf, 0xf3, 0x2a, 0xc1,
	0x66, 0xbf, 0x52, 0x2a, 0xfb, 0xec, 0x8a, 0x4b, 0x33, 0x1b, 0x24, 0x69, 0x28, 0xf3, 0x29, 0x7b,
	0x8f, 0x96, 0x6b, 0xab, 0xae, 0xb3, 0x5a, 0xad, 0x7b, 0xe1, 0xd9, 0x29, 0x7b, 0x46, 0x1f, 0xb1,
	0x33, 0xa3, 0xe0, 0x51, 0xcb, 0x6b, 0x82, 0x00, 0xb6, 0x04, 0x19, 0x12, 0x54, 0x94, 0xfe, 0x57,
	0x83, 0x68, 0x4b, 0xc0, 0x98, 0xd9, 0x38, 0x93, 0xda, 0x8f, 0x86, 0x4f, 0xbb, 0x67, 0x9d, 0x03,
	0xa0, 0x86, 0xf1, 0x7e, 0xb6, 0x7a, 0x77, 0xc1, 0xf1, 0x07, 0x41, 0x41, 0xb7, 0x8e, 0x3f, 0x04,
	0x3c, 0xdf, 0x3a, 0xfe, 0x01, 0xd8, 0xd0, 0x2d, 0xe0, 0xef, 0x43, 0x23, 0xb0, 0x63, 0x6a, 0x9d,
	0x43, 0xb7, 0x42, 0x30, 0x81, 0x86, 0xab, 0xf5, 0x8a, 0xfb, 0x18, 0x08, 0x64, 0x88, 0x6a, 0x6a,
	0x06, 0x64, 0xce, 0xa8, 0x4c, 0xf7, 0x91, 0x55, 0xb7, 0xe5, 0x19, 0x2b, 0xb4, 0xec, 0xa4, 0x85,
	0x0e, 0x75, 0x0a, 0xdf, 0x4a, 0xc1, 0x70, 0xd8, 0xeb, 0x89, 0xd5, 0xc5, 0x45, 0x90, 0xc0, 0x16,
	0x6a, 0x60, 0xac, 0x5c, 0x77, 0x40, 0xcc, 0xcc, 0x4a, 0xf7, 0xa0, 0xdb, 0xca, 0x95, 0x0a, 0xb4,
	0x8e, 0xd5, 0x3a, 0xcd, 0x90, 0x2d, 0xd7, 0x89, 0xd6, 0x29, 0xf4, 0xb7, 0x96, 0x90, 0x5e, 0x1e,
	0x5b, 0xa9, 0x36, 0xc5, 0xa3, 0x91, 0xf4, 0x8f, 0x07, 0xd1, 0x8e, 0x08, 0x63, 0xad, 0x95, 0x46,
	0xbd, 0xe5, 0xfe, 0xc3, 0x72, 0xb6, 0x0b, 0x6d, 0x2d, 0x2f, 0x2e, 0xba, 0x0b, 0x9e, 0x5b, 0xe1,
	0xf5, 0x0b, 0x04, 0xe0, 0x30, 0xcf, 0xd3, 0x82, 0xc8, 0x6d, 0x36, 0x1b, 0x4d, 0x7e, 0xfe, 0xbc,
	0x03, 0x4d, 0xaf, 0x94, 0x9b, 0x1e, 0x55, 0x61, 0x18, 0xc1, 0x47, 0xfd, 0x96, 0xdb, 0x1f, 0x6a,
	0xad, 0x2e, 0xc0, 0x00, 0xeb, 0xdf, 0x76, 0xa2, 0x94, 0x3f, 0xb0, 0x58, 0xae, 0xd6, 0x5c, 0xb6,
	0x46, 0xd0, 0xbf, 0xfb, 0x63, 0x8d, 0xc5, 0xc5, 0x96, 0xeb, 0xb1, 0xfe, 0x3d, 0xfd, 0x30, 0x9a,
	0xa0, 0xc2, 0x31, 0x56, 0xdc, 0x66, 0x19, 0x04, 0x92, 0x42, 0x68, 0xb1, 0xea, 0xd6, 0x2a, 0xac,
	0xb2, 0x85, 0x20, 0x98, 0x7a, 0x10, 0x4d, 0x36, 0x7c, 0x00, 0x4b, 0xf4, 0x83, 0xe0, 0x7b, 0x7b,
	0x7a, 0x6d, 0x24, 0x98, 0x86, 0x7a, 0x5e, 0xfa, 0xdf, 0x0c, 0xa2, 0x1d, 0x96, 0x55, 0x68, 0x2d,
	0x99, 0xee, 0x23, 0x5c, 0xfa, 0x60, 0x40, 0x70, 0x46, 0x42, 0xb7, 0xc1, 0xa9, 0x1d, 0x4a, 0xee,
	0xe7, 0x6b, 0x10, 0x07, 0x3b, 0x2c, 0x10, 0xdc, 0x76, 0x3f, 0xda, 0x5c, 0x5e, 0xa9, 0x3a, 0x0b,
	0xcb, 0x2c, 0xd8, 0x4a, 0x96, 0xe6, 0x0b, 0x28, 0x45, 0x2d, 0xbb, 0x5c, 0x49, 0x1d, 0xa0, 0x2a,
	0x03, 0x0b, 0x74, 0xe8, 0x5e, 0x69, 0x51, 0x3e, 0x7e, 0x70, 0x77, 0xac, 0x49, 0x53, 0x07, 0xfe,
	0x1a, 0xda, 0xdc, 0x00, 0x9b, 0x60, 0x3a, 0x1b, 0x3f, 0xb8, 0x4f, 0x06, 0x97, 0x9a, 0xf7, 0xfd,
	0x68, 0x2c, 0x90, 0x0f, 0xe8, 0x74, 0xbc, 0x9f, 0xbf, 0x88, 0x94, 0xd3, 0xff, 0x65, 0xc0, 0x17,
	0x4d, 0x6b, 0xa5, 0x5f, 0x34, 0xc2, 0x6e, 0x07, 0x6e, 0x65, 0xb7, 0x93, 0x68, 0x84, 0x77, 0xba,
	0x90, 0x9d, 0x52, 0x87, 0xd0, 0x44, 0x93, 0x9b, 0xb9, 0xd3, 0x6c, 0x9c, 0xa1, 0xa9, 0x70, 0xe8,
	0xa6, 0xfb, 0x3f, 0x12, 0xee, 0x9f, 0x85, 0x8c, 0x2f, 0x25, 0xee, 0x5f, 0xf4, 0xa2, 0xf4, 0x4f,
	0x07, 0xd1, 0x1d, 0xb1, 0x9a, 0xce, 0x94, 0xbd, 0x85, 0x53, 0x7f, 0xbf, 0xea, 0x3e, 0x88, 0xb6,
	0xf8, 0xea, 0x3e, 0xed, 0x9e, 0xa5, 0x1b, 0xb8, 0xf9, 0x7e, 0x41, 0x48, 0x8c, 0x66, 0xd1, 0xad,
	0xd6, 0x2a, 0x5c, 0xeb, 0xb7, 0x6c, 0x24, 0x23, 0x9f, 0xcd, 0x48, 0xd2, 0x6f, 0x0f, 0xf8, 0x32,
	0x92, 0xa8, 0x9c, 0xc9, 0xe8, 0x7e, 0x34, 0xc6, 0x44, 0xc1, 0x34, 0x3f, 0xf0, 0xff, 0xbf, 0xe6,
	0xef, 0x7d, 0x7a, 0x14, 0x4d, 0x44, 0x59, 0xba, 0x0d, 0x4d, 0x13, 0xdd, 0xce, 0x2a, 0xc5, 0x7c,
	0xc9, 0x72, 0x94, 0xa2, 0xe6, 0x14, 0x34, 0x1d, 0x7f, 0x2e, 0xb5, 0x03, 0xdd, 0x16, 0x7d, 0x6c,
	0x92, 0x6f, 0x39, 0x39, 0x62, 0xe3, 0x01, 0xc9, 0x90, 0x55, 0x84, 0xa1, 0xc1, 0xd4, 0x6e, 0x34,
	0xd3, 0x4f, 0xa5, 0x92, 0x3c, 0xb1, 0x09, 0x1e, 0x92, 0x8c, 0x5a, 0x45, 0x7f, 0x74, 0x93, 0x9c,
	0x56, 0xd3, 0x2d, 0x62, 0xda, 0x78, 0x58, 0x4e, 0xcb, 0x47, 0x47, 0xe4, 0xb4, 0xa5, 0xa2, 0xaa,
	0xd8, 0x04, 0x6f, 0x96, 0xd3, 0xf2, 0xd1, 0xd1, 0xd4, 0x1e, 0xb4, 0xa3, 0x9f, 0xd6, 0x24, 0xc5,
	0xbc, 0x92, 0x25, 0x78, 0x4c, 0x32, 0x6c, 0x15, 0x83, 0x61, 0x94, 0xba, 0x03, 0xed, 0x94, 0x71,
	0x9d, 0x35, 0x89, 0x62, 0x11, 0x3c, 0x2e, 0x19, 0x07, 0xbe, 0xf9, 0xf8, 0x96, 0xd4, 0x9d, 0x68,
	0x57, 0x3f, 0x7d, 0x46, 0xb1, 0xb3, 0x73, 0x20, 0xd2, 0x09, 0x09, 0xc0, 0x2a, 0x0a, 0x80, 0xc9,
	0xd4, 0x5d, 0x68, 0x4f, 0xff, 0x0c, 0x79, 0xcd, 0xb2, 0xe9, 0xb8, 0x92, 0xcf, 0xe3, 0x29, 0x09,
	0xc4, 0x2a, 0x46, 0x20, 0x38, 0x75, 0x37, 0xda, 0x1b, 0x33, 0x0b, 0x53, 0x10, 0x45, 0x4d, 0x4b,
	0x50, 0xfe, 0x44, 0x21, 0x2a, 0x95, 0xba, 0x07, 0xa5, 0x13, 0xe7, 0x02, 0xee, 0xf1, 0x56, 0x09,
	0x2e, 0x3a, 0x1b, 0xc3, 0x6d, 0x93, 0xcb, 0xd8, 0x67, 0x1f, 0xdf, 0x26, 0x97, 0x71, 0x30, 0xbe,
	0x3d, 0xf5, 0x79, 0x74, 0x67, 0x0c, 0xbd, 0xa2, 0xaa, 0xca, 0xac, 0x4d, 0x4c, 0x7c, 0xbb, 0x04,
	0xe4, 0x4f, 0x12, 0x80, 0x66, 0x12, 0x64, 0xcd, 0xcd, 0x78, 0x47, 0x82, 0xac, 0x39, 0x64, 0x67,
	0x2a, 0x8d, 0xee, 0x88, 0x99, 0xc5, 0xb7, 0xab, 0x5d, 0x12, 0x8c, 0x3f, 0x8d, 0x8f, 0xd9, 0x2d,
	0xd7, 0x59, 0x8e, 0xd8, 0x4e, 0x66, 0xde, 0x29, 0x2a, 0xa6, 0x7d, 0x94, 0xcc, 0xe3, 0x3d, 0x72,
	0x9d, 0xf5, 0xa0, 0xee, 0x90, 0x84, 0x01, 0xe5, 0x04, 0xae, 0xdc, 0x7b, 0x63, 0x08, 0x4d, 0x5a,
	0x96, 0x9a, 0xe1, 0x31, 0x83, 0x34, 0x9b, 0xa9, 0x1d, 0x68, 0x2b, 0x3c, 0xe1, 0x58, 0x62, 0x9a,
	0x4e, 0xb6, 0xa0, 0xe2, 0xbf, 0xbc, 0x38, 0x95, 0xba, 0x93, 0x66, 0xc9, 0xe8, 0x10, 0xff, 0x59,
	0x53, 0xf1, 0xe5, 0x8b, 0x53, 0xa9, 0x34, 0xda, 0x1d, 0x03, 0x70, 0x2c, 0xa2, 0xab, 0xf8, 0xaf,
	0x2e, 0x4e, 0xa5, 0xf6, 0xa1, 0x74, 0x1c, 0x26, 0x47, 0x6c, 0x93, 0x7c, 0xab, 0x44, 0x2c, 0x1b,
	0x5f, 0xb9, 0x38, 0x95, 0xba, 0x17, 0xdd, 0x1d, 0x87, 0x54, 0x54, 0x75, 0x56, 0x23, 0x79, 0x55,
	0x57, 0x0a, 0x04, 0x5f, 0xbb, 0x38, 0x95, 0xfa, 0x22, 0xba, 0x2b, 0x01, 0x6b, 0x92, 0xac, 0x61,
	0xaa, 0xf8, 0x7f, 0x5c, 0x9c, 0x4a, 0xdd, 0x83, 0xf6, 0xc6, 0x01, 0x55, 0xc5, 0x56, 0xec, 0xf9,
	0x22, 0xc1, 0xd7, 0x2f, 0x4e, 0xa5, 0xee, 0xa6, 0xe9, 0x21, 0x6e, 0x2b, 0x20, 0xd4, 0xff, 0x79,
	0x71, 0x2a, 0xf5, 0x65, 0xf4, 0x85, 0xc4, 0xcd, 0xd0, 0x65, 0x9d, 0x63, 0x4a, 0x1e, 0xb7, 0x6f,
	0x15, 0x4c, 0x67, 0xfe, 0x5f, 0x17, 0xa9, 0x4f, 0xef, 0x8a, 0x03, 0x53, 0x75, 0xac, 0x5d, 0x9c,
	0x4a, 0x3d, 0x88, 0xee, 0x8b, 0x83, 0xf8, 0x11, 0xc8, 0x29, 0x68, 0x96, 0xe5, 0x18, 0x45, 0x62,
	0x2a, 0xb6, 0x66, 0xe8, 0xf8, 0x7f, 0x5f, 0x9c, 0xba, 0xf7, 0x3b, 0x43, 0x68, 0xaa, 0xb7, 0x2b,
	0xdb, 0x85, 0x6e, 0x27, 0x7a, 0x9f, 0x20, 0x78, 0xae, 0x80, 0xf8, 0xda, 0x3f, 0xa8, 0xe9, 0xf6,
	0x43, 0x78, 0x80, 0x05, 0xd0, 0xfe, 0xd1, 0x12, 0x0c, 0x0f, 0xc6, 0x0d, 0x6b, 0xba, 0x7d, 0xe0,
	0x30, 0x1e, 0x62, 0xbe, 0x2d, 0xa7, 0x3e, 0x70, 0x18, 0x6f, 0x4a, 0x20, 0x3f, 0x74, 0x10, 0x0f,
	0x27, 0x91, 0x1f, 0x3a, 0x88, 0x47, 0x12, 0xc8, 0x0f, 0x3f, 0x80, 0x37, 0x27, 0x91, 0x1f, 0x7e,
	0x00, 0x8f, 0xc6, 0x8d, 0x5b, 0xb6, 0xa9, 0xe9, 0x39, 0x3c, 0x16, 0x27, 0x99, 0x4c, 0xde, 0xc8,
	0x60, 0x14, 0x2b, 0x54, 0xe5, 0x04, 0xde, 0x72, 0x6f, 0x09, 0x4d, 0x52, 0xe9, 0xb3, 0xee, 0x6d,
	0xb6, 0x56, 0x5e, 0xe2, 0x8b, 0x51, 0x98, 0x93, 0x35, 0xf2, 0xa5, 0x82, 0xee, 0xcc, 0xe6, 0x95,
	0x9c, 0xa3, 0x1b, 0x66, 0x41, 0xc9, 0xe3, 0xcf, 0xb1, 0x08, 0xd6, 0x3f, 0x3e, 0x6b, 0x98, 0xe0,
	0xf2, 0x16, 0x4d, 0xde, 0xf7, 0xce, 0xa1, 0x89, 0x48, 0xd5, 0x9f, 0xda, 0x89, 0xb6, 0x13, 0x3d,
	0xb4, 0x00, 0x07, 0x58, 0xa0, 0x0c, 0xe1, 0x01, 0xce, 0x60, 0xcf, 0x58, 0x41, 0xd3, 0x4b, 0x16,
	0x1e, 0xbc, 0xf7, 0x4f, 0xff, 0x74, 0x40, 0xac, 0x25, 0x68, 0x68, 0xf8, 0x32, 0xba, 0x83, 0x86,
	0x0e, 0x6a, 0x68, 0xc6, 0x31, 0x62, 0xd2, 0x9d, 0x50, 0x7b, 0x75, 0xc0, 0x15, 0x1d, 0xbd, 0x54,
	0xc0, 0xed, 0xf5, 0xdf, 0xb2, 0x7f, 0x03, 0xa9, 0xaf, 0xa0, 0xbd, 0x7d, 0xe0, 0x63, 0x4a, 0xbe,
	0x44, 0x44, 0x78, 0x37, 0x80, 0xff, 0x1e, 0xba, 0xb3, 0x0f, 0xce, 0x81, 0x4a, 0x81, 0x38, 0x79,
	0xa2, 0xe3, 0xf6, 0xa7, 0x89, 0x93, 0x33, 0x34, 0x5b, 0x02, 0xe0, 0x9f, 0x04, 0xf0, 0x2f, 0xa0,
	0x19, 0x1f, 0xce, 0xe7, 0x34, 0x6c, 0x87, 0x9c, 0xb0, 0x34, 0xcb, 0xc6, 0xed, 0x8f, 0x03, 0xd8,
	0x97, 0xd0, 0xee, 0x28, 0x0c, 0x04, 0x42, 0xb1, 0x05, 0x48, 0x55, 0xed, 0x4e, 0x00, 0xbd, 0x07,
	0xed, 0xf0, 0xa1, 0x45, 0xc5, 0x54, 0x0a, 0xc4, 0x26, 0xa6, 0xa3, 0xe9, 0xc7, 0x94, 0xbc, 0xa6,
	0xe2, 0xf6, 0x0d, 0x29, 0xa3, 0x51, 0x39, 0x0b, 0xd3, 0xae, 0x05, 0xf0, 0xbb, 0xd0, 0xb6, 0x70,
	0xda, 0xec, 0x51, 0xa7, 0x40, 0x2c, 0x4b, 0xc9, 0x11, 0xdc, 0x6e, 0x07, 0x90, 0xcf, 0xa3, 0xed,
	0x3e, 0xa4, 0xa4, 0x47, 0x41, 0xd7, 0x65, 0x3b, 0xa1, 0x10, 0x25, 0xc7, 0xd6, 0x63, 0x04, 0x44,
	0xc5, 0xed, 0x6b, 0x01, 0x74, 0x1f, 0xda, 0xd5, 0x27, 0x4a, 0x1e, 0x8b, 0x40, 0x45, 0x57, 0x02,
	0xe4, 0xdd, 0xe8, 0x76, 0x1f, 0xc9, 0x77, 0xea, 0x64, 0x8d, 0x42, 0x41, 0xd1, 0x55, 0xdc, 0xbe,
	0x2c, 0xe3, 0x4f, 0x37, 0x9c, 0x82, 0x61, 0x12, 0x3e, 0x1d, 0x6e, 0x7f, 0x14, 0x80, 0xbe, 0x88,
	0x76, 0x46, 0x16, 0xed, 0xb1, 0xa2, 0x4b, 0xb2, 0x8d, 0x00, 0xb0, 0xcf, 0x82, 0x3e, 0x0c, 0xa0,
	0x69, 0x74, 0x5b, 0x00, 0xcd, 0x7c, 0xd3, 0xd1, 0x09, 0x51, 0x1d, 0x4d, 0xd7, 0x6c, 0xdc, 0xfe,
	0x40, 0xa6, 0x36, 0x7f, 0x0b, 0xe0, 0x50, 0x96, 0xf6, 0x30, 0xc1, 0xed, 0xf7, 0x65, 0x42, 0xf1,
	0x71, 0x8a, 0x69, 0x2a, 0xf3, 0x4e, 0xd6, 0x28, 0xe9, 0x36, 0x6e, 0xbf, 0x27, 0x63, 0xd0, 0x47,
	0x96, 0x74, 0xaa, 0x64, 0x8b, 0xe4, 0x49, 0xd6, 0xc6, 0xed, 0x77, 0x65, 0x56, 0x08, 0x61, 0xb9,
	0x68, 0x6a, 0x05, 0xc5, 0x9c, 0x87, 0x90, 0xdf, 0x7e, 0x47, 0x36, 0x63, 0x49, 0xb7, 0x4a, 0xc5,
	0xa2, 0x61, 0xda, 0x82, 0x3d, 0xe2, 0xf6, 0xdb, 0x01, 0xf4, 0x5e, 0xb4, 0xc7, 0x87, 0x32, 0xf6,
	0x32, 0xa5, 0xd9, 0x59, 0x6a, 0x88, 0x96, 0x63, 0x15, 0x68, 0xb1, 0xd6, 0x7e, 0x4b, 0xca, 0xa8,
	0x05, 0xd6, 0x70, 0x7c, 0xce, 0xc8, 0x13, 0xdf, 0x3e, 0x70, 0xfb, 0x4d, 0x99, 0xa2, 0x19, 0xa3,
	0x8a, 0xc6, 0x3d, 0x02, 0xb7, 0xdf, 0x90, 0x29, 0x9a, 0x96, 0x1b, 0x05, 0x62, 0x2b, 0x0e, 0xd1,
	0x6d, 0x73, 0x1e, 0xb7, 0x5f, 0x8f, 0x03, 0x31, 0x2e, 0x29, 0x14, 0xb7, 0x5f, 0x8b, 0x03, 0xc1,
	0x24, 0x1c, 0xf4, 0xaa, 0x5c, 0x75, 0x59, 0xa3, 0x50, 0x54, 0x6c, 0x2d, 0x93, 0x27, 0x1c, 0xf7,
	0x8a, 0x8c, 0x79, 0xf0, 0x0e, 0xb6, 0x24, 0xd5, 0x32, 0x6e, 0xbf, 0x1c, 0x8b, 0x62, 0x3a, 0x63,
	0xa8, 0x97, 0x64, 0x1a, 0x03, 0x94, 0x65, 0x9b, 0xa5, 0xac, 0xcd, 0x61, 0x2f, 0xca, 0x58, 0xe3,
	0x2e, 0x29, 0x2e, 0xfa, 0x42, 0x02, 0x4e, 0x5c, 0xf6, 0x79, 0x99, 0x77, 0x70, 0x5c, 0x64, 0xe1,
	0xe7, 0x64, 0x40, 0xdf, 0xf8, 0x34, 0x5d, 0x25, 0x27, 0x20, 0x66, 0xe2, 0xf6, 0x6f, 0x64, 0x40,
	0xae, 0x51, 0x28, 0x0c, 0x7d, 0xa5, 0xfe, 0x5a, 0x26, 0x17, 0x25, 0x9f, 0x37, 0xb2, 0x8a, 0x4d,
	0x25, 0x5c, 0x30, 0xa8, 0x56, 0x7f, 0x25, 0x73, 0xb5, 0x40, 0xf5, 0xcc, 0x85, 0x9e, 0x95, 0xb9,
	0x10, 0x2c, 0x99, 0xd1, 0x74, 0x6a, 0xec, 0xc7, 0x88, 0x69, 0xd1, 0x4a, 0xa4, 0xfd, 0x4c, 0x80,
	0x14, 0xd2, 0x4a, 0xb8, 0x0b, 0x5e, 0xbf, 0x70, 0x06, 0x9f, 0x4e, 0xf2, 0x4c, 0x93, 0x58, 0xa5,
	0xbc, 0x0d, 0xd9, 0x10, 0xb7, 0x9f, 0x4a, 0xcc, 0x28, 0x50, 0x61, 0x73, 0x11, 0xd1, 0xe8, 0xf1,
	0xcb, 0x24, 0x51, 0xd2, 0x28, 0x62, 0xd9, 0x8a, 0x5d, 0x22, 0xb8, 0xfd, 0x8b, 0xa4, 0x28, 0xe8,
	0x17, 0xad, 0xed, 0x9f, 0x27, 0x4d, 0x67, 0xcd, 0x29, 0xa6, 0x0a, 0x1c, 0xe0, 0xf6, 0xcf, 0x64,
	0x40, 0x5b, 0xa1, 0xf6, 0x0c, 0xe9, 0x8e, 0x4a, 0x8c, 0x96, 0x18, 0xed, 0x9f, 0xca, 0x32, 0x89,
	0x65, 0x64, 0x8f, 0x12, 0x1b, 0x4a, 0x6a, 0xf0, 0x78, 0xea, 0xd0, 0xb3, 0x25, 0xea, 0xee, 0x4f,
	0xca, 0x54, 0xe4, 0x33, 0x50, 0x50, 0x72, 0x5a, 0x16, 0xb7, 0x7f, 0x12, 0xbf, 0x36, 0x0f, 0x0c,
	0xe4, 0x04, 0x30, 0xf9, 0xe3, 0x00, 0x78, 0x27, 0x4a, 0x05, 0x6b, 0xcf, 0xd1, 0x70, 0x44, 0x57,
	0xc5, 0xed, 0x3f, 0x91, 0xe5, 0xad, 0xd9, 0xbc, 0x71, 0xdc, 0xc9, 0x1a, 0xba, 0x6d, 0x1a, 0x79,
	0xdc, 0xbe, 0x10, 0x40, 0x08, 0x7a, 0xc8, 0x87, 0x50, 0xef, 0x35, 0x89, 0x65, 0x39, 0xd6, 0x71,
	0x8d, 0x36, 0xba, 0x74, 0x4d, 0x1e, 0xe8, 0x08, 0x95, 0x66, 0x4e, 0x31, 0x55, 0x4d, 0xcf, 0x39,
	0xf6, 0x9c, 0xc6, 0xaa, 0xdd, 0xf6, 0x8f, 0xa4, 0x39, 0x5a, 0xd1, 0xf2, 0x44, 0x75, 0x6c, 0xc3,
	0x99, 0xd5, 0x74, 0xd5, 0x31, 0x8d, 0x92, 0x4d, 0x70, 0xfb, 0x87, 0x32, 0x77, 0x0b, 0x0c, 0xa0,
	0x78, 0x34, 0xc7, 0x2d, 0xf5, 0x07, 0x32, 0x43, 0xf1, 0x45, 0xc5, 0xad, 0x14, 0x8a, 0x2b, 0x3b,
	0x7f, 0x0c, 0xb7, 0x9f, 0x90, 0x05, 0xab, 0x8c, 0x05, 0x71, 0xde, 0xd4, 0x94, 0x3c, 0x4c, 0xf9,
	0x7d, 0x59, 0xe0, 0x00, 0x90, 0x4a, 0x04, 0xd8, 0xf7, 0x64, 0x72, 0x55, 0x54, 0x35, 0xc8, 0x93,
	0x7f, 0x2c, 0xdb, 0xc2, 0xc3, 0x86, 0xde, 0xab, 0xa0, 0xef, 0xca, 0x5c, 0xc8, 0x36, 0x15, 0xca,
	0x3d, 0x31, 0x7b, 0xc0, 0xe7, 0x84, 0x55, 0x77, 0xda, 0x27, 0xe6, 0xd4, 0x0c, 0xc0, 0xfd, 0x54,
	0x1f, 0x00, 0xcf, 0x0d, 0xa6, 0xf6, 0xa1, 0xcf, 0x87, 0x00, 0xcd, 0xf6, 0xcb, 0x96, 0x68, 0x3a,
	0xb7, 0xf0, 0xb9, 0x4d, 0xa9, 0xbb, 0xd0, 0xee, 0x10, 0x59, 0x28, 0xd9, 0xe4, 0x84, 0x63, 0x9b,
	0xf3, 0x79, 0x23, 0x7b, 0xd4, 0xc9, 0x94, 0xac, 0x79, 0x7c, 0x6e, 0x24, 0x75, 0x0f, 0xba, 0xab,
	0x0f, 0xa2, 0x15, 0x88, 0x0a, 0x20, 0xfa, 0x93, 0x51, 0xb2, 0xf1, 0xb9, 0xd1, 0xd4, 0xdd, 0xe8,
	0x4e, 0x81, 0xab, 0xe3, 0x6c, 0xd8, 0x9c, 0x3f, 0x6e, 0x0a, 0xb3, 0xa1, 0x38, 0x94, 0xa9, 0x0a,
	0xa8, 0x2d, 0xa9, 0xbd, 0x68, 0x57, 0x88, 0xb2, 0x8a, 0x9a, 0xde, 0xc3, 0xd5, 0x64, 0xea, 0xeb,
	0xe8, 0xab, 0xb2, 0x2d, 0x92, 0x13, 0x59, 0x5a, 0x36, 0x50, 0x4b, 0xa1, 0xe1, 0xef, 0x38, 0x35,
	0x2f, 0xad, 0x40, 0x1c, 0x63, 0xd6, 0x01, 0xf1, 0xdb, 0xc4, 0xc4, 0xe7, 0x30, 0x0d, 0x42, 0x02,
	0x75, 0x50, 0x20, 0xe4, 0x4a, 0x05, 0xa2, 0xdb, 0x16, 0xee, 0x86, 0x55, 0xf0, 0x03, 0xe8, 0x8b,
	0xfd, 0xc8, 0x02, 0x29, 0x64, 0xa0, 0x96, 0x31, 0x35, 0x70, 0x3b, 0x28, 0x6a, 0x70, 0xb7, 0x2b,
	0xda, 0x58, 0x48, 0xa5, 0xe4, 0x4d, 0xa2, 0xa8, 0xf3, 0xb4, 0x7e, 0xd4, 0x71, 0xf7, 0x53, 0xd1,
	0x36, 0x7a, 0x05, 0x0b, 0x5b, 0xa4, 0x6e, 0x81, 0xbb, 0x9f, 0x88, 0x1e, 0x13, 0xa7, 0x23, 0x06,
	0xfd, 0x58, 0x34, 0xa3, 0x78, 0x5d, 0x31, 0x70, 0x47, 0x8c, 0xc4, 0xbd, 0xe0, 0x92, 0x2e, 0x20,
	0x6f, 0xc8, 0x39, 0xe0, 0x4a, 0xe3, 0x7a, 0x65, 0xd0, 0x35, 0xd1, 0x17, 0x13, 0xac, 0x80, 0xa1,
	0xdb, 0x89, 0x13, 0x9b, 0x22, 0xb7, 0xd7, 0x6f, 0x36, 0x71, 0x04, 0x7d, 0x2d, 0x71, 0xe2, 0xc8,
	0xe6, 0xae, 0x88, 0xae, 0xde, 0x63, 0x6b, 0x02, 0xec, 0xb2, 0x18, 0x6b, 0x7b, 0x60, 0x91, 0xf9,
	0xc2, 0xd2, 0xf8, 0x10, 0xba, 0x27, 0x04, 0xce, 0x6a, 0x79, 0xc2, 0xfc, 0xd2, 0x72, 0x32, 0x25,
	0x9b, 0xa5, 0x23, 0x68, 0xf5, 0x0d, 0x13, 0x77, 0x2f, 0xc9, 0x99, 0x00, 0x22, 0x6a, 0x2d, 0x7c,
	0xee, 0x0f, 0xc5, 0x1c, 0xd2, 0x03, 0xa3, 0xa6, 0x05, 0x01, 0x31, 0x68, 0x5e, 0xba, 0x1f, 0x24,
	0xc0, 0x7d, 0x0b, 0x86, 0x5f, 0x8a, 0x8a, 0x3d, 0x87, 0xbb, 0xef, 0x8b, 0xd5, 0x68, 0x0f, 0x9c,
	0x6d, 0x90, 0xfe, 0xc4, 0x38, 0x09, 0xcb, 0xe6, 0xfd, 0x62, 0x54, 0x00, 0x04, 0x8d, 0x40, 0x0a,
	0x0d, 0xfe, 0xa5, 0xbc, 0xc2, 0x1e, 0xe1, 0xee, 0xbb, 0x09, 0x1b, 0x2c, 0x14, 0x94, 0x22, 0x9f,
	0xf6, 0x1d, 0xb9, 0x94, 0x19, 0xac, 0xa4, 0x87, 0xc0, 0xb7, 0xe5, 0xce, 0x03, 0xc0, 0x6c, 0xde,
	0xb0, 0x7c, 0x3e, 0xdf, 0x92, 0xfb, 0x2f, 0xe0, 0xac, 0xa2, 0x92, 0x65, 0xdc, 0x12, 0xdd, 0x28,
	0xe5, 0xe6, 0x1c, 0x4d, 0x77, 0xe6, 0x88, 0xa2, 0xe2, 0xee, 0x9b, 0x09, 0x92, 0x98, 0xb5, 0xcd,
	0x92, 0x0e, 0xd5, 0x14, 0x5b, 0x21, 0x2c, 0xa3, 0x0f, 0xa2, 0x2f, 0xf4, 0x09, 0x39, 0x6b, 0xe8,
	0xb4, 0x37, 0x55, 0x74, 0x9b, 0xaf, 0x49, 0xf3, 0x46, 0x37, 0xac, 0xaa, 0xb3, 0xe8, 0x70, 0xef,
	0x36, 0x2d, 0xed, 0x61, 0x27, 0x4f, 0x2c, 0x1a, 0xf7, 0xed, 0x39, 0x45, 0x77, 0xd8, 0x38, 0x2b,
	0xf1, 0x4d, 0x92, 0x75, 0x8c, 0xd9, 0x59, 0x8b, 0xd8, 0xb8, 0xfb, 0x5a, 0xc2, 0xc2, 0x30, 0x49,
	0x76, 0x4e, 0xd1, 0x79, 0xbb, 0x58, 0x24, 0x66, 0x41, 0xb3, 0x71, 0xf7, 0xd5, 0x04, 0xb1, 0xcd,
	0x52, 0x93, 0xe4, 0x9b, 0x7a, 0x25, 0x01, 0x57, 0xb0, 0xe6, 0xf5, 0x2c, 0xc7, 0xbd, 0x9c, 0x38,
	0x5f, 0x88, 0x0b, 0x0b, 0xf1, 0xfb, 0xc5, 0x8c, 0xc4, 0x70, 0x59, 0xdd, 0xce, 0xf7, 0x19, 0xd8,
	0x8b, 0x09, 0xbb, 0x63, 0x14, 0xbe, 0xd7, 0x85, 0x34, 0x61, 0x7d, 0xfe, 0xfb, 0x68, 0x7f, 0x0f,
	0x4d, 0x11, 0xfc, 0x83, 0xe2, 0x9c, 0xe3, 0x9a, 0x3d, 0xe7, 0x58, 0x45, 0x92, 0xd5, 0x66, 0x35,
	0xa2, 0x52, 0x88, 0x6e, 0xe0, 0x6e, 0x58, 0xb4, 0xff, 0x23, 0x74, 0xff, 0x4d, 0x88, 0x4b, 0x7a,
	0x1f, 0x79, 0x58, 0xca, 0x7f, 0x1d, 0xdd, 0xd7, 0x4b, 0x7e, 0xdc, 0xd4, 0xb8, 0xbd, 0xc4, 0x2c,
	0x1e, 0xd6, 0xf7, 0x7f, 0x80, 0x0e, 0xdc, 0x8c, 0x5a, 0xb2, 0x7a, 0x58, 0xf6, 0x3f, 0x88, 0xf6,
	0xc9, 0x02, 0x03, 0x4f, 0x87, 0xf0, 0x20, 0x63, 0x94, 0x74, 0x55, 0x31, 0xe7, 0x71, 0x37, 0xec,
	0x03, 0x0e, 0xa0, 0xbb, 0x65, 0x64, 0xb0, 0xa8, 0x5a, 0x32, 0x69, 0x0d, 0x97, 0x35, 0x8a, 0xf3,
	0xb8, 0xfb, 0x6c, 0x82, 0x5e, 0x04, 0x46, 0x23, 0x34, 0xcf, 0x24, 0xc8, 0x26, 0x88, 0x43, 0x26,
	0x81, 0xe3, 0xb6, 0xec, 0x51, 0xa7, 0x68, 0x18, 0x79, 0xe8, 0x44, 0xa0, 0x49, 0xea, 0x3e, 0x2d,
	0x8f, 0xe5, 0x11, 0x6a, 0x56, 0x10, 0x77, 0x9f, 0x4a, 0x88, 0xbd, 0x3e, 0x34, 0xaf, 0x65, 0x4c,
	0xb1, 0x7d, 0xe9, 0xfe, 0x32, 0x21, 0x44, 0xf4, 0x12, 0x99, 0xe4, 0x98, 0xc6, 0xa8, 0x7e, 0x91,
	0xe8, 0xf6, 0x7c, 0x4f, 0x86, 0x59, 0x50, 0xec, 0x70, 0xa5, 0xb0, 0xa9, 0x38, 0x82, 0xbe, 0x12,
	0x43, 0x43, 0x4e, 0xd8, 0x70, 0x8e, 0xd1, 0x4b, 0xfb, 0xb3, 0x84, 0x90, 0x14, 0x1c, 0x80, 0x64,
	0xe0, 0x58, 0xa1, 0xfb, 0x53, 0x79, 0xae, 0x04, 0x2c, 0x0d, 0x70, 0x4e, 0xd6, 0xcc, 0x3a, 0x34,
	0x9a, 0xda, 0xd9, 0x39, 0xdc, 0x7d, 0x32, 0x01, 0x1d, 0xd6, 0x39, 0xbe, 0x36, 0x7e, 0x22, 0x2f,
	0x31, 0x22, 0x68, 0xba, 0x46, 0x9e, 0x96, 0x38, 0x3f, 0x4e, 0xd8, 0xb0, 0x5f, 0x48, 0x33, 0x8e,
	0x7a, 0x63, 0x31, 0xee, 0x86, 0x2d, 0xc9, 0x43, 0xe8, 0xcb, 0xbd, 0x91, 0x3b, 0x91, 0xf2, 0xc2,
	0xad, 0xac, 0x0a, 0xc1, 0xae, 0x9f, 0xf6, 0x47, 0x37, 0x5f, 0x35, 0x86, 0xf2, 0x87, 0x62, 0x7f,
	0x24, 0xa7, 0x14, 0x6c, 0x9c, 0xb7, 0xaf, 0xb3, 0x86, 0x73, 0xdc, 0x34, 0xf4, 0x1c, 0xb4, 0x61,
	0x20, 0xb2, 0x1f, 0x24, 0xb8, 0xa4, 0xc6, 0xca, 0xda, 0x22, 0x2d, 0x70, 0x39, 0x23, 0x25, 0x0b,
	0x77, 0x9f, 0x10, 0x3b, 0xda, 0x90, 0x44, 0xcd, 0x00, 0x7f, 0xb4, 0x7c, 0x20, 0x2a, 0xee, 0x7e,
	0x5f, 0x6e, 0x40, 0x34, 0xb5, 0x80, 0xdb, 0x8a, 0x69, 0xe2, 0x7b, 0x72, 0x26, 0x82, 0x76, 0x1a,
	0x32, 0x90, 0x33, 0x6b, 0x1a, 0x05, 0x27, 0x53, 0xa2, 0x1d, 0x2c, 0xee, 0x86, 0x9d, 0xce, 0x61,
	0xf4, 0x25, 0xb1, 0x29, 0x51, 0x42, 0x9b, 0xe6, 0x41, 0x08, 0x1a, 0xdd, 0x3c, 0xd1, 0x73, 0xb4,
	0xe8, 0x08, 0x3b, 0x9f, 0xaf, 0xa2, 0x7b, 0x43, 0x3a, 0xc6, 0x53, 0x12, 0xe1, 0xb9, 0x98, 0x78,
	0x1d, 0xca, 0x58, 0xb3, 0xd8, 0xf2, 0xc7, 0xe7, 0x88, 0xee, 0xe4, 0x88, 0x6d, 0xd3, 0x88, 0xc4,
	0x3b, 0xb3, 0xee, 0x77, 0xe4, 0x19, 0xc9, 0xdf, 0xe2, 0x51, 0xc2, 0x0e, 0x7d, 0xd8, 0x4c, 0x7a,
	0xa9, 0x80, 0xbb, 0xdf, 0x96, 0x7b, 0x7c, 0xd0, 0x68, 0xc2, 0x79, 0x66, 0x0f, 0xcd, 0x6f, 0x37,
	0xa4, 0xb1, 0x25, 0x47, 0x6c, 0xbf, 0x5d, 0x93, 0x6d, 0x6d, 0x7d, 0x43, 0x5a, 0x05, 0xf9, 0xcd,
	0x36, 0xb4, 0xb3, 0x90, 0xf0, 0xba, 0x1b, 0xd2, 0xd0, 0xa8, 0x92, 0x7e, 0xe8, 0xa7, 0x01, 0xb4,
	0x80, 0xbe, 0x11, 0xa7, 0x52, 0x4d, 0xf7, 0x25, 0xae, 0xe8, 0xbc, 0x98, 0x04, 0xe1, 0xc1, 0x2b,
	0x78, 0x2a, 0x3d, 0x3e, 0x8c, 0xbb, 0x9f, 0x6c, 0x48, 0xc3, 0x40, 0x49, 0x27, 0x27, 0x8a, 0x24,
	0x4b, 0x9b, 0x7f, 0xaa, 0x08, 0x90, 0x04, 0xee, 0x7e, 0xbc, 0x21, 0xb5, 0x0d, 0x26, 0x31, 0xa5,
	0x68, 0x1c, 0x8f, 0xd4, 0x3b, 0x54, 0xf4, 0xf4, 0x21, 0xee, 0x76, 0xe4, 0x8b, 0xa8, 0xa5, 0x62,
	0x5e, 0xa3, 0x15, 0x58, 0xa4, 0x7a, 0xbd, 0xb1, 0x21, 0xf5, 0x7a, 0x51, 0xa1, 0x73, 0x42, 0x89,
	0xcc, 0xcb, 0x2a, 0x38, 0x73, 0xec, 0xae, 0x6d, 0x48, 0x5b, 0xa1, 0x48, 0x8d, 0xcc, 0x2a, 0xb7,
	0xf6, 0x86, 0xb4, 0xee, 0x95, 0x64, 0x31, 0x86, 0xbf, 0xbe, 0x21, 0x8d, 0x27, 0x50, 0xf2, 0x16,
	0x48, 0x01, 0x98, 0xe9, 0xab, 0xd3, 0x6c, 0xea, 0xaf, 0xd7, 0xe4, 0x3c, 0xe9, 0xe4, 0x38, 0x6f,
	0x0b, 0x32, 0xdf, 0xf4, 0x3b, 0x98, 0x00, 0x79, 0x14, 0xfd, 0x41, 0xdf, 0x79, 0x00, 0xdd, 0x38,
	0x77, 0xd8, 0x5b, 0xa9, 0x2a, 0x2f, 0xcb, 0xed, 0x24, 0x7c, 0x01, 0x5a, 0x22, 0x9f, 0x65, 0xba,
	0x8f, 0x82, 0xe9, 0x72, 0xe8, 0x48, 0xdf, 0x74, 0x9f, 0x61, 0xa2, 0x4b, 0x1b, 0xd2, 0x1a, 0x82,
	0xee, 0x8e, 0xfa, 0x0e, 0x08, 0xb2, 0xd7, 0x8a, 0xa8, 0xbe, 0x99, 0x1a, 0x3e, 0x0c, 0xa8, 0xbf,
	0x81, 0x0e, 0xf5, 0x5a, 0xa0, 0x94, 0x9e, 0x0d, 0x85, 0x33, 0x7c, 0xb0, 0x21, 0xad, 0x2d, 0xf9,
	0x46, 0x6e, 0xb2, 0xfc, 0xfb, 0x1b, 0xd2, 0xd8, 0xeb, 0x5b, 0x0d, 0x33, 0x18, 0x5e, 0xc3, 0xbc,
	0x17, 0x60, 0xef, 0x43, 0xe9, 0x44, 0x0b, 0xe3, 0x04, 0xef, 0xca, 0xa3, 0x85, 0x60, 0xf8, 0x1c,
	0xf8, 0x4e, 0x32, 0x17, 0x47, 0xc9, 0xbc, 0x55, 0xcc, 0x73, 0xec, 0xdb, 0xc9, 0x93, 0x1e, 0x53,
	0x7c, 0xe0, 0x5b, 0xc9, 0x93, 0x1e, 0x53, 0xf2, 0xe1, 0xa4, 0x6f, 0x6e, 0x48, 0xab, 0xd4, 0xe0,
	0xdd, 0x08, 0x61, 0xd6, 0xda, 0x5b, 0xfa, 0xbc, 0xb1, 0x21, 0x2d, 0x8e, 0x7b, 0xc9, 0xac, 0x62,
	0x9e, 0xc9, 0xa5, 0x97, 0xfe, 0xf5, 0x0d, 0x69, 0x8a, 0x11, 0xe9, 0xf9, 0xcb, 0xa8, 0x1e, 0xc2,
	0xd7, 0xe4, 0x56, 0xd3, 0x4f, 0x18, 0xbb, 0xf4, 0xab, 0x72, 0xab, 0x15, 0x67, 0x10, 0x14, 0xda,
	0x4b, 0xfd, 0x8a, 0x3c, 0xfe, 0x05, 0xa1, 0x2c, 0x52, 0xc6, 0xbd, 0x2c, 0x4f, 0x35, 0x11, 0xc9,
	0xf4, 0x53, 0xbd, 0xb4, 0x21, 0x3d, 0x22, 0x08, 0xad, 0x3f, 0x0a, 0x7f, 0x31, 0x29, 0x92, 0x27,
	0x2c, 0xf3, 0xc2, 0x86, 0xbc, 0x5a, 0x0e, 0xf7, 0xde, 0x4f, 0xf3, 0xbc, 0x5c, 0x6d, 0xd2, 0x22,
	0x2a, 0x42, 0xf8, 0x9c, 0xdc, 0x83, 0x68, 0xd2, 0xa5, 0xd2, 0x80, 0x9a, 0x80, 0xbf, 0x5e, 0x63,
	0x01, 0xf4, 0x37, 0x1b, 0xd2, 0x72, 0x87, 0x12, 0xb0, 0x9d, 0xf5, 0x93, 0xfc, 0x7a, 0x43, 0x5a,
	0x3e, 0x50, 0x92, 0xbc, 0x59, 0x12, 0x02, 0x4b, 0x40, 0xf1, 0xab, 0x0d, 0x69, 0x6f, 0x02, 0xaf,
	0xc9, 0x78, 0xd2, 0xed, 0x5f, 0xe6, 0xd9, 0x0d, 0xe9, 0x41, 0x01, 0x44, 0x3d, 0x76, 0x0a, 0x6a,
	0xa8, 0xf3, 0x10, 0x7c, 0x72, 0x26, 0x51, 0x6c, 0x31, 0xfa, 0xf8, 0x23, 0xb8, 0xfb, 0x8c, 0x3c,
	0x06, 0x73, 0x1e, 0x13, 0xa6, 0xe1, 0x88, 0x60, 0xa2, 0xa7, 0xe5, 0xbe, 0xae, 0x97, 0xf2, 0x79,
	0x3f, 0x10, 0x16, 0x0d, 0x4d, 0xb7, 0x89, 0x89, 0xbb, 0x4f, 0xc9, 0x0d, 0x4b, 0xc4, 0xb2, 0x1a,
	0x0f, 0x5e, 0x40, 0x74, 0x7f, 0x29, 0x97, 0x67, 0x70, 0xd6, 0x2e, 0x66, 0x33, 0x76, 0x46, 0xf3,
	0x0b, 0x79, 0x30, 0x09, 0xde, 0x3b, 0xa9, 0x27, 0x68, 0x96, 0x87, 0x62, 0x5d, 0x2f, 0x15, 0x2c,
	0xf6, 0x22, 0x0f, 0x77, 0x7f, 0x2e, 0xb7, 0xe0, 0xa0, 0xfd, 0xca, 0x93, 0x82, 0x5e, 0x2a, 0x38,
	0xc6, 0x2c, 0x23, 0x3d, 0x4a, 0xe6, 0x29, 0x35, 0xee, 0xfe, 0xec, 0xb3, 0xd1, 0x1d, 0x53, 0xf2,
	0x8c, 0xee, 0xa7, 0x72, 0x39, 0x14, 0x4d, 0x4d, 0x97, 0x75, 0x11, 0x4f, 0xca, 0xbd, 0x98, 0xda,
	0x94, 0x35, 0xa7, 0xcd, 0xda, 0x9a, 0x2e, 0x1e, 0x58, 0xf1, 0xf7, 0x79, 0xdd, 0x9f, 0xc8, 0x6d,
	0x2b, 0x4a, 0xc5, 0x8e, 0xfc, 0xe9, 0x33, 0xdd, 0x50, 0x09, 0xee, 0xfe, 0x58, 0xee, 0x93, 0x14,
	0xa0, 0xa8, 0xdf, 0x2c, 0x59, 0xb6, 0x84, 0xe6, 0x4f, 0x02, 0x1a, 0x55, 0x3c, 0x76, 0x0f, 0x16,
	0x32, 0x4a, 0x41, 0x61, 0x1b, 0x1c, 0x76, 0x97, 0x6c, 0x4b, 0x53, 0xe1, 0xe0, 0xdd, 0x67, 0xf7,
	0x82, 0x5c, 0x96, 0xfc, 0x88, 0x94, 0xf9, 0x02, 0xab, 0x85, 0xa3, 0x8e, 0xfd, 0xa3, 0x8d, 0xf8,
	0x9e, 0xdb, 0xa7, 0x0b, 0x3a, 0x76, 0x5e, 0x4b, 0xff, 0x50, 0x1e, 0x81, 0xa3, 0x55, 0x7b, 0x6c,
	0x61, 0xf8, 0x83, 0x0d, 0x69, 0x53, 0x17, 0xbc, 0x08, 0x2c, 0xe6, 0x35, 0x3b, 0x2c, 0xf9, 0x63,
	0xa7, 0x79, 0x62, 0x43, 0xda, 0x62, 0xb3, 0xe2, 0x85, 0xf6, 0x4f, 0xd4, 0x5a, 0x83, 0x6d, 0x7e,
	0x7f, 0x23, 0xfe, 0x6c, 0x95, 0xf9, 0x4c, 0xf4, 0x98, 0xf7, 0x7b, 0x1b, 0xd2, 0x4e, 0xa8, 0x60,
	0xa8, 0xda, 0xec, 0x3c, 0x33, 0x47, 0x31, 0xe1, 0x44, 0x6f, 0xaf, 0xe0, 0xee, 0x1f, 0xcb, 0xb3,
	0x4c, 0xcf, 0x81, 0x04, 0x4f, 0xe1, 0xdf, 0x0d, 0xc0, 0x1a, 0xfa, 0xba, 0xc4, 0xeb, 0xa8, 0xf3,
	0xd3, 0xde, 0x14, 0x42, 0xb3, 0x2d, 0x9c, 0x04, 0x15, 0x8d, 0x62, 0x60, 0x47, 0xf0, 0xe6, 0xb4,
	0x7b, 0x4e, 0x5e, 0x62, 0xf0, 0x10, 0x4a, 0x71, 0x3c, 0x08, 0x7e, 0x47, 0xce, 0xa0, 0x0f, 0x0a,
	0x2a, 0xa3, 0xbc, 0x92, 0xc3, 0xdd, 0x6f, 0x07, 0xe0, 0x0c, 0x7a, 0x30, 0xb1, 0x7c, 0xa2, 0xee,
	0x6a, 0x1b, 0x86, 0x53, 0x50, 0xf4, 0x79, 0xe1, 0xb9, 0x85, 0xbb, 0xbf, 0x5d, 0x4f, 0xd4, 0x7a,
	0xaf, 0xaf, 0xeb, 0x46, 0x51, 0x51, 0xe1, 0x35, 0x27, 0xe8, 0x25, 0x08, 0x19, 0xeb, 0xbf, 0xd3,
	0x34, 0x41, 0x04, 0xe9, 0xae, 0x4b, 0xab, 0x10, 0x45, 0x55, 0x9d, 0x3c, 0x20, 0x59, 0x0b, 0x69,
	0xc1, 0xbb, 0x2e, 0xdb, 0x52, 0x85, 0xe4, 0xc3, 0x9b, 0x90, 0x4f, 0xd7, 0x63, 0xda, 0x79, 0xae,
	0xac, 0xac, 0xa1, 0xc3, 0x11, 0xb5, 0xe5, 0x68, 0xf9, 0x3c, 0xc9, 0x29, 0x79, 0xdc, 0xfd, 0x64,
	0x5d, 0x2a, 0x73, 0x2a, 0xaf, 0x8c, 0x96, 0x63, 0x96, 0xab, 0x3d, 0xcc, 0xe7, 0xff, 0x78, 0x5d,
	0x1a, 0xe3, 0x7c, 0x30, 0xe7, 0x27, 0x80, 0x77, 0xd6, 0xa5, 0xef, 0x02, 0xf8, 0xcb, 0x7c, 0x83,
	0xbf, 0xbd, 0xec, 0xde, 0x58, 0x4f, 0xec, 0xb7, 0x05, 0x4d, 0x66, 0x14, 0x8b, 0xb0, 0xa9, 0xd7,
	0x02, 0x9a, 0x39, 0xf4, 0xfb, 0x42, 0xe7, 0xac, 0xe8, 0x34, 0x6a, 0x66, 0x21, 0xb9, 0x41, 0xf3,
	0x65, 0xcd, 0x15, 0x9c, 0x0c, 0xc9, 0x2a, 0x25, 0x8b, 0x38, 0xf4, 0x67, 0x3f, 0x5a, 0xc1, 0xda,
	0xb4, 0xfd, 0x6a, 0xaf, 0x4b, 0x5b, 0x6b, 0x7f, 0xf5, 0x1c, 0xd1, 0x29, 0xd9, 0x51, 0x32, 0x8f,
	0xbb, 0xd7, 0xd7, 0xa5, 0x87, 0xe0, 0x1c, 0x42, 0xed, 0x99, 0xbf, 0x94, 0x92, 0x4f, 0xc9, 0x71,
	0x9c, 0x39, 0xde, 0xd2, 0xad, 0xc7, 0xf8, 0x06, 0x40, 0x85, 0x83, 0xfa, 0xcb, 0xeb, 0xd2, 0xc8,
	0xc2, 0x81, 0xaa, 0x41, 0xc4, 0x37, 0xc7, 0xdd, 0x8f, 0x02, 0xf4, 0x1f, 0x22, 0xbd, 0x0f, 0xad,
	0xd8, 0xb6, 0x92, 0x9d, 0x63, 0xe7, 0xb7, 0xbe, 0x6c, 0x34, 0xdb, 0xd1, 0xac, 0x40, 0x3a, 0x0c,
	0x41, 0x54, 0x27, 0x33, 0xef, 0x18, 0xf6, 0x1c, 0xa1, 0x79, 0xcc, 0xc8, 0xd2, 0xb6, 0xc7, 0xc2,
	0xdd, 0x4b, 0x89, 0xdb, 0x13, 0x26, 0xc7, 0xdd, 0x0f, 0xd7, 0xe3, 0x23, 0x5c, 0xe4, 0x9d, 0x49,
	0x81, 0x37, 0x5f, 0xeb, 0x89, 0x87, 0x35, 0x76, 0x56, 0x29, 0xfa, 0xeb, 0xf0, 0x38, 0xf5, 0xfe,
	0xba, 0xb4, 0xef, 0xe6, 0xa0, 0x59, 0xed, 0x04, 0x61, 0xc7, 0x94, 0xfe, 0xc1, 0x5b, 0x18, 0x7d,
	0xdf, 0x93, 0x1b, 0x33, 0xa7, 0xec, 0x3b, 0xe2, 0x7c, 0x57, 0xbe, 0x15, 0x0e, 0xef, 0xaf, 0x6a,
	0xdf, 0x91, 0x5b, 0xb5, 0x88, 0xef, 0xb9, 0xba, 0x80, 0xbb, 0x6f, 0x27, 0xae, 0x21, 0x9e, 0x52,
	0xb0, 0x88, 0xfe, 0xd6, 0xba, 0xf4, 0xe8, 0x80, 0x5a, 0xa2, 0x56, 0x3c, 0xf6, 0x80, 0xa2, 0xaa,
	0x7e, 0x7d, 0xf9, 0xe6, 0xba, 0xb4, 0x54, 0xd6, 0x0d, 0x87, 0xc7, 0x73, 0x1f, 0xce, 0xde, 0x5c,
	0xe2, 0xee, 0x1b, 0x31, 0xae, 0x6e, 0x2a, 0xba, 0x05, 0xf7, 0xd5, 0xa2, 0xf3, 0xbf, 0x2e, 0x9f,
	0x9f, 0x67, 0x6c, 0x16, 0xb6, 0x58, 0x10, 0xcb, 0x6b, 0x70, 0xf2, 0xf8, 0x5a, 0xa2, 0x11, 0xa9,
	0x44, 0x30, 0xa2, 0x57, 0xe5, 0x92, 0x64, 0x3f, 0x81, 0x20, 0x83, 0xfb, 0x9c, 0xc1, 0x7b, 0xd6,
	0x57, 0x62, 0xd8, 0x0f, 0x69, 0x8c, 0xbc, 0x20, 0xf8, 0x97, 0xe5, 0x81, 0x93, 0xfd, 0x04, 0x4e,
	0x6b, 0x98, 0x04, 0x1a, 0x90, 0xb0, 0xa1, 0x92, 0x9b, 0x6a, 0x48, 0xe2, 0x17, 0x2a, 0x61, 0x4f,
	0x95, 0x44, 0xe1, 0xa3, 0xb3, 0x73, 0x24, 0x7b, 0xd4, 0xdf, 0xc5, 0x0b, 0xeb, 0xd2, 0x33, 0x9a,
	0xec, 0x5c, 0x49, 0x3f, 0xca, 0x4e, 0x33, 0xfc, 0x88, 0x97, 0x21, 0xec, 0xf2, 0x17, 0x51, 0x1d,
	0x6d, 0xd6, 0xb1, 0xe7, 0xc8, 0xbc, 0xa3, 0x98, 0xac, 0xe2, 0x34, 0x49, 0x9e, 0x28, 0x16, 0x0d,
	0x75, 0xcf, 0xcb, 0x63, 0x7d, 0xcf, 0xad, 0x31, 0x2e, 0xf5, 0xe7, 0xd6, 0x13, 0x0f, 0xc0, 0x18,
	0x0f, 0xe6, 0x71, 0x9a, 0x55, 0x75, 0xda, 0x07, 0xfc, 0x26, 0xc1, 0xd5, 0xd9, 0x6b, 0x35, 0x88,
	0xcc, 0x46, 0xa1, 0x08, 0xdf, 0x5c, 0x74, 0x7f, 0x9d, 0x60, 0x31, 0xc5, 0xf0, 0xa4, 0x3a, 0x24,
	0xf8, 0xd5, 0x7a, 0x6c, 0xdf, 0x6b, 0xe8, 0x84, 0x27, 0x88, 0x92, 0xed, 0xe8, 0xe4, 0x04, 0xcd,
	0xb1, 0x36, 0xed, 0x40, 0x70, 0xf7, 0xd9, 0xf5, 0x84, 0x46, 0x36, 0x81, 0xee, 0x99, 0x75, 0x69,
	0x0b, 0x74, 0x4c, 0x81, 0x7a, 0x9e, 0x37, 0xf0, 0x5c, 0x4d, 0x4f, 0xaf, 0x4b, 0x6f, 0x81, 0xd8,
	0x27, 0x20, 0x7e, 0x73, 0xd0, 0x53, 0xeb, 0xc2, 0x15, 0x22, 0xeb, 0x98, 0x19, 0xdc, 0x87, 0xe2,
	0xb7, 0xa0, 0x3a, 0xeb, 0xe2, 0xd5, 0xac, 0x08, 0xc0, 0xbf, 0x72, 0xd3, 0xe9, 0x8a, 0x2f, 0x00,
	0x22, 0x10, 0xe1, 0x8e, 0x57, 0xe7, 0x53, 0xf1, 0x15, 0x7c, 0x14, 0x35, 0x6f, 0xd9, 0xa4, 0xc0,
	0x6e, 0xd4, 0x74, 0x3e, 0x11, 0x5f, 0xe9, 0x46, 0x19, 0xf2, 0x4f, 0xac, 0x69, 0x2e, 0xe9, 0x7c,
	0x2c, 0xbe, 0x36, 0x8a, 0xe0, 0xc2, 0x80, 0xe4, 0x5f, 0xfa, 0xc6, 0x9d, 0x4e, 0x2c, 0x9a, 0x8b,
	0x3c, 0xb8, 0xd7, 0x47, 0x74, 0xdc, 0xb9, 0x71, 0x8b, 0x73, 0x43, 0xb8, 0xeb, 0xac, 0xc5, 0x6f,
	0x7f, 0x5e, 0xcf, 0xb2, 0x92, 0x19, 0x77, 0xda, 0xb1, 0xfb, 0x62, 0x56, 0xc5, 0x5f, 0x0c, 0x74,
	0xae, 0x8b, 0x57, 0x10, 0x22, 0x38, 0xf6, 0x59, 0x50, 0x00, 0xbc, 0x16, 0x2b, 0x4f, 0xf6, 0xce,
	0x42, 0xcf, 0x69, 0x3a, 0xc1, 0x9d, 0x2b, 0xe2, 0xeb, 0xcb, 0x1e, 0x79, 0xc2, 0x6d, 0x47, 0xba,
	0xf5, 0xd9, 0xbc, 0x71, 0x1c, 0x77, 0x2e, 0x8b, 0xef, 0xd6, 0xa4, 0xdb, 0x0e, 0xbf, 0xff, 0xe8,
	0x7c, 0x74, 0x53, 0xb0, 0x55, 0xca, 0x58, 0x59, 0x53, 0x2b, 0xda, 0xb8, 0x73, 0x29, 0x76, 0x53,
	0x91, 0xdb, 0xa6, 0xb8, 0x13, 0xb9, 0x61, 0x12, 0x01, 0xfa, 0x1a, 0x12, 0xef, 0x6c, 0x77, 0x3e,
	0x10, 0xef, 0x10, 0x45, 0xe0, 0x70, 0x53, 0x34, 0xbc, 0x98, 0xda, 0x79, 0x3f, 0x56, 0x5a, 0x70,
	0xbd, 0xdb, 0xd2, 0x72, 0x7a, 0xa9, 0x88, 0x3b, 0xef, 0xc5, 0xea, 0x32, 0x6b, 0x1a, 0x96, 0xe5,
	0x28, 0x25, 0x7b, 0x0e, 0x77, 0xde, 0x8d, 0x37, 0x65, 0x98, 0x87, 0xc5, 0xaa, 0xce, 0x3b, 0xb1,
	0xdc, 0x71, 0x98, 0xdf, 0x42, 0x75, 0xde, 0xbe, 0xd9, 0x84, 0x70, 0xfd, 0xbc, 0xf3, 0x96, 0x78,
	0xaf, 0x2b, 0x02, 0x83, 0x7e, 0x07, 0x6e, 0x6e, 0x76, 0xde, 0x8c, 0x9d, 0x2b, 0x6f, 0x1c, 0x0f,
	0x72, 0x4b, 0xe7, 0x8d, 0x58, 0x7b, 0x9c, 0xd3, 0x72, 0x73, 0x21, 0xee, 0xf5, 0x58, 0x8d, 0xc8,
	0x6e, 0xcd, 0x76, 0x5e, 0x8b, 0xdd, 0x73, 0xd1, 0x34, 0x4e, 0xd0, 0x76, 0xd0, 0x28, 0x16, 0x35,
	0x3d, 0x87, 0x3b, 0xaf, 0xc6, 0x32, 0x40, 0x7f, 0xa1, 0xa1, 0xd9, 0xd0, 0xf3, 0xf3, 0xb8, 0xf3,
	0x8a, 0xf8, 0xf6, 0x3e, 0x16, 0x17, 0x56, 0x8c, 0xba, 0x63, 0xe5, 0x95, 0x63, 0x84, 0xf6, 0x9f,
	0x04, 0x77, 0x5e, 0x8e, 0x35, 0xff, 0xde, 0x32, 0xa7, 0xf3, 0x52, 0x3c, 0x43, 0x2c, 0x40, 0xb1,
	0x90, 0xd9, 0x79, 0x51, 0xbc, 0x1a, 0xdb, 0x67, 0xa3, 0x79, 0x43, 0x51, 0x71, 0xe7, 0x05, 0xf1,
	0x26, 0x40, 0xd4, 0xdc, 0xc2, 0xe3, 0x13, 0x55, 0x51, 0x15, 0x55, 0xb3, 0x8e, 0xb2, 0x73, 0x18,
	0xdc, 0x79, 0xfe, 0x56, 0x88, 0x4a, 0x79, 0x23, 0x27, 0x12, 0x3d, 0x27, 0x5e, 0x1f, 0x88, 0x10,
	0x89, 0x4d, 0x77, 0xd1, 0x34, 0x6c, 0x23, 0x6b, 0xe4, 0x79, 0x7d, 0xda, 0xf9, 0x8d, 0xf8, 0x32,
	0xf1, 0xe6, 0x54, 0xd9, 0x82, 0x8a, 0x3b, 0xbf, 0x16, 0xdf, 0xca, 0xf6, 0x5b, 0x0c, 0xbb, 0xf8,
	0x0b, 0x37, 0xb8, 0x03, 0x91, 0xfe, 0x2a, 0x36, 0x48, 0x14, 0x88, 0x99, 0x23, 0xe2, 0x47, 0x18,
	0xb8, 0xf3, 0x6c, 0xac, 0xaa, 0xb2, 0x25, 0x3b, 0x0a, 0x7d, 0x26, 0xd6, 0x4d, 0xe1, 0x92, 0x3b,
	0x47, 0x3d, 0x1d, 0xab, 0x50, 0x7e, 0x19, 0x9e, 0xe3, 0x9e, 0x8a, 0x5d, 0x98, 0x7a, 0x8c, 0x52,
	0xd4, 0xc2, 0x0d, 0xfd, 0x52, 0x7c, 0x5d, 0xec, 0x43, 0xf9, 0xb7, 0x2b, 0xf0, 0xd2, 0x92, 0x49,
	0x81, 0x7d, 0x1b, 0x66, 0xd1, 0x28, 0xc4, 0xaa, 0xac, 0xce, 0x2f, 0x62, 0x23, 0xa0, 0x7f, 0xeb,
	0x38, 0x4b, 0x5b, 0x1b, 0xdc, 0xf9, 0x79, 0x2c, 0xd3, 0x3e, 0x10, 0xce, 0x74, 0x3a, 0x3f, 0x4b,
	0x9a, 0x90, 0x96, 0xda, 0xd9, 0x92, 0x69, 0x51, 0x73, 0x0d, 0x6f, 0x63, 0xdc, 0x87, 0xd2, 0x51,
	0x73, 0x2d, 0xd9, 0xb4, 0xfb, 0x2f, 0x59, 0xc4, 0x74, 0x54, 0x32, 0xeb, 0x98, 0x8a, 0x9e, 0x23,
	0xb8, 0xf3, 0xa4, 0x8c, 0x83, 0xfe, 0xbb, 0xa9, 0x9d, 0x9f, 0xc8, 0x38, 0x60, 0xbe, 0x67, 0x0a,
	0x7d, 0x04, 0xee, 0x44, 0xae, 0x7f, 0xfb, 0x40, 0x38, 0x89, 0xe5, 0x7b, 0x0e, 0xef, 0x5a, 0xec,
	0x45, 0x5b, 0xa3, 0x00, 0xbe, 0x89, 0x0b, 0xb2, 0x20, 0x40, 0x05, 0x91, 0xd7, 0x32, 0xc1, 0x1d,
	0xeb, 0x3c, 0xb1, 0x2c, 0x76, 0x72, 0xcc, 0x3e, 0xfc, 0x08, 0xb4, 0xf6, 0x23, 0xf1, 0x65, 0x7b,
	0xef, 0x8e, 0xd8, 0xe7, 0x35, 0x0e, 0xbb, 0x2f, 0xc3, 0xbe, 0xa3, 0xc0, 0x9d, 0x1f, 0x8a, 0xf7,
	0x30, 0x02, 0x3d, 0x2b, 0xec, 0xf4, 0x13, 0xb4, 0xc0, 0xc9, 0xd8, 0x4a, 0x02, 0xe5, 0x0f, 0x62,
	0xc5, 0xad, 0x1a, 0x59, 0x10, 0x1d, 0xb3, 0xd1, 0x80, 0xb9, 0x27, 0x64, 0x04, 0xb4, 0xa5, 0xa4,
	0x3f, 0xf3, 0xfe, 0x16, 0x96, 0xe5, 0xdf, 0xef, 0x75, 0xbe, 0x2f, 0x8b, 0xc8, 0x76, 0xa6, 0x64,
	0xa9, 0x52, 0xf8, 0xf7, 0x64, 0x11, 0x59, 0xf6, 0x2d, 0x52, 0x27, 0xbc, 0x43, 0x91, 0x41, 0x0f,
	0xfa, 0x48, 0x93, 0x7c, 0x93, 0xee, 0x93, 0x7f, 0x99, 0x10, 0x84, 0x59, 0xa8, 0x0e, 0x69, 0xb0,
	0xe5, 0xe3, 0xfc, 0x32, 0x48, 0xe7, 0xbb, 0xb1, 0xe9, 0x02, 0x2e, 0x1d, 0x00, 0xd5, 0x9c, 0x62,
	0xcd, 0x39, 0x59, 0x08, 0xcf, 0xe7, 0x22, 0x17, 0xf8, 0xb2, 0x4a, 0xb1, 0xa7, 0x9e, 0x87, 0x16,
	0xca, 0xc2, 0x37, 0xd6, 0xc5, 0xa4, 0xc6, 0x32, 0x89, 0x04, 0xb6, 0x16, 0xc2, 0x6c, 0x94, 0x0b,
	0x61, 0xba, 0xc1, 0xb2, 0x3c, 0x5b, 0x1e, 0xbe, 0x16, 0x87, 0x6f, 0x88, 0xb2, 0x70, 0x0c, 0x59,
	0xb0, 0x72, 0xec, 0x9a, 0x01, 0x3b, 0xce, 0xb3, 0x20, 0x85, 0xd0, 0xca, 0x8d, 0xef, 0x69, 0xad,
	0x2b, 0xca, 0x25, 0x6e, 0xd6, 0xde, 0x19, 0xa2, 0x72, 0x59, 0xfb, 0x54, 0x8c, 0x58, 0xe1, 0x1c,
	0x45, 0xd3, 0xc8, 0x90, 0xa0, 0x92, 0x5e, 0xfb, 0x44, 0x4c, 0xf0, 0x21, 0x2a, 0x92, 0x7f, 0xd6,
	0x3e, 0x96, 0x83, 0xb2, 0x86, 0x3e, 0xab, 0xe5, 0x7c, 0x50, 0x47, 0xbe, 0x5e, 0x50, 0xe7, 0xc2,
	0x79, 0xfa, 0x5a, 0xe4, 0x66, 0x75, 0xbf, 0x58, 0xe1, 0x7c, 0x99, 0x9d, 0x9a, 0xad, 0xad, 0x89,
	0xf7, 0x77, 0xfa, 0xa1, 0xbe, 0x3d, 0xd0, 0x2a, 0x6e, 0xad, 0x2d, 0xd7, 0x56, 0xd6, 0xd0, 0x75,
	0x90, 0x09, 0x31, 0x8f, 0x11, 0x13, 0xaf, 0x5d, 0x17, 0x13, 0xa9, 0x08, 0x2b, 0x14, 0x0d, 0x8b,
	0x50, 0xbd, 0xe0, 0xb5, 0x6b, 0x62, 0x68, 0x08, 0x31, 0x6c, 0x39, 0x40, 0x5c, 0x89, 0x91, 0x59,
	0xd0, 0x7a, 0xd0, 0xa5, 0x2e, 0x8b, 0x76, 0x26, 0x11, 0x07, 0x2f, 0xaa, 0xd7, 0x3e, 0x12, 0x2b,
	0x7f, 0x89, 0x40, 0x88, 0x79, 0x4c, 0xcb, 0x12, 0x16, 0xe5, 0xf1, 0xda, 0x25, 0xf9, 0xac, 0x26,
	0xc9, 0x69, 0x96, 0x4d, 0xfc, 0xef, 0x4a, 0xf0, 0xda, 0x87, 0x72, 0xd9, 0xf1, 0x23, 0x37, 0x8b,
	0x5f, 0x94, 0xa1, 0x6e, 0x81, 0xd7, 0x3e, 0x90, 0x6f, 0x87, 0x5d, 0xd3, 0xf2, 0xad, 0xe9, 0x7d,
	0xb1, 0x29, 0x0b, 0x41, 0xfe, 0x67, 0x9c, 0x54, 0x2c, 0xef, 0x89, 0x41, 0x57, 0x30, 0xb8, 0x00,
	0xf0, 0xae, 0x1c, 0x00, 0xdf, 0x02, 0x01, 0xe0, 0x1d, 0xf9, 0xee, 0x7a, 0xbf, 0xe6, 0x5a, 0x7b,
	0x5b, 0xae, 0xa2, 0xa2, 0x62, 0xfa, 0x4a, 0x7c, 0x4b, 0xae, 0xe8, 0xe0, 0x76, 0x1f, 0xc5, 0x84,
	0x65, 0xab, 0x86, 0xbe, 0x1e, 0x62, 0xf8, 0xa7, 0x39, 0x34, 0xb0, 0xf5, 0xc5, 0x20, 0x89, 0xbf,
	0x5a, 0x54, 0x3a, 0x6f, 0xc8, 0x95, 0x18, 0xf9, 0x34, 0x94, 0xd2, 0x3d, 0x4c, 0x4c, 0x03, 0xaf,
	0xbd, 0x2e, 0x5e, 0x25, 0x0f, 0xd1, 0x79, 0x2a, 0x28, 0x63, 0xd6, 0xb1, 0x8c, 0x02, 0x09, 0x49,
	0x2d, 0xbc, 0xf6, 0x9a, 0x5c, 0x99, 0x3d, 0xdf, 0x10, 0x31, 0xff, 0x7a, 0x35, 0xd9, 0x9c, 0x82,
	0xcf, 0x97, 0xa0, 0x91, 0x5c, 0x7b, 0x45, 0x8c, 0xd4, 0xa2, 0x39, 0xb1, 0x6d, 0x53, 0x63, 0xb5,
	0x8a, 0x84, 0x1a, 0xd4, 0xcb, 0x72, 0xef, 0xb6, 0x8e, 0x6b, 0xb3, 0x76, 0x18, 0x4d, 0x5e, 0x92,
	0x8b, 0x9d, 0xa1, 0x78, 0x9c, 0x78, 0x51, 0xae, 0x64, 0x55, 0x33, 0x59, 0xd4, 0xb7, 0x8a, 0x86,
	0x6e, 0x11, 0xbc, 0xf6, 0x82, 0x5c, 0xc9, 0xb4, 0x2f, 0x71, 0xec, 0xbc, 0x91, 0xc3, 0x6b, 0xcf,
	0x8b, 0x79, 0x4c, 0x30, 0x17, 0xcb, 0x3f, 0x4c, 0xb5, 0xe7, 0x82, 0xf3, 0x16, 0xb3, 0xa4, 0xe3,
	0xb5, 0xe7, 0xc4, 0xa5, 0xb3, 0x44, 0xa7, 0x1e, 0x23, 0x09, 0xea, 0xd7, 0xd7, 0xc5, 0x22, 0x52,
	0xc0, 0xb1, 0x52, 0x2b, 0x72, 0x72, 0x8e, 0xaf, 0x77, 0xc5, 0xa2, 0xa4, 0x0f, 0x1c, 0x9e, 0x45,
	0x5f, 0x0f, 0x03, 0xf2, 0x1d, 0x68, 0x5a, 0xd5, 0x78, 0xf5, 0xa2, 0xe5, 0xf8, 0x85, 0xb5, 0x6b,
	0xeb, 0xe2, 0x86, 0xfd, 0x71, 0xb1, 0x83, 0xba, 0xd6, 0x15, 0x9d, 0xd0, 0x47, 0x44, 0x9a, 0xa7,
	0x6b, 0x9f, 0x8a, 0x1a, 0xf5, 0x21, 0x34, 0xf5, 0xd0, 0x9f, 0x59, 0x18, 0x64, 0xdf, 0xf1, 0x5d,
	0x8b, 0x7c, 0x62, 0xee, 0x23, 0x95, 0x62, 0xd1, 0xff, 0xf6, 0x6a, 0x16, 0x52, 0xf4, 0xb5, 0xc8,
	0x17, 0x36, 0x3e, 0x8c, 0x1d, 0x48, 0xb1, 0xd8, 0x4a, 0x73, 0x28, 0xdb, 0x36, 0xbe, 0x16, 0xf9,
	0xc8, 0xdc, 0x07, 0x8b, 0x5f, 0x7f, 0xf1, 0x49, 0x6f, 0xc8, 0x70, 0x90, 0xa4, 0x99, 0xd4, 0x78,
	0x18, 0xbb, 0xb6, 0x26, 0xca, 0x16, 0xbe, 0x46, 0x03, 0xc9, 0xf2, 0x5a, 0x37, 0xfc, 0x0c, 0xfd,
	0xea, 0xba, 0x14, 0x18, 0xf9, 0x4e, 0x1a, 0x2c, 0xfe, 0x6a, 0xe4, 0x43, 0xa5, 0x3e, 0x20, 0xfb,
	0x9a, 0xe9, 0xea, 0xa7, 0x62, 0xf5, 0x16, 0x80, 0xe0, 0x07, 0xf6, 0x47, 0x16, 0xd8, 0x49, 0xa6,
	0x63, 0xab, 0x26, 0x9f, 0x36, 0x14, 0xe6, 0xd7, 0xd0, 0xef, 0x49, 0x28, 0x38, 0xb7, 0xfe, 0x27,
	0xd1, 0x99, 0x79, 0xff, 0x6f, 0x2b, 0xe0, 0xab, 0x1f, 0x8b, 0x4d, 0x4e, 0x94, 0x54, 0xa8, 0x95,
	0x58, 0xd4, 0x61, 0xe5, 0xed, 0xd5, 0x8e, 0xa8, 0xba, 0x80, 0x24, 0x8c, 0x07, 0x10, 0x08, 0xf1,
	0xd5, 0x1b, 0xa2, 0x7f, 0xf4, 0xed, 0x35, 0xfa, 0x17, 0x0a, 0x72, 0xf6, 0x1c, 0xbe, 0x1a, 0x8a,
	0xfb, 0x1b, 0xe8, 0x90, 0x40, 0xa0, 0x92, 0xc8, 0x1f, 0x34, 0x08, 0x6c, 0x9a, 0xdd, 0xce, 0x67,
	0x5c, 0x32, 0x39, 0x44, 0xbe, 0x6f, 0xea, 0x5b, 0x92, 0x21, 0x59, 0xca, 0xbe, 0x7a, 0x5d, 0x8c,
	0x6a, 0xa1, 0x6e, 0x55, 0x56, 0x65, 0x3b, 0xb4, 0xcc, 0xa6, 0x52, 0x2b, 0xe5, 0xf3, 0xf8, 0xea,
	0x35, 0xb1, 0xe5, 0x0c, 0xb0, 0xa0, 0x04, 0xa2, 0x72, 0x01, 0x45, 0x2e, 0x72, 0x18, 0x3a, 0xc1,
	0x57, 0xaf, 0x88, 0x0e, 0x15, 0x50, 0xe9, 0x86, 0x4f, 0x88, 0xaf, 0x5e, 0x16, 0x9b, 0xd2, 0x00,
	0x11, 0x99, 0x89, 0x7f, 0xf6, 0xad, 0x9c, 0xe0, 0x35, 0xeb, 0xd5, 0x4b, 0x62, 0x24, 0x8c, 0xea,
	0x2b, 0xb8, 0xab, 0x8c, 0xaf, 0x7e, 0x28, 0xb5, 0x33, 0xcb, 0x56, 0x45, 0xd0, 0x07, 0xa2, 0x3f,
	0xf7, 0x49, 0xeb, 0x28, 0x99, 0xc7, 0x57, 0xdf, 0x17, 0xab, 0xdb, 0x58, 0x29, 0x05, 0x96, 0x11,
	0xf9, 0xb8, 0x9f, 0x76, 0x89, 0x7d, 0x1a, 0xf0, 0x9b, 0xa9, 0x2b, 0xeb, 0xe2, 0x17, 0x14, 0x12,
	0xa8, 0xfc, 0x4b, 0xbf, 0x2b, 0x5d, 0x51, 0x6d, 0x02, 0x99, 0x55, 0xd4, 0xd8, 0xe7, 0x29, 0x10,
	0xa0, 0x21, 0xa2, 0x5d, 0x89, 0xfc, 0xd1, 0x0b, 0x19, 0x56, 0x25, 0x96, 0x6d, 0x1a, 0xfc, 0xa4,
	0xfd, 0xca, 0x27, 0xa2, 0xbd, 0x0a, 0xf0, 0x20, 0x69, 0x65, 0x4a, 0xb3, 0xe2, 0xdd, 0x91, 0x2b,
	0x11, 0xd7, 0x11, 0x08, 0xc2, 0xeb, 0xc0, 0x7d, 0x24, 0x1d, 0xd1, 0xb5, 0xe5, 0x24, 0xe1, 0x01,
	0x61, 0xb1, 0x64, 0xe3, 0x2b, 0x37, 0xc4, 0x7b, 0xde, 0x22, 0x57, 0xec, 0x85, 0x03, 0xeb, 0xa4,
	0x7d, 0x5a, 0x25, 0x9f, 0x33, 0x4c, 0xcd, 0x9e, 0x2b, 0xe0, 0x2b, 0x6b, 0x62, 0x43, 0x17, 0x43,
	0x27, 0xac, 0x2a, 0x50, 0x46, 0x8a, 0x59, 0x99, 0x1c, 0x98, 0xb8, 0x22, 0xe7, 0xb6, 0xf2, 0xad,
	0x30, 0xe0, 0x35, 0xb1, 0x26, 0x90, 0x68, 0x9a, 0x7f, 0xca, 0xcc, 0x15, 0x7c, 0x45, 0xac, 0x4e,
	0x04, 0x74, 0x5e, 0xd3, 0x4b, 0x27, 0xfc, 0xc6, 0x20, 0xab, 0xe4, 0xf3, 0x7c, 0xf6, 0xcb, 0x31,
	0x4a, 0x08, 0xfb, 0x56, 0x5b, 0xb1, 0x59, 0xdf, 0xed, 0x2f, 0xf1, 0x51, 0x24, 0x0f, 0x0b, 0x4b,
	0x3c, 0x6c, 0xf0, 0xf7, 0x3e, 0x6c, 0xea, 0x4b, 0x42, 0x39, 0xe1, 0xdb, 0x1a, 0xbc, 0x7c, 0x82,
	0x80, 0x0e, 0xe1, 0xdf, 0x50, 0xe1, 0xb3, 0x20, 0xfc, 0x6f, 0x07, 0x53, 0x29, 0x34, 0x49, 0xdd,
	0xb4, 0x60, 0xa8, 0x25, 0x9a, 0x78, 0x4b, 0x05, 0xbc, 0x33, 0xb5, 0x0f, 0xdd, 0x0d, 0x9f, 0x4e,
	0x1b, 0x96, 0x66, 0x6b, 0xc7, 0x08, 0x17, 0xa3, 0x0a, 0xc3, 0x4e, 0x91, 0x98, 0x1c, 0x8d, 0x71,
	0xea, 0x4b, 0x0c, 0xa9, 0x93, 0x9c, 0x92, 0x88, 0x7c, 0x7c, 0x30, 0x35, 0x85, 0xc6, 0x73, 0x84,
	0x5b, 0x72, 0x29, 0x8b, 0x3f, 0x97, 0x9a, 0x09, 0x1f, 0x10, 0xd3, 0xc4, 0x8f, 0x6f, 0x88, 0xfb,
	0xf3, 0x47, 0xfa, 0x5d, 0xf0, 0xb7, 0xeb, 0x62, 0xb2, 0xf6, 0x71, 0xe1, 0x1f, 0xce, 0x08, 0xcf,
	0xbe, 0x37, 0xd6, 0x65, 0x33, 0xf6, 0xdf, 0x8b, 0x5a, 0x5f, 0x17, 0x55, 0x1d, 0xf0, 0x94, 0x2d,
	0xe4, 0x04, 0xbf, 0x66, 0xf2, 0xd1, 0x54, 0xfc, 0xf8, 0xdf, 0x89, 0xfe, 0x29, 0x47, 0x43, 0xd1,
	0xc6, 0x5a, 0xe7, 0xc7, 0xff, 0x6f, 0xfc, 0xe4, 0x70, 0x74, 0xc2, 0xb0, 0xfc, 0x2f, 0x0c, 0x3d,
	0xfe, 0xb7, 0xa2, 0xa7, 0x45, 0xd1, 0xc2, 0x7d, 0x76, 0x71, 0xfe, 0xff, 0x23, 0xa3, 0xb0, 0x4f,
	0xe4, 0x8d, 0x1c, 0x9b, 0x9f, 0x5f, 0xb5, 0x63, 0x9f, 0x61, 0xd8, 0x96, 0x8a, 0x1f, 0xff, 0x1b,
	0x31, 0xca, 0x06, 0x14, 0x10, 0xae, 0x82, 0xe3, 0xdc, 0xc7, 0xff, 0x5a, 0x4c, 0x03, 0x79, 0x23,
	0x0b, 0x20, 0xe7, 0xfe, 0xc7, 0xee, 0xa7, 0xff, 0x0e, 0xde, 0x7f, 0x10, 0x6f, 0x74, 0x93, 0x10,
	0x87, 0x28, 0xe2, 0xd3, 0x24, 0xc4, 0x03, 0x14, 0xf1, 0x49, 0x12, 0xe2, 0x41, 0x8a, 0xf8, 0x38,
	0x09, 0x71, 0x98, 0x22, 0x3a, 0x49, 0x88, 0xaf, 0x52, 0xc4, 0x8d, 0x24, 0xc4, 0x43, 0x14, 0xb1,
	0x96, 0x84, 0xf8, 0x1a, 0x45, 0xb4, 0x93, 0x10, 0x0a, 0x45, 0x5c, 0x4f, 0x42, 0x64, 0x28, 0xe2,
	0x5a, 0x12, 0x22, 0x4b, 0x11, 0x57, 0x92, 0x10, 0x2a, 0x45, 0x5c, 0x4e, 0x42, 0x10, 0x8a, 0xf8,
	0x28, 0x09, 0x31, 0x4b, 0x11, 0x97, 0x12, 0x10, 0x07, 0xee, 0xa7, 0x88, 0x0f, 0x93, 0x10, 0x07,
	0x28, 0xe2, 0x83, 0x24, 0x04, 0xd8, 0xc7, 0xfb, 0x49, 0x08, 0xb0, 0x8f, 0xf7, 0x92, 0x10, 0x60,
	0x1f, 0xef, 0x26, 0x21, 0xc0, 0x3e, 0xde, 0x49, 0x42, 0x80, 0x7d, 0xbc, 0x9d, 0x84, 0x00, 0xfb,
	0x78, 0x2b, 0x09, 0x01, 0xf6, 0xf1, 0x66, 0x12, 0x02, 0xec, 0xe3, 0x8d, 0x24, 0x04, 0xd8, 0xc7,
	0xeb, 0x49, 0x08, 0xb0, 0x8f, 0xd7, 0x92, 0x10, 0x60, 0x1f, 0xaf, 0x26, 0x21, 0xc0, 0x3e, 0x5e,
	0x49, 0x42, 0x80, 0x7d, 0xbc, 0x9c, 0x84, 0x00, 0xfb, 0x78, 0x29, 0x01, 0x71, 0x10, 0xec, 0xe3,
	0xc5, 0x24, 0x04, 0x48, 0xec, 0x99, 0x04, 0xc4, 0x21, 0x98, 0xe3, 0xc9, 0x24, 0x04, 0xcc, 0xf1,
	0x44, 0x02, 0xe2, 0x01, 0x98, 0x23, 0xfc, 0x70, 0x4a, 0x82, 0x60, 0x9e, 0x9d, 0x80, 0x78, 0x90,
	0xd9, 0x7a, 0x12, 0x82, 0x69, 0x3f, 0x01, 0x71, 0x98, 0xc9, 0x23, 0x09, 0xc1, 0xe4, 0x91, 0x80,
	0xf8, 0x2a, 0x93, 0x47, 0x12, 0x82, 0xc9, 0x23, 0x01, 0xf1, 0x10, 0x93, 0xc7, 0x7a, 0x02, 0x82,
	0xc9, 0x23, 0x01, 0xf1, 0x35, 0x26, 0x8f, 0x24, 0x04, 0x93, 0x47, 0x02, 0x42, 0x61, 0xf2, 0x48,
	0x42, 0x30, 0x79, 0x24, 0x20, 0x32, 0x4c, 0x1e, 0x49, 0x08, 0x26, 0x8f, 0x04, 0x44, 0x96, 0xc9,
	0xe3, 0xef, 0x12, 0x10, 0x4c, 0x1e, 0x09, 0x88, 0x59, 0xf0, 0x86, 0x6f, 0xfb, 0x88, 0x83, 0xd7,
	0x07, 0xd0, 0x24, 0xff, 0x03, 0x79, 0xb9, 0xb2, 0xe7, 0x5a, 0x8f, 0x36, 0x53, 0x15, 0xb4, 0x85,
	0xff, 0x99, 0x61, 0xf8, 0x73, 0xbe, 0xa9, 0xbe, 0x3f, 0xdd, 0x1b, 0xfb, 0x67, 0x99, 0x77, 0xc6,
	0x40, 0x65, 0x7f, 0x90, 0xba, 0x85, 0xa6, 0xc5, 0x55, 0xd8, 0x5f, 0x2b, 0xde, 0x7f, 0xcb, 0x4b,
	0x01, 0x7e, 0xe7, 0xfe, 0x5b, 0x5e, 0x0f, 0xf0, 0x47, 0xf6, 0xa3, 0xe1, 0x93, 0xce, 0x69, 0xf7,
	0x6c, 0x6a, 0xcf, 0x7e, 0xf6, 0xff, 0x00, 0xef, 0xf7, 0xff, 0x1f, 0xe0, 0xfd, 0xb3, 0x55, 0xb7,
	0x56, 0x31, 0xf8, 0xdf, 0x2c, 0xfe, 0x6f, 0xff, 0x15, 0xfe, 0xb3, 0x8b, 0x23, 0xf7, 0xa1, 0x11,
	0xcf, 0xa9, 0xd6, 0xbd, 0x87, 0x6e, 0x46, 0x70, 0x89, 0x13, 0xdc, 0x8f, 0x36, 0x7b, 0xf0, 0xff,
	0x00, 0xdc, 0x94, 0xe2, 0xbf, 0x8b, 0x14, 0xd5, 0xba, 0x77, 0xe0, 0xf0, 0xcd, 0x28, 0x3e, 0xe2,
	0x14, 0x07, 0xd0, 0x28, 0x5b, 0xe3, 0xe6, 0x24, 0x7f, 0x29, 0xee, 0xe3, 0x64, 0xad, 0x71, 0xf2,
	0x66, 0x04, 0x97, 0x39, 0xc1, 0x61, 0x34, 0x71, 0xd2, 0x59, 0x58, 0x6d, 0x79, 0xfc, 0xbf, 0x61,
	0xb9, 0x19, 0xdd, 0x5f, 0x71, 0xba, 0x07, 0xc5, 0xbf, 0xbc, 0x9d, 0xba, 0xb3, 0x8f, 0xa8, 0xe0,
	0xb6, 0x5a, 0xe5, 0x25, 0xd7, 0x27, 0xfb, 0xeb, 0x7f, 0x07, 0xff, 0xbb, 0xcd, 0xff, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x38, 0xfa, 0xe0, 0x19, 0xbc, 0x79, 0x00, 0x00,
}
